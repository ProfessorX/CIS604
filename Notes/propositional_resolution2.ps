%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: propositional_resolution2.dvi
%%CreationDate: Wed Oct  1 09:28:54 2014
%%Pages: 26
%%PageOrder: Ascend
%%BoundingBox: 0 0 618 871
%%DocumentFonts: NimbusRomNo9L-Medi NimbusRomNo9L-MediItal
%%+ NimbusSanL-Regu NimbusMonL-Regu CMMI12 CMTI12 NimbusSanL-ReguItal
%%+ NimbusSanL-Bold CMSY10 CMMI10 CMR7 CMMI7 CMSY7 CMR9 CMMI9 CMR12
%%+ CMR10 Helvetica Helvetica-Bold Helvetica-Oblique
%%+ Helvetica-BoldOblique Times-Roman Times-Bold Times-Italic
%%+ Times-BoldItalic Courier Courier-Bold Courier-Oblique
%%+ Courier-BoldOblique Symbol
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips propositional_resolution2.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.10.01:0910
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: groff.enc 0 0
%!PS-Adobe-3.0 Resource-Encoding
%
% @psencodingfile{
%   author = "Werner Lemberg, Michail Vidiassov",
%   version = "1.0",
%   date = "2006-Feb-03",
%   filename = "groff.enc",
%   license = "public domain",
%   email = "groff@gnu.org",
%   docstring = "Groff default text encoding.  Used with MetaPost."
% }

%%BeginResource: encoding groffEncoding
/groffEncoding [
% 0x00 | 0
  /asciicircum     /asciitilde        /Scaron            /Zcaron
  /scaron          /zcaron            /Ydieresis         /trademark
  /quotesingle     /Euro              /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
% 0x10 | 16
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
  /.notdef         /.notdef           /.notdef           /.notdef
% 0x20 | 32
  /space           /exclam            /quotedbl          /numbersign
  /dollar          /percent           /ampersand         /quoteright
  /parenleft       /parenright        /asterisk          /plus
  /comma           /hyphen            /period            /slash
% 0x30 | 48
  /zero            /one               /two               /three
  /four            /five              /six               /seven
  /eight           /nine              /colon             /semicolon
  /less            /equal             /greater           /question
% 0x40 | 64
  /at              /A                 /B                 /C
  /D               /E                 /F                 /G
  /H               /I                 /J                 /K
  /L               /M                 /N                 /O
% 0x50 | 80
  /P               /Q                 /R                 /S
  /T               /U                 /V                 /W
  /X               /Y                 /Z                 /bracketleft
  /backslash       /bracketright      /circumflex        /underscore
% 0x60 | 96
  /quoteleft       /a                 /b                 /c
  /d               /e                 /f                 /g
  /h               /i                 /j                 /k
  /l               /m                 /n                 /o
% 0x70 | 112
  /p               /q                 /r                 /s
  /t               /u                 /v                 /w
  /x               /y                 /z                 /braceleft
  /bar             /braceright        /tilde             /.notdef
% 0x80 | 128
  /quotesinglbase  /guillemotleft     /guillemotright    /bullet
  /florin          /fraction          /perthousand       /dagger
  /daggerdbl       /endash            /emdash            /ff
  /fi              /fl                /ffi               /ffl
% 0x90 | 144
  /dotlessi        /dotlessj          /grave             /hungarumlaut
  /dotaccent       /breve             /caron             /ring
  /ogonek          /quotedblleft      /quotedblright     /oe
  /lslash          /quotedblbase      /OE                /Lslash
% 0xA0 | 160
  /.notdef         /exclamdown        /cent              /sterling
  /currency        /yen               /brokenbar         /section
  /dieresis        /copyright         /ordfeminine       /guilsinglleft
  /logicalnot      /minus             /registered        /macron
% 0xB0 | 176
  /degree          /plusminus         /twosuperior       /threesuperior
  /acute           /mu                /paragraph         /periodcentered
  /cedilla         /onesuperior       /ordmasculine      /guilsinglright
  /onequarter      /onehalf           /threequarters     /questiondown
% 0xC0 | 192
  /Agrave          /Aacute            /Acircumflex       /Atilde
  /Adieresis       /Aring             /AE                /Ccedilla
  /Egrave          /Eacute            /Ecircumflex       /Edieresis
  /Igrave          /Iacute            /Icircumflex       /Idieresis
% 0xD0 | 208
  /Eth             /Ntilde            /Ograve            /Oacute
  /Ocircumflex     /Otilde            /Odieresis         /multiply
  /Oslash          /Ugrave            /Uacute            /Ucircumflex
  /Udieresis       /Yacute            /Thorn             /germandbls
% 0xE0 | 224
  /agrave          /aacute            /acircumflex       /atilde
  /adieresis       /aring             /ae                /ccedilla
  /egrave          /eacute            /ecircumflex       /edieresis
  /igrave          /iacute            /icircumflex       /idieresis
% 0xF0 | 240
  /eth             /ntilde            /ograve            /oacute
  /ocircumflex     /otilde            /odieresis         /divide
  /oslash          /ugrave            /uacute            /ucircumflex
  /udieresis       /yacute            /thorn             /ydieresis
] def
%%EndResource

% eof

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusSanL-ReguItal
%!PS-AdobeFont-1.0: NimbusSanL-ReguItal 1.05a
%%Title: NimbusSanL-ReguItal
%%CreationDate: Thu Mar 20 10:08:40 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-ReguItal
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-ReguItal known{/NimbusSanL-ReguItal findfont dup/UniqueID known{dup
/UniqueID get 5020908 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-ReguItal def
/FontBBox [-178 -284 1108 953 ]readonly def
/UniqueID 5020908 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CCFB357288DEF82BE
422B9914B075E7EC18835881AB22C2A47DAAA4EEC0A8DDA1CDB5292531E5261E
D8FBC087C00D12D9BDC0051529207238FFF92500581849C386F8427D44353C41
FA42972E325397AFA55CA5189B1EF4979F06711E406A219DCC46C88FC82473B8
567E47B75364FBEE1A883FC42C9CD2E1EB581D4D0C25F509BF595314EA222031
BA9606F17E3E4931D50AC6AC2B63711B0E85A6CBE6FFD9275461474D673694DA
B38706890D6422CBB2B499C0C89A7AF218BD84FE0B13D689EB5930AD0DAB5C0B
55F68356C285EDD85B3C0AFE1B9001572AEC0C3692958F7F3E16DB0C2D0647BA
C1A4EA2EAE112F680B33AD9D59962FBD63BED5766186A1C4C21F500B374218E5
7CEBA25638D9F0520E789B2F39CB0567D6BD72C076BC76095B60ED5E82F33E9E
D2448B364626AB558A979368B0F1495D8C504EA8B6E291E781F5DD708FE9B5D9
9CC26079902BF1EA845CC6ECC973DACF88D956769DBABCCC1F7C44B3B1111732
3CFE60583458E93FB796A440E43018C4CFE846F1C79CCA0416E6B446ACCD1D05
A4A682928674FB388BB109497BEE1F0AD9EB289AD984DF057E8A27F23601CC25
EBA38ED89F18CE03BE3645F75ABB0BA2D6CA8746A0F96518E865AD53CD4F428F
601B06E05B6B3F27C3A62CCE52668854DB4DDED614791C32F31A1595BC2D3E16
772C0ECFFBD06A07A1221AEAFB8CC91029C159B121F677C9AAFDE187994135D2
741BDCF6B4442E6728BD38194DC406A9F88D3A94E458275AF47E670A57FFD531
F72836EE4932C0312FAA0C1CE257FBF790B4B211B413770AE9E73A46BA6E12F4
A58A5CA4121CD6A7A7214DDA473850650623BAE8D7BC6F4034C6B648F329EADA
DB8049C762F7D3B273FE1AD47F072E6A69282866FE0F37107E9DAA8FD7EEF483
7B825A0E000E57B711220A699F38EEE6BD832C6ADD8CABCF7A9A5EDBA83116C9
D9139619E407AF339C1A479065EA6FD7A58A466C6230CB5A8F8583955E0AB271
536098804287DA09D1CBECBC283B2810D28A1EDBFB2158886231E454146E77EE
C99A662DC9E225C24C3E8F1F79CC9DA24C19532BCAE414F63152202C54551485
EA43B64620AA53E3F13BE05939C2A6F9E150CFF49B3ED6A0FDA63D6362581AF5
E58BBB72495C099979D44BB1AA7F38437E12DBECBA9C16B816225009664E3D89
A1AB5E0FD14BC06ADF01C89F3BD84F79BFB78621D2B1C4A752A377FFCD5D5E29
BC792F50676DC70568334E34AF8970169E976E2488EBD830CCB0A350C695E3AB
C1069A9A887309E014F82B805C37AECF05FD413220403E4EEDB25C9DD97F93C4
9FAD4CE822EB97AAF4E70942EC5E5FE4C6E3956DFB2E008F22E3792513C2AECB
2746C788F104490DC1B3A97937AFE44F3CAC5970BF57C7E351F9925FB96349F8
D9786D8E6FF03E9C4EF933A0C6F0FDFF0824440CA2C5B1576E328533BED6A267
370F18C3ABB22E10CD76A882561AF051F1C984EFCB77A4455A187942B49668D1
A08ED7BC6430D352B40ADB8DEC07D5975B8F29029F44C5EBEDA79B3DAAC2B1F8
51F14F3251AA596E52567706CB28468A9A6AD9F9B873F1845718FE5FDF73CC03
6BA1DC8D789B86226E38B0DB3AFD1891636F4FDA98A9A9C847FD8BD3376F8C42
2B3C323AFB4FA9682559E4C206881B58EA640A934223A46C181243A68E87D470
463759F200DAA04B33D16DB6B31C5B7C90ABFEA5BD633181D694F8A1F7EA9293
2FD6EA75F74A5748ECB4D1A196028414E78C7DED728931C69CBC1ED2715BCA21
0457E9790955DE7D6F76CDB2C8D8A2D0EE12B6EFD2891BF0A2BB9F3FD724403F
327989DC1921EBA3569A1BFE82EF71E793E6B2D7FCAEDA15067CD58C10F8E3C4
E290877BC10A2C9C3D4F7F807C8EBC32C3F8C614B384765B4D7A65E19736EFE3
29C40BFA2C5B3357EEF078F07E9B9BF2A37B968379FC709EDB5F31D22572CC89
9A5515E4CC144B9C069FBDB3294AEB5B3FF718CE2B60C353C45B706476AF9FDB
E2D402EDAEE6F3676599386A9FDE567218CB1C253AEA657A7BD6AE2EE7619D43
C79C9C0DA1477878D568015A4D417E9D1C7A7AD5D148C6D9824C2D994A18FD7A
12AFB96144A18430207F0124EE7C8370B7AE611747CAEE282505ECDCF2330A24
391471476FF82BF6717845C0FC93D273C16FDFA47A9DC63B3E51C9F25DB513CE
5CCD3655F59DB32AFEF7234BC89A05CD2D29851EA45608CCB7CF0644402E5494
88E035ED29C878709A954D8AFDBAC7A288116F8BD3A688023BDDC342FF7C1F69
1426674C8884BB0FA3EB65D1FA0A89A89D69945445C0241B0195D246D486ED85
29716ED1BDC68FB76D02E7F8EE4224A614CD85E121E4106C10861FDE0558560F
942BDA1FE2DCC16C9FE5AAC91B99D9BB1FDBB75BC2A87A071C6EAC90E92FED0E
FAC5D187A1416AD0FF129F1C033290635C60280122404A772D9B7C8EBFC881A6
ED8D490FE15EBC6A6956477E8B7DAAF1AE28A6B251C2B86C38CF5F8E1554E4B6
108B1BCFB5C7E9E70F89B641F6022DBA5C585542853A4E6FCFBA95E31E2B9572
0BD2721C066F31553E26153DE9FED3B3F6B887D7312BEDD3B24A29EE505F477B
50A2864C72187FB7CCAF11D9E2B99F1FD6385F6A1941C4E44C709CD5C31B03F7
2EC8D2A2347451F3EFA021D02B02DB6D083255884BE682E5162DC70CD52C30C6
7B52B16D7847332468AC75136249746FD78B3405E6264E65584221D908B2DF44
F618B339808C173E0DA54DC4D70F8130951AA690678CFAAF75BE7A176156E446
A11E8AF5F4EBBD25ABC91E4D1842B7F0B15E11FFFFCEBCE9D95165CAB7B31925
F8B863C1F509FFD55247F5F0AFB83844865365CB546BDC33DED68EC6564254EC
67A28387F45DC881935DFC6FB2FF8D51E401979D72B08EA7C98A8C8B5D8432E1
B8AB3077FDD933B17AB72D91861CADD482C2A3445103C71AE56067995D876488
81DBB4A11316FD47C02B751975EC88A821A0F01E553D0B7F7C335E5BC9A88678
4E0C4502DF2325C6A20FC928E938C2953197D2BA6C3EB9BB43803B6E94E3E1F1
C66FC9189C1B195F198298C6F64BADD41B748E9CACD7027F020B02E96A9C09F8
CE318D10464412A605CDD0A6CDE0416B9E7D140F6423BADC9FBD98FA24244117
A4570249272699F8E2BBD02F51D5F36857352C50BCB1D408EBABFEE49C0BC875
C13B3F6E7CCD45188DA775C658D3D88C14F64529127ECB230D8470432C5D49AF
CFD1AAEC4C440FE2CD2E17230BA3F7F9CCAD2C408B5CCBA4C354857D0ADA4C83
7F0A9180971CFA9AA8BAA3611A6E49108E9B2A68FD225CD562337CD494C17596
86A13A12E972502D2C4581D1CDDA4D74C2A80C06B4FCE3165055D7B1FEB9B2AC
47AE876F631DE51942F7448F3FE32A7F21D89C62E26AD0FA351C711F1707E3B8
CB6B8BDDD973D97069075089BAD031AC0F1F5B78797A2EB7D9DA915195BCD582
CFA6FA1FA48364F4882810DA6A5FB925498520CC9A721568D7E418E7A48AB349
A857288594F680B856275D2BE2B58063234A6CF048F2D971CE87F38DDE9E2427
D7AFBE95FD63347BFF87ADD357CE6BB32F6ED738C5BD7E7348529661A29CD3A7
8F8888A37651CC5A6ECD192E7FF63526ED4B29597E44DD3DBCC31F230815D0EB
1939DD2C9E6D4ACEF6EDCFBA15A728B387A06C8DD67A6B95847046477B4DA28C
0B696513331E9761AA3AF4049CDE21C19A914E62815F6EAC940953DBACEFE793
EFF079E5D9B3B64E77961A53EC517E7DE5A36F1C8BE97CE259E598DA68999081
5C146A77B37C2AA137CF2AC1754A5114198D5AF4AD57309B99CB34B0C0A04589
743570748F19350BBA2BFD011A4900CCA9C87D7521CB4C1CF5436A64070D8435
FD5224CEB0A5E2A16E1BC2759748606B16A1595027F2CA2023BE7E2F5BE9DF9C
C91DAA1A901B4466D122BDBAB9CC4529A236F278C931FC29AEDB49B812B4C290
550439D5F03AE2AC4A02DE7504B188ED8940FF69E415C0D23BCCE223BDAF77E5
06DE4FFB3BEACECAA762C0ECD78CB69E71B7C9D375CA73B8912BF7681AB8162C
C6CD84F2BCF9A20049DC9EDBE8DB125F876D74E78B2EB500644EE32FD175E41F
1BAF8103C86AD685AD56B7873345471506C83386503C8B94B4C9BD6A633A4F39
C261465BBB525B811EAE96A68E981C3C6E4D1B390330A5C09C4F287CE74FF110
7145638D1C3BA230C985E885D8F765AF50195832E6D98CF21392707601348706
5FF691846E8795D7A959F10E905102BB1F13A800FDBF678AE39C4522B7B40159
3C0A44CC26D3036771F480E6C0F48A3B7FA94BD8111337BD36A0CE07AEC5CD9C
C00123BAD96EDCFDE140C5D7E201EA28F54BB0041D620193591F7E49F0CC6AA4
72939F9682ACAEBC0AD0D86EEF064C9A7F6F0CF8C23FF3D587096AB7CED3F7BC
BFF2608FAA6D79AD15C36541BD008F370D37CA19FE3884BCBC21F14E03914AA5
CFACE57F7C6D6BB336B79CA6C0DEDA2B632CD8046D5E9A56CB6029C51971345E
8AE28E681807561E51BAF0EDE75422194A07310B1E87CF7A64D0695D0C8E98D6
64F355E868A6F45AFE9ED281576456E3F397EC574F89B1E8B492528BC78EBC43
F444B00D05D5F0F7FB83799D4F2423946019B4423258E0204307CED5D5F43C1B
1ECE9EF761AD4D88A7650C27F4595320EF5996F1D2F19999357E0CF9C6EC0339
D801194DA68BB6520900479F1E9BB10D78025D86A072AA40074D84574F3FF02E
7CEE8E36FC83678D46A311F8D7D9EF902E0BA4AFE66455EBF25BA0D7F4EED237
E4A10316788D9329BC32B4623020C48BC903820668E431EB6054F122A551BB02
ADB301C7D56835931324905BFA4A13138724E467B24580E96CEE885C85846A46
B78554316B59740C91506CCEC1FB7DD6CE9239389A2EDBB3C6A12A2C30F4FD84
968CB1A59A531BDFD590276C992F63219D13465BCBE4CAB27790823845924A0F
7F5B1ABD2D8A9C726E36D7FDFC4D9B5850A26EA6E656AB6E1549733CB9F1D8A4
ABC79C8AB3EDF349A5DA04D5B96121649CCF8F72E4D289420BFE39C56C76D48B
B9E7154CE225BC0C78A6B31F14901537A8B8BDCEC943E0FD4B9E37951E60A22C
7C13AD014D02D79537B68E48356E1990457FDC027CE14EA320966C97B2329D38
B3738C51DF2CD77AE5BADD2C281130D052C71D3EA6837A1C3237E089F84D314B
6AF2FCAF7DDDE139D9C753D90B63A6EABAF9797DFBCDF17830FB1425DF2654D4
4B1F08B5318D9D199F146E072F99B0BB64A313214F1730B2DD1CD43B5D512336
FB5266E4AE3DB4900188A76F852C1085E7FADBB979E6ED80672B602D58E5A54D
DE368E7B19E93FDDCFFD3F85F37170CFFE490EEE7430F866C5232143B32EA10D
8FFD00F75FABC835CB37959BDB1624B42E8FE34CA75D5E75A3F0F30F41869D38
413D92792DFC02C82F75D3340E5F57494C59AE784FE6A0D7028488CEFBE76AB9
5EA71453FF05AA7718AC56213848E89B355AD2A875B2FF5351957EFA5EE6F60C
13A0BFD978FF8A4D8E18F1F2FEB1B53E1BD38C7759C3B4D52B7B3B522AD83580
4D63A713F10E031743245DCA27F036723748AC41FE08A27D623971A9BAEAE84E
6529EECED4F3C0ACFFE115AA353CCE0399546E70DA4C2A9C32058254A9BC7DBA
1CC5BBD0FF1835553A44934AD493ED7E5D8C39B650A6C575B7F1622EA5F6ED55
7924B87FBD7524B07F4471F039EF2214E8629DD5C336264FA549F87455E749F1
B305CEEDEF753ED9A66E65CFE1AA2AF14957F1DACC2E3F29BF0D2CFC9274D194
B6888B1CE378F4A6FF5803828EE591A654D1A4356F194A0D515BBD3558928894
2DA9751459EFAF55CBAE7184970DA49BABFD23537159B9A8832AC43D8ED906F8
2A75FDA117315A8552764E6DFD0FD7D8E9CC999E3CD9D06BFBF91130A42CF52A
8AB4DEE0658F8DC52C22BE674115A8C4ECABBA3A0C4E6145C3A634A634D1D8BA
3A18068A54781316F9B384B39E88483A114B4EB98222BBDF2F87D0ABDE805E07
613C0323646FA021C750F8EB6479333B8F699C012CBF72FA1C0358EEFF354616
7E7E8125CCE6E99A435E5821AE1F4FDF05B48A1AFBFB2CD8DB45151FCF0424AA
FDD5BD6C799395D435E7DDA98A031776050FF31704FE2F734129ED89CEBAC35F
BF25A0C49256F02644561CFEFA05AC895C84A1DE59C1B528E2B815C7A00F18A1
CFAE88B1D61EF727CBC3041F1D937443F658A71746B22006774E1E5ECCB2EEBA
DB9A0E6EC730B38D32DFD1676349700C1A5D4A922475955B2423852D6DB6688A
6DE9C5B5CCB3DAF5E3EABC51C3455C306F848772F97AA8218120681A46E94A52
8E25622F658927F441E46A80D9C53DBA71CC2C8E3108B9EEF73962E826AE8B95
BC111D4FEDA978A8CAB9B663728CC44D93BA7CD66308E5AA429DEFC28FD794E3
09E0956FAF23654012A8B552582DE1F8B63929C3DB4790203AE3E369B4BA912B
157FA46C7437F1710F1EF477CD7D8659137A4ED3CA14D5C426751D2A7EABD045
84103578FB40B359743A4F89F28994784E7E3C4FF7C8C21B2B6944B9363C1341
25FE3DFC447DE2E4341F58774208798ECDA3B6EF6C78AACAFB3DC3AED80C1582
4C803C09D1C221AA1193CA9CC1B0E1C7F2E8678107F9434A53FF75255045595A
DE295F6A1675008151938A216A4A7B9C9C058DB56B56F83E7285C5C1DA5B12D5
F96632BE37CE848EC690737D7BEFAE58D49545C14BFFC30120B99654AE110E86
3E894E33A4A5903E7639F8A0FE3D3A0A01A38227163DC5597A35844C93BDCDC6
E2949D39B26485E8BA089403CFE2D0EFAB8D7734FFD00A7C0B8453158BCFCB43
D4BEC92C114DA00BDB303EF2454F426B0BBF54D18532F566870FFDEA698D718C
E408870D004D8FB72622C3CFB566AAEB44D1549360BE5E5BA36519BA7BAE6BBC
B3C5D9AB42D8C338F771624E12F6C1D7F88A6259A6A50F6294DB01BEEAB3FE31
622FCB90AE86517199F06E7C1FB4A64FC81B3AB2495AB300C03718D53A01AFD8
036C692BFBE11D9F0D7B65BE75A0AD0EC747F1CEFB427DE0EBE87A528464CCAD
47A9DB905F94BD2FFBDC1854620DA726062C85162C90699F271D355EEB5872E5
8C887A423BA751C47B64FBA809378B769491B8D4725A1C62BFB4C863AE68E5A5
1576CDEFD3E5A379FEA3CC759E7646A5CB1E6927788201C1D567E35F506A26ED
9E9793C1C5B151D4354D04BE41667CD6956FEDD7094803841CB790A5188E0E79
D0B3D6E0749442636D2B239B332FE3B5D8B0C40FFD5940BF2D5A4FCD4AF425D6
BA9F9B496F33D4A377B602E984F504A34EC5EE85CBEEE4D457B3765C82A7160B
D632E82D65E3CDE68234E0FD5A4C6A51AA01543A6F3A660148F857B3A856A925
EA84EEF5C84B6759A40F6C3F49C6995513005283C179E03A5DB0EB49C3EE1384
B96A3F5C408AECC80A9933CA5DFF1C44830A0CB14CC11B05264BBA4E9BBD36C4
8A367133AA718C33F7D946DC07FA58B7C2B2D3379B0006B7006370457891F216
524CB0BBAADFBEDD2863823EDD8E16AB3B3A0AA3717B71331B524235836A0107
E47EC796C1850C5A2C14614FC603BB84092A9589AAFB4EBA198608E63208B818
0C3293E3252DF3BF668E80934A267DD927A51C9C3D152A7A9AE6DF0E270D8ED0
6F3F17D7B070CAB1C19BA97A56BF4D2BE9FADC0F5602B432907D8655B94A5B92
2114C1478AEC18D6DC7965A4C8BA7D0D415DFC796D72B3FBAEDA72C221338705
D7AB6FAD2779962829396DFEEFACB880090197CA027A86B6B123BF4A9A03AAEF
9FBCABBE683BEDB83436D0D4F99E80B7A6DDF3FF0768CC65BC00EDF4311E4334
2C50030A3D784C486CB097205FA3C30CE3F4D5F6B9540A411CB4BFEC074F1A3F
6FFD1AD8B1F6579CF83B7BFC0598477B42B6E2F9515A550A72C27231B8B9CBB2
F927B23E4879956314C6D16C11191881A89A27EFB70A937F811E217E55660164
D8C58EB2B46F9046F3E181DB0ED908F9AA2605F6418B8A16633021FAB9B582B5
8A4AB28CEE8592C21A21F27B4B3DBAA4B7208389E636EE5B32B1C3D7D1287861
AF01A9FD4B075182CA39CF6960C7BA42507650EEDC21FA70B81E41BFEE2AF494
EED5BF78D2716581C6EB97074E3F97911F9C390A114BB6687354407A97B2F5AB
957E4DAD968E1745529B1D235D889AE5D2351322560F988FF840B1E77A1538E4
93A5F7ED92BF2169B0FFE106484DB95C9C2B2CBF416E35F1B4FDD9094EC5BC99
CE3673E030C447FBEFA3EB5A3F6693415EDC137F9ABF5FC31E7CF14D08F0EBA1
4F6A94CB96ED4815498A1D1FAD18E86ACD4BDA4949A17ACB1637B8BC14CCB52E
1190CC1F98343A24884F377EB558425C9F0FC6913376FEAC744CA790C939AA57
B3E742110B926383C69C776C90D5FECD7AEA1F97966E525C496DE5737984A514
90700D38882F49F212CE0C0E3002ADD65E24A8EAD3D07672CC8B1104AD4F847E
0FB57CEBAF5E6F5B4D854D94B9A6BA72AB5AAA295AC27EBA569A5DCC0CACF117
C713AC31227276B0EFA04C5217ACA9CBE50269460F904EE1013217387C825C32
9984DA206200671FDFE9EB4E60A1D69CA5E6E3DDBC0EF8EDBABF2F7730921CD7
B2F09AE2ED08207C8001A43DC0046423163A47574203636306B98D2AB925EE1E
DB1308F9FCF870D754720BB2F2A3A9F0A12222BFEDC2E6EE543AB4D613B3C349
C08EAE7355D9BC71932113AE3599AD57CE532B091E5D9E25B0D32ED86090237A
2BFACF383F1848CFDE7BFE2F0BE2ADF32E0672CF596FCBE574C925CD7CA3B651
0D75DBE8364992EF4FCD62253F6A9A93A4354FC467EB068164A5153B35D5DF80
479237333A0D7699E34692E775ACCA7C676CFE6EEEC25B4DA72ED32C9E993894
60C586A22283399BC5DCEF71B1C0E331970A15860AE8900207DA84D24FB51722
51D696094220A734C958AAAE92DFB92E43273D1C11E4453E411C9CA3CA3AD602
19BA63EE411C5EB9E65EA06440B4D835619BD420874218ECB10A8C7F7430AB4F
A81F9E885BDF56745ABEBD1DC60D075A9C1214AECEC743
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43EDC299DB9C4B5CC1F04E09FE8BA03A83D734BD05CB9BB269174E1BBB037
709082441C1F212697D41BD33C74186087F5CA18CB6922F1BD276C56886F1891
6A6CF891C0081144839691F8EBDC6E207466958AC42BCDC986DF24B4B0EB76C5
23648FA031779FF077DA2286D704B03626E1A1BFD84EC67D8D260A192242ADDB
D2F999C64962DC3017FB223D0F654DA8ED8DF6EDE0546DE0BF02194C38E0F1E8
DB693387C6B275F64AA9006A45AC9BCDE9AE2A37E8E20ED876A2CB5B4E813406
778E1EC1CC15A12F080975901DE76CF0B88A67883DF455B180D64E6E71B3129F
C4A6D60BD4738C823CE1A3C79A85ACD7ADA86B4EFFB80785C82F1C5D9F6F86C0
40CBF9CA45D3B820E906A6DC4FD642BBF82DF94759DEC41A3975FC5BE1A3C5DC
941777D9E7D82E2C84E5475547447CCE42995F8CE345724A821B8AACC3DE453F
830C47A6BD9709FACE7CBA9B93D9747ECE03DB5E8B7C08A33CE582B22659DA1F
A2D259B5BDD978B6F391673FA5801283CF4D2D8B4A028B5C0F95D4EC193AEB48
7456808CC297447C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/UniqueID 5000794 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 49 /one put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD47EE10B9AECC871B76227228CA161EA7B61DABB252EF91E607AC8D3F85774
DF0B1507B60BF52E4E9BC0FD04400A548D553D4A6EDB247875E0A2E013685C51
D23EE8A56AF57025AD67D929CE8BE791BE91A4C4D9F00DB8B4F16252C04F7BC2
02236296A9052306639F4672E90E3B9DDE466EAC17E200523B2AECD6C05A0A83
66D4EBC86C0DF27B789D5597FE88BCDAD2925CFF60F5A8EA618FE867857D585A
CE25A158AED63B8FE391030C518693AEC75AC0AADD0C11B0065E2ABCF51132F3
82E3718B9A9FAAF727F2D8286177EE27BAD040C66D0D2D7C092B45D9330265B5
6B5C8E29F71C9EF548BFA4BAFAB242B26455E4B7FC1882D68E408D25E6F58EC3
03AE9B7A5F45D61E02D0AB82AFBE793D708ABEF45FEE865969895654C00A5FA2
093A297AE74BF625A96FD85F58FF994921C9F1276635C8CB65FECFEE37C77BD7
FBD692DBDF1079AD35F8A8198D63A3526ACB37FD5DF7BF68D4B567B5A4D13F70
8F1F57EEF889BBA921B1DB9FC676D7526CFBD3C7467A15189A95F6AD8E116FE8
10D977E5D8FA238991F720A9DD2BCD0BE17CCE683723F48943150CADFB96DBF2
901F1F223A11CBF3EE91684D94F0EB180D50D4E14F4F68F6DA0661DA772353F7
2BB65EC1E3EC20D4FA1B993AA3D3920DD035DA7F9FE15940F6572DF20BE4381D
A71DFD5D5F2FB8F32CDE93DBDE39E8375125420C0AFF805E00548B77D0B94429
73D0DF861A18157A112BEB8E64D3EA95FA2222BFF6659F986D7438127AC63450
0C7BA14E7D170DD2CD47E39743C6EAC75774A536E5CD03978B7F7D3B6BD0A1CB
BE850912ECA37879C174267DF04806E422A0BFB888E0B48973DBA394AA382129
FF89C0D9F65D1498009537B3E7707E5391679404815474C6FAFA4CC4AD75B822
4C30A7FA88FA8B82A3180F592DA031C1D8346BB907F05E865ED25C0F366271A7
C0333B1EDB050A261394207304F754AEA54F2AB1A25FDC6DF15C32485C115544
1AF609C721739E6C944581272F5696C926222AE68000011D035906BCFF50A1EB
489A0C0609E55867694F2E1E6C21FDAACE233EFED89A9663E795C7266E2CD120
C3D3B545B7CC6027B020024CB981690375F45755A9381DCDF437EB038A8A7906
DC0BA31685D5F8D65CA9050EF94051176EC025B2C775E16F8215ECA3B687FF55
6F1FD1AF22992D2D256344779BD6D3670E4A20CBBE83580EBA32569A83AB5B78
5EBE415BCEF0B1271D26984221B5BF26BD9161D43FA97CF3F42A867E1692C691
C2BFC1728529D6654E4B59
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/UniqueID 5087384 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D8211BA44AC3CE67694563D2
841B62F8110E87700E6D1522A79EDECDA6C59DC3004C4C3CB2DFA31AF1544E5A
4FFE7802F51C8402B2991BBC188AB976B4E85B124B81A226930F5F80E1D34658
2C2E711A080DBC1EC1D661782A37A121F9F469BE383F47BB8E249300A4E2A660
56BB18F8C35B4B830993FB73790CF101C3BB9BFDF16CE498196B69EB18BA4DD2
95682F6E109B03CAADF1C109B7FBAA515F68E3D13AF1E8067FE8AD1D722E59AC
028F18A90A93B0A8092E176ACF53A13E05692A45910501C4F0C4060C40434A26
B014245EFB211DD41AAD932109F364CDE249E47B2500A344D3B45DC41704F107
F9FD70DBCFD768F531C969C8F2C743E993A9064AC89AF45FA0EE8466189EF286
59BA3CB358D134D3789A40B5359E84029E48F594BA5C5DF179176109A85170E0
4A2753C3818A40D52CE36F3AB8B526FA6ACCA04314585D7D7666D5D9CB098D3B
C1AC7731D07F5656242DB7570CE924992D79A7B136E0421A54C0F70EAAF9F8C3
7D31D75D7470F2EA766CD79257C93693A20DD4995A622BAF5D34CB40E506EE51
B51D3E488B63B72565F5E25CF7C3D13151949B45AA2FFB45D0989B9646F3570A
D3C0D34F47A2ABFA14FC9DA590AEDEED43FA703AD0352F6CB850BAEA04E96DC8
1F1A4F73D58340523956786138289907F3E74A3D5CDACB16CBA5DE911DE4827D
6FA2706D5C7E941B44818CCDC20F168CF051F96EABD7CB6E9E9F45467AEE1CB4
11EC4347A4974E58F52EE28822794A75B56D1D32FA41E6B8F6CA8F757FD0E852
6B03B483AAEC9CD18D4DBAAEBB9136FE856E429AB85306F32A52EFB1638D7280
FBF5D27FEE027B41385288520744A3A2F868CA1D7CFBC2477E238E842A3FF168
A630CE6CDDDF7435A3444D643B1ACDD85E5DEA9DC494E6AF69D11385ADF9F6C1
63B63EEB58D90F94B50BEAFBA85C37B55EC8EE934CDCE26C5021E18332FE8B65
852D03701801B82B28CD42C72BAEECC06E26FAA84AD018A251795A5D3FE85DCC
4D47EAB980A16BFA081B9BC410E0869E592DCAAC15C7D30AF316931B405A9756
8EA6D72D5EBFA03D81BFBB926335D5B288BC3F0A9DAC26C8EE470EA97CCEB1FD
F830D556092C174FDFDC67BE9B85C2751C5E657F95E073F58E30351222491A51
9473F7EED94E5506645A933F0E62990A57FCF1A5239D1E97CAFE5547CC108E10
7AC4EE27A6764844CC3E573A2712E7FCE8CACBBBA7D14BFBD5F0D258722EF6E8
B928848F6CB02C9C7CA7B71ED295A2B074E1C4AE3F7E57DDD9CADD7A0AB62064
C11C4A9E1942681730E2834B4ACEF9AFF5794B2DC38FFB12FF21163C67BF1CD3
3865A7C080F16D889664C766F2F2FE6FA242C51CD8EE025E7D6356DCD2C40F08
5F210AE09C2FAF19040357BEDB7286808CB36940B28DA94685C4EE943FABDD3A
966F465C10C7AB59FC773FD1786ABDF7C2B3DF687170FE928181A9C782F7463C
D61FFDE1ED679D13062473A2F514FFC225F065382D4C85F1BF314A0579281B23
6A36C7354E25E888A7A4A671DFEF4A6E7AD910A4D73641CE23B995189CFF331A
DED685E9E7122726EC6702539B2A4CF98DEC286120B0FD4DBE3EF92C22FF1565
D6E37A0EBE0EC03F1EB5934186E58DAC51128DA8E3CDC99DB208480DA7F59A32
1648A30BA4A459EA8204636858B83255D8DE6C2E84A9CB88F9E65FD11FD3F3B1
045F392EFCCCD651B6B2B8ACDA25
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/UniqueID 5000792 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
59EC46D1798442BC3677E06DC5A2F70FA14529BE16F9E7F1473584BAE8060DAE
D28CDE641A2CFA0BCC95E3FEA848F2BA7F649AF87AA556D2ED84E4723B3BAB88
4BB606362C818C8785ED46B2205D9B4A293247679E0464F79D51584476FD528B
2FC34AB914C268C8874E34F01A8F3E17FF98DDB1102F19D4C26C51B7F48C3820
23595C40350B9DFC1DEC1CA5711D6BD3E75F966CAA3936E5654367EBD86676AF
1732A86738FC4C2E7A3A4438D1D16BC51653FAA26C89AE39711B96F7131CD693
1D8AF54191792FEEA3CD0419C5E08EC814344AFC21976BD13CF41A65EEC545AA
C80E0D2727283C290A2EB5B0D232DBCA6F9623A4316E987DED5314A244DDF170
BFC8DB4B8D4F2B7C46FFFCF9F4A83301FCF15591B27312E42836DD5611962F1A
E06A483B4CC63C8BAE4668D738F45701D214AEAB7BBA09F04600BB8D84E76B0A
7F15F0839547F275C4B553216CF17365C14065E67D42E05A9076D394AEB82CAF
D1964CC9A1C90873F25E9FF12D03A1BA252D76A8C6DF38E5967387574159E4B7
BE116A74A0D72DADFBADBA62C98AEF89A55247F983E4878340F9088751631819
0A5099FD33DE3F2C7E7C8EF8C2F37C2C4863D7AD42935AEF0508255780A0C8AF
A02091E449A99CE5933FCE6A38F53A532782D5D529BEEA2B2A2ACE033A650DDE
FF429AAFB3531BFBF1FFB2FFBCC84F9C1013F4EB07D9330D9C73217F84E492EC
FF712E0104F2BE6FB515312A345F4433A29A179F9EEDF437A5893757128078A7
8AD89E9125E71D9F1A83501C58DBDB29E2DA7535C783EB6B1C90F35147161B63
AD140A385EEC6C8E2ABB5A78352B8EA08515270BDFB97B1A2AC307D6AA3575EC
AE482A7FB95CFF78616D7C30D957859EAB507A8969D24E2DCB7480521892AE5C
E2E5B978E7E01A7F3A0A17C93A4F68B9AF3FEB0A588D61040F915F49F59FC85E
67561B3C730474763AA7E614A9936E5F5AAE038ED403EFFB5EE72412611F2ED3
942272DB899C4B1871660699A790D0F82AA42E2CF7F655D03A7D7EA6E865E8CC
86E5586A22AD9EEE62FADC947BF5FE1D50FADA5DB39EEEAC32A38D944A52998F
B03AEBBB21A08C012F63170D0F483EC42A81D5658DEF96A1F00D38D6F737C1D3
B52D9F6AF95F15FEA6E8689F15979757FE343571AD247C169CF31CB4E9487F17
94FF674B0428C064E4083D12856A1AA45C4CD8EC91F3534FB5DA18EF67FA52ED
EAA9708E8E3DBE18D3E8E4E2FA80978312488218B87CB6C129887C3A3DCD0D97
D0721200DF5698E1456E755227B8C32DD31A7D157A6A1AB667D9E9597C62A45B
076A6E68C977155D031F1285CC540E5FEBFB6574190BCCBE56BFC295435F28F7
0430EB03609E30C44755562D3DE65C9FA66BCB4FA0ADDA677252AE189841E61F
5BD5F94FD33C90519D9A09C95F2A87413F842784111F687DAF450C7ED14C13CE
BF204C7B615F80FAC65FB5676042648C9402BC9EF75A6E4CDB23877A16E6094D
DFE12D8DF97ED4DF02AE17C7EFBF6BD2BF54
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/UniqueID 5020902 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748076
52C3A3CCE44DFD38C1A870AF15D782F5C403C5A9A475217E3BE7967360F89551
3FBF9B83D58D8413A45EB18DF19455770726B7082E4C33F9449E6DD6F89FF265
2453807A286AFE8DA4988BEDFED0C357A977805FA702F68652A4BAE9F609047D
B5ABF832032CA1F96E550903DF9B8190F9FFFA8AD1D68385057BF5B7592F73D7
024231193023D02D89731376114C1C0300300B9EF15A312AFFAE9B89C5965996
5C1144C7F8E92600D0BAA927ABC183A538251EE2CF46FEC77739437A52505EB6
45502B99547E91C25D86F0C590D7FB9E51E09C85C5BCDE30D15CD9A0DC335FC4
B589DB92B21ABD5F4A1828236BBC63F11D5FCA179364F00E062607DD1F297FC2
28C017686FBD943420D623D00F813E49030BF7045585BDFF8D76A281A8B20F9F
F14EC047E3F10D5555163CBC58F92F507DDA1BF0CD988B644EE25C280BD44F95
4F5C31143E9AD2E08736F295B3680A7058A0D11FC76133074C5380868FCC9F5A
BFBC7D56BCC465AE970B01D9D49520ACC059235FC33C523F93DA2FE279E52564
3F78A4D00FDA5254696AB05FFA441413D0256F685EB04CC71112A44DD6922E03
8504616A96DF357C3D534E1469DF1375189DB4141ADD96B52165CB0C458E171E
D05637E786A2DA5331B1981583124324CC491AA909ADDCD2D038C3174BB488A5
0E94426AEF2D5B015C5196CE77FA94318AC24FD3831B61D9AF69A47DF33A789F
F79255ECF2AF644ED9C562822E409FD1491EACC6F092296AFF00D80D3B91B5CA
B5DEAEFDD97B1A6E2A8BE4E37BD073447E1340E3A9074F40DEAB9D4C32EB54C5
0F3E6E2CA99697361DEDE4946011AAF9B441EF90E8E6008C060098517AB6DA6B
E2192602CC1A40EA57044322C232BF5182DE75CCFDB7FF77DD43C0A12574540A
4067243532A99C314DD32EC802120EB2B030BDDEF0D2E9CDD2E0339E253D1E3A
1DD19EDD12C82679BD8273610FD74440C3D592E0921581E238184D615D8B475C
CC13C592776A74444E726E57CEB23604BD9F35A475A7A7370DCCB3B342FE06C5
FAC7AC837B903B3421842358A1336E27AF25ED16FBEBFBDB0F04B473097AB96F
0ADA2A34CA9CEBAB591E46C41BE250C673DCC74CF16F7F4B722DD7B3979DA6F4
9C7240F00F51158FFEDDF59EBCE53BB44E2FC7BE9027538CB68E750BD4E5CD05
A8B888332A679835679A926088F4B8A7D71C31D54DF472E88D61443AA57F9065
CD448949CB299E6D6FF277C3A92896E608FC0F9E298B0C4027D9BEF19012D7C2
0FE41E3931ECC7BC9B7F4AC251E82C6F8DAA725C8148E3D8ED6F141E0C33C014
A03E0EC54DFBB8B270625BD970C33CD6A16AECFA67902D0150EC9FDD4B9F6474
504514D870F8406866194993F41F6DE8EBA2C8AB3AFFA87C27C727C39DB31059
19AF85CD099E9D5FB2A7033704D7446EDAAA509C4ED0DA47887688A8A314499D
796BBC421DF4AFE5BDA9F8129DE41D59B71755617BB2CB01BEC1CB3292E6AC20
CAF53A3A38410B1866D7DD6903806ED0FEB4A0BDE93F3B60882D3C6863DF4ACB
9C7F7E44C8C9709112930FCE53B1D6821B91A403352C64E8AF4DF530EC86F53B
E69F3BBA3D0D56BE2A9AE7FB11B087F72931994F83CE628715280B8B231F2C67
65C0829316E7B9879BDEAB92ACAE652D11CE7CAD9C99FD237E818F856FFD8736
F4219854F51D3B81A2968A2633D19D19CB2F97317D33588CC643C22513C6F69F
DE343CE33E17013D481C6795BEDABC7C47532B4B80F77BF6EE43CFD08C9006F9
7A0FF2D6894AE97057B7FCE5DA36C70DEF611C3A0087B2FC75CAD18883113AAA
DF162B0233520698EA910CD43E2720F2849E4C3C7B62E653903867AB4645DF77
83CDAF3688E57564736CA6775316D92B81447680CC8662CE26D5FDC9FCE8810C
B6E3714D087B23E2E38DB275503BF529F664199B13F41E5791375A814FC6F9C4
5C402ADE22460D341AFE7BA75C1A7282087BEC733FD588AC0D1872A1C2790C32
1DB32966953CA0D3CF3393197DF646D61776298C81863700D2E7857A9AEA7776
151BD2FACCE494B0F7EC736089E25214495E18A3508C5C3CCBE61A1C1129CC2D
B906B0C7A0A15DDC83A7B654363333D7F83CB1602AEB755067644E37395DC7F1
FCEB958BA6644D240E9DDC57331E994037569CDBF75DBB75A77F710826EDD41D
E13E8D898BD56266491314E957E594C84D53C1C8D406DF5655862B71D4BFCD52
3241A17208AE955D7114C23B1331CD0DE9EDA2A802001163887769EADAA4AC5C
3C854BFCB67F819731818BE6EF9D6805AF08192264B88E73F3741A8359FC8F4A
5DD600F6984F0761DEC8572AB5FEBA12C664A1C389B918814D8734456D925850
756E35B5FABF7B25024210BC26D61E5588A205400D9856CDF23365AB1E8826DF
D15CA05B408D0E0BF3D97572E30DBB3C3DF6E5A149FECB16E5080991761DF711
1483C731F7B85C51C1E73674DEDFC39708F797CB7B88C02D2286E695E5A96BB7
337598E5CD926881CDB05D31404DD0FA1505E01CA22CDA0F4B661D51296939C4
912492CB6B0AD995939B464B3E197339A971FB84DA2C2234BC1DFDC2A5F82A77
8185F24845A5C9697DF0DF26A6DE9F4C6268DB7B9B28C136C58D9F2181AE62EE
D2F8CE3CAF4CE6224366EA65ECAE690134F33E2E83F0F0DE0AE9E4DAB1917CE7
FF197C0A5056CC6A7F06C56B25F3AFA8361A65EF4919CAFC1C7E238D6569C61B
77EF835B9B6D8E6A6F70D1D47087B8A22568885DC506C02E1C8663B5AFE0DBEA
924C47E94D137A854263AB7EEC2F9234058B7B9D4264CC5BC8013C287C6D0B4D
4EB922B656E8FEAB69AEC572043BD9DA19114869FE88FFAA4D425D5AF09E18FA
17AF694665310AB9328360254B957A71EE178B9C573FDCB461A4E43DE1B0CBE5
5F58FD60C92F738C3A100D282DD6C96238BE1B2DF3FEEA73F8FAFDCAE05297AE
027FC7E19760764A37EF6C43CAA7A99C3C34577484ACDB59D110DA1F6A4FC9B9
819EE14291C06CDB7EF90B0971385D99EEE8A64B54A574D303E020DF995483F8
484329B53837431E7BBD56219341869902E0F9BCA189E4DEEA7506FF3D139A6C
C5E9376428AD90E8B495A41D8B7FCF4F6A4ED3D9F7C2E0ED6FEE107811D62EB5
939B2CFEE897200115397C2A787646E19D1CACDD100EE21D3195279F4C4CDD8A
802F2B8365330242581DDA0D8EDDB743C89273E64BFECA271CD73F3B370B2760
54AE0E5E1F4293E16BEAD8D395F1C757EEA88D731B4976AF6DE96D2520243921
9B327531529AC12F784885C73135872D46A0F695A2760887D9AA333AE7ABC0AC
C806EB1812628264694D81AFAEDDF9B968C463F59A8905113ECDC289E2700690
FA59EDF442F8D260FB0ABDF13D44E5A15432CF1B8847ED918CCFEA3905BC3C33
FE546FA7D646581801CDD2BD88D380876F8547102237CCDD5501B58FBA6F305E
D0F31A00EFA6DD6175E30584E16DA7209FDE05CD09227391FB4DE18893100898
3B10284F5EBB1F6E0BCD9006666A9683BB44D75E6A15696C169F5FCD2E86D1A9
D14AAC44C15A45D952A7DE2DDB58D47887035176F5908F9A11C0656D8C61F994
77F93180FE56E7D51EB22A0E2E63D9AAC8EC1313D77AD857862430DEBDBB8C3A
FAA1E8431131E305A9E34464BEFB9D5937E792CAF037FD8F89ADD3E624C2E992
89BE1C438D9CCC76225F7522A2A3B699217F995CE29B85351EBA5CF9A82D5136
93DAD3BA517562EED88FF5887621C69B7850D963C5AB08E206F8D6BE2265198C
08D7F1BD45C119DC3169EB599CD1AF7DBE4248EED8F2C344BC6D20CB8021E55B
3B1C0250083D1147E6CAF557CA744522E6C69930D3790EB17A7D57087080F7FA
DD3C0BC90FB874E466DD1EE3C9A785B135073E4E905DE7591957E2E4A927C45C
98187219AD75601DCA28F2BFA0DDC426EEB3E12AC22BFF191E173CD710FC37D0
E374F2D3F5B99F258D5D2C4A1BC277E2C879A9C42BE990CEAA34EE61059A6DED
B8BB8073F52CB326BD365DEDFAC8A6D1E1C55681CE042FC7F88F96BC5A1873EE
B8445706716A07EE1C0F3F722B466AE8DFCCEAAB53C3B0B1CF230222853108BB
81F63E3D92526A734731BE9AE47BAF543D861B0FF8CF8EA8A18668A75A8AF922
7CA12DBE2E2A4782A208CC584D8CB933033C3D7AC0EAF69D481C62BDD01E76E2
E4AE8C8EF9AFDDEFDFD8F58FA56667DB47F63FB368972F908AF1788ECD690A62
5B16E5A7E36CAB4A5ED3BA9E5C2D4283D895E3D1BECA0D433DDFEE3269246753
1AC672129BD478CC418B0DDEB50E20DBA0E42E9653BAC52AA7E80A452F459913
795F21204956D5D191259F573715215DB7C490C9EB769D8CE949A6C7A136B0D8
DCCFAA5C4192E0307FF0F26FF7907AD9007472F4D1E87927FE55C89C16442993
CE23FE881F60B0E543D46070B909AD28F848D6179F722A0BD41FE14550EC842C
CC13908B8CCDF6DCF4218F2EF45FA0B1CF7C8FDFB5E134412A135B7C1EA29B17
97D721BD52DCE0C4BC79EAC7FF816E4EBE226F8D5FCCF5557C4C228F06C96067
64F0D11AB45DC22EF8E361793341FB239A71F1662E11981CF471D236FD8B8347
650D19AD130D7C402B814A90891667C43ECCB65BFD694DDB1455ED30A7F64F54
521C2CB37322F32249AFDF50A74CCFA788398C3929BEE57524564988877B9C53
2DDDD21A8C8D0B02BDC684B712DF066653D60B9D87A2FC4FC013A65C44FA4CF8
C7379609DAC603A84799344BCB916D9BB4D5E4D2067EAFC81350C88A7B357DD4
AC2797800987DA5D2925C9AE1DE7BB3621C3BDE3E5109F016ACE35A3E53E139A
0FB843408042492C95A24F7BEFF47EB68725837FFA804CCA27A06D5E3DB3EFED
3F52FC14A0D43A3F469ABE6E5E9107BBAA3EBC4BDF889C6C87BDE0EF707E29C1
E89AF07E6630241A41E8ECD5FE63077A88F79552DB81A6B2879113C06ED51DA0
4ABD9F172574AB23B0B872B92AFB1F15E1E3ECDBAF89AF0C0D5D6A14210E2C89
E148D22303F0547C12E9D4370AE23E7487126F01B1902F47EBA14C2FC45B4DA3
3F506E7E2940B3C0686B4B6ABD620C3F3D5A286166344D503F2BC13485D5B726
E853A0CDC7DF59639E4B00B88003B8490C1E1CB736493DBF32DD4289DE138389
20D7881673C1AE1FABAD2C4268112AABF69A5ED69C52BB3909894C210C7EB8BF
A720223EDCA9FB8ABB39ACD1D5EBE566CEB25893B4D1309DD3E47C800D23411A
90A175594C2FF49D07B55AECCBE7218FA8D448AB3E9B1908F7FD472919140F6A
CFE4730D06752FB156EFF9733F9B2472E94326E0C43EBEE3D673F99EA186E2DD
CD2923DAA691746A33C500259F4C8707F4A84C231AEED8081E44B185931349F2
AB93E9C2929AAF7BEA8B661954397F0663469D74F91E92313D427260AFCD4B63
897E4B7E01C69E61FCB17ABD55248909175D76428E7345E43F11A22DA9845C12
F4B6FCD4C33382C8B8CA643C56EC1CDF350B8200BCE466C271BD5D1CC32A2FEE
CCFA6EC114C526A8E6C13560EC0EABD1580D03EB513F1BE72DCE5C787A72A1D0
E8C45D8484448864BF6BBF4AEEFA1B7FB1F2DFD721F0CBE942289DC88CFBFA05
DFFB140529F58257E2FE5545DADA46374EA6F91F29D8BF1995ECFE4823D45CDC
09D3AB5A0D154B18F7734AD99B1C29CA876D32D77118AE4D4C34A96A95DB4B44
48735C0D857B543B1FDD44908E77C5EE45370AF7EA53DFCB393A7E4903392B52
BE7D785426275C69AF2799F0467AC4FC28EA199C4D4E7891F2163AC49A00301C
72F2C12DA908F461794CFA1B6DEADED9C7D447FB4C6841B6225B64C7B0B52E1D
0BE3A8B0908AD9A37B42B837A434F0E8455F11F1FE1B7D7C4E0E91F3D9C7530F
E30A38B7B4FE5F6D4E027CF5A67FCD9245B22F4A78518823117697022EE678A3
9F8343DE206AB8EED510E42468B7E61F37A866E89AAB40670767CBDE22B8D55C
D1845057255A84E30F9539BEC0358EC3FA2F49706F27B629EC65992322B7A20A
11E10C09CF288F7D77BB105ABE72725EECFEDB661BDD4AD6479C710C1141E2A3
24C9B40F87EA869A6571C159C66411D91E574CDD1107FC4154A002EEE588B4CB
AB1DD05B0E46C38DFE5274F2A9BE06F0EE31E7A15C020FF80A0CD0C37F07814D
280097618408378A0AE817010BAE7FB56FCD139EC45C90B49F5C9366CC4A3F8D
5DB474B79CF6BF1A31D3CC72C434E2F173AF38AC2D1FC5688E22840B5033C081
04F1A690DA208B18844C876BE274536B38FA9384CEF57A86BA704853C441A9E9
26F242D57DAFC40C01C4CFE7C4A84FD2024336CEF98F0B36BD3139350B3E50CF
4FB089678CBB72C8A9F4A044CE75ED6A69E422FE0EB9BB6C24BFB2BC088F7CFC
D8B6F50E67D7B07145175389D367F9B3F7DA854BF1BEA07A74C745416F5EADC8
B1C89CA5DBA62D441602686C3340451B38FE2E124D9AC9505628AFF84B03A469
26AA139206D9BFDEF9D90DB324C1F69C092CAFD410494FD4E0568D031D0E460E
981CD625CF797B85E4BE14BAEDB0CCC724C24635751E51E2F78EB85FC25A9691
DA7B68CE3EFEA24AF71E3BC68BD42BF10C8B6EEC3A31A8DAD9CCCD2348573532
E961667095CFE5F87E38ACB04BCBACB678C70AD10FA6CC5310A235894C95EC30
E9D3DC766066DC8B20FC5C999DE98DCC10729AA23AC18B6F0FEA268DD26C33EC
EBC0D4B95585A9B29FA3DD23E836A20120436F432C582E66285E5AA57FC32E06
3AF72D753334EF1C7E51277A45DE8081839ED8D830BCC332035EBEA1FDFF7B84
20511D8FEDF84D4D87A68F4093E9220288AF1FDA443411A73DD039C293FB440D
35B795E9D78365D7BF76A26F8EA58270B3E87F327597720A3C6758D18EA429D5
168D9A9A727628C223349DB36552AC02EC96E2ECC2348567D1C8A320ACC5FECD
2EF3C58D7D8A3132B76C321ADE373DC45F418E7359BCA0C5AF29FD2D3497B4E1
ED5E75E86DEEE6548FF1CAF1E2E6ADECB7B2A0EFFF54CC8B4D7F2FD5F2BDF465
9BAA359C69AD7316C2AF22AB56554A20BE65AF5A1712B706CCB35E2F7ABE760E
7D89A4C69D9231BD1ED2C32C702EB77584D55F2016AFE3787F3F74F0CDA53DFD
EB33C71B564FB6C9663B24153DFB16044D87DD08E23B7F03EF3639E46F4F76D5
75F2AF4870F47C23F3D760CDDB6AE5AB6395E00A40EF0A9A2A6CE4FB25F6DB48
276DB57E8757A02AE6A98EFAC7FEE7E014DAE4F7E53684367ECFA7659435C7E2
FB4DAE983173A9AB10C2C8865DFA38E4A43C654D1AEB357E47CBCBC9D0F7E4EE
CD1FB26B3EF14F87986C30005B979AC6A0C00719449427A0B4F969C6431DFE7E
BC08BBFE9EEE2C5E7B46993F7D545CA351CD5A89F7131661E89D2740CF68568D
DA3AC4A99B67879A03620C8ED138439324FC7BCAA6BD7EFA27905C7D7080806C
5AD24EBF321E5E281997720A0DE29D840C833D21547AC8352C4FBA0B35592EBA
FD8626EB2A72059AEDB0ECDDBBACA39E16A6860B58F6D0F0FB8277F70B05CDFE
712C1CD9C638C2884BD7FFB8398405C34216134549616BFA49A8B30B86147ACF
FAA0205EE72910B1060CA5560F310ECD0333A33883B79B6B51632E729F593BB2
5204A35DFBC1802B1203785AA3D76851CB5235D53D87B9A82162885F1A9059D6
E6628E7FB02C36A4BDB3A6DB17245F827B788A35E5FC9E5429DD249207E4C214
3ECA1D5D2B752FF722D335385CA95BB724CD3C923080EB12B176AE623DEFA769
6546FD644C3BD2E81AE7E18400FF5858B5A83F416BB7AC9117D06ACCC4CD295D
49A971DAFE6DF662F228ADFF5EAF5443BE993A64D852BC53CBC8DA1FB4FBA067
D10EBD4AF41DE919DFA83ECA611C19AAA3E58CC61C1A1AD8D0334CC8249E861A
AD8B23A6E0D8A08471A9D3F4D36495B154898FE3E44F8D776A261194B6F749EE
683EEE982C8D8A5EEF8CCC14E9E7526E6E8796FEFD5AD906DD4A9B5D023EA373
7099EE31DC6D5B598F652854096DEFCE8FD28C6F8466FB0763E2CD6995175A9A
1C15120D3EDDB5AD2322E855462234C602D177B1266ED1F6AE73BCD3767C4000
733688C5A0CDF0F2FFC32D402F3E1C68ED6913602B59CF0F013CF77C585D4F71
669F7D9AC809D1E11F89377A41956EE44B4A10199A00B9615B205B42C40E4E3B
B6108CCB3AB4F5907217606D547682104A8BD1AB042992F479F7104DBDB33BD9
FE1EED006E2854925FC925B518788185EE09A81A8D9C55BF4AE2B2E90B9802E6
DE445776A35659809D3DBD26AA6A025B9E54DFA4A5D7CA856F77838885312287
F78395CF31A30B84F0EC9F121D0F064327209B4004F84F14C073B81488991B3B
D7F78ABC135231101BC2D2C5D8A7351F1367810B2A7FDB9B6462D8C73E56D8A1
46B4FFE1EE77FAD02651A95CB2E2139BAABA4FAB56F54463B21F744C6A3EEC36
F7203237C59D9ECD06C33EAA9385C10AD2072B780D859E301628F3C42F4039C7
058A26ED05753D58CBFE0309E6C2EF997E48E149FDA3B3632F5CB6E212A6793D
387349732AF1D1FFB0165F825E05E009FBB04C2CC3AFAA90D11720CF4A55175B
33F7464FBEC3EDE3A666FE07765E0D801EAB437352D0D343DE425021C446A77F
ED508AFA7C20447C4527A4142B57399014B96DBA039EAA03A1D6CF834E453FBF
06B8110B83C100F1B057FE9B4C24DB39B5EEC107D76EFCB50C2ED24013E50D96
DEEF85C650293CC185D55816988BC76103F5F3235C119ADE3D1BB28B34E8A0B0
547ED01285A7FBFDD55FDBDA7A61CF94ABEAD1D71195CE3E317F5FFE9140FE33
94A2DEABE48847BCBD7576A1BCC36A10FDB8BD594D9E0394C499CB89124E80F8
7903751DF76D81FA9A69AB871C531E41AAD3357022C17B5141B62948FBA2E515
F735E23B48EC2872542BF800977B496996B94A33DA1DAC8FA16995B0D2E1E6C7
9D1518FA3D3E579FC321EEFA134285A89178C865FEEF85A40943A7D8C56CC4C2
844BC0412028A7005377C2FA17C6ADE6CFAE1A43926883D5650CBA9971E5BA61
445C089BA7BE5B0CF11444A81A5FE32645685205A8B9DBB042B081FC83BC9FA2
A535B5C01AF7BAF878BBAFA404B26B712D894494D8A144839CDDE61BA88F380D
466F5FD21B25037BC31080CC9417778969C43BEBC3DAC7FD866107DBDAF15231
ADEC3EB71B1682B0829EE56B7EF1B6CBD413BDD898318B57E70F8B496502ACFB
A68F52F4CC7588DE3E3DEEBC72D73DE9A7E4F8DEE74AEC15E8E86989101746C7
5C9BFF848B3D1A4E5F987D725B7D075ADE03D1E3B6D056B45E2257F7757665CB
D7655EC1E6A21B325077794C1E4EDB97922C2D099C2FC3B9AA4838F0EE19E812
31F7C38F6C81CAE17A77FD9CC5FF2D4F193145253264AFEFB67536FC436A263A
756664FE1F1FA5FD06D4801A078C5BDFDFA7C63FAEA7CEEB67E72FD32365E58E
2BC079EE2CF0A1D07963F7C7B19899AD8350F0BA5BF4AAF6ED5650F6CD03DA33
D13B6FD7E9B933F2F6ED0EF8BAFF126B31AB649F047CFDC5A23E02067818A08A
B26884B3F51A53B00E8DB18C74F78394A5C3EDB82B4DF8D0A6E87F600AA68A33
13254A09DECE8269EA07DBDF19490E836C491CC1F2D70A2FD173EDEC19277C92
E0A6895E365EF6C24DA9726787BFCF5D14071CE06637B380F069C35C073854FF
00369C29B86BC1E2483242CAD86F8FA70C9FE396D0E68368E0EE92BF8E7B2AD3
42C7C220072E2FCE4FCEB1E71473BC1BA7C0F0726E2D4B3B304AD76DA183CE77
2FCDF04FEF5D3BC8DBD77A038DB10710632DBC568CF7CAFC5251C0AF30825A23
4D19FD9C0FD8B7B0ACBB0DC9913BFBE00179AA80CE47ECFB82DED5251FF1A5ED
9DE1BC63D201A45C9D858C44560B12BF72F79F4D0A2B882CD9BF207943B482E0
01261BC75B97C039F0F106E082CB87CFE6B10D1AFA83F0B553E83CC51AB44BA3
22F39E8418BCF944126E587098A26D0AF76C6A88789A0E5E90DF5FDD243A9E49
7572622F5A9A8EA0892594F4E02292057B93FF72043B12D8C4120DF350DAB88A
CB8EC452382901260ED539FAEDD34A9D7F5280B6C33B841F4F14C27826BD5999
FE41F8722F9112B64A550C7213C4DBAB0E92E0585FA59FD65E963149277DCD63
E911F61C10FFA20DE506B664D798E6C9D9629E247EE035B22A1A08607A0EBBA5
CA1CC1D7444DD66DF0A6236115F63A02079FFC207027270BA1F4437162857CE9
52B73219A4D20B686706E15ED7B981CA3A843DC9ABBC60760CB6409B40382342
20E549F3D58DED8B4AB3167316C6B1D663BE6ADB034DC05F2A7CAD67C9AC67DE
C6037BE6E6A59F168E9572B56C268F4EE0FDEECA6DA50EAA9E7F4B70C4D2B1EE
D676E158DC4D9F94D13A6F314EC654DB98B5CDA3FBFDA7F7B66DD480FCB943D4
EE9D73A8AD5D79B7E6FFBEAE14E545FAE43F2EAEBFB8C3B511B387866A408D51
786F8BD5BB420B024C3FB62DAFF17EB6F552441740291E4710E39B0606ADB31A
52657BE4BAC2D14BC80B3A3D4056E37D3037151567DC19F14C58B9246345526E
9376792B545C66314CC8612E2A230EF09416937AB6D2E62D8B4E6D762D5435F0
EAB0342CA2611A6429CFE8E7075AFC5766BCC07B2E1C09FF07E8977F0F25B422
B4BE57E2C7C284BAD5BCEE2438C128FE6CDA2828B09C602C4E5AC5AC93115785
0E22190807610235A11417E093242224D18237322B3E4E998A96F601F72E4229
7CBCD800EE69233F63E8DB26A10935AA937851F7048EF68F5F2FE3578E9857DA
A1B14C4B4BE891F923AC9BABAB8BD5910D40408D0D60DD7F8E5A90329E183648
A8102482393BC313EED24C2E3B9ED2081A9B4F64282B3DB0113D45FBB40DB853
0EA1DDF73D0DD4B2ABABEF97A57A18314DD6C6F35ACA79C14329047369803767
5A6C0B92FE06E122995BA2B456CC03C4772FFFFCF836251DD2182B7D0CEA08D3
812EA12A99724D0B86
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/UniqueID 5096648 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749E08
D67D1208C693A6640D1BD6B9285AC0D3110CBF8F7747AD12585141C3248D0BB5
BDE892F91A4B3291F21F30294693518E4629A3ADD7C8640E424FF615602C603E
1E14DCB3B17D34C090BEAD2A523E260A599522329B698729A635CFB15BE7E79E
6A34DAC7C3ED57340821A4E7A0C7F88F64BAA69BB80DFA8B659F4756878E3044
E1DB7EE4FE60074AF97818B3D36CF51110191B4E10655F52CC5D11F56517CFF9
04BA2676F4147DC8192C98C555B001D54301853030B2CF0C068ABE831158B1A3
F30593ABD51F5996CE493E0622323FE93B292844521051C1D3799C07DC879EE7
9D047DE1C7127E2DC6F94E30C34FF87FA03DB3A3D597697C133CFC5A9448E067
51777DCFEC80352A92D9DEC0A2F40580A0242C063CD1086D38FF5C6FA1BDB0A5
3EDB5499AA2322CC73A38FC826DC202679AF4A7B571509B715CB8BD1D0C5D1E5
9F5B2D6DF5E9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 17 /equivalence put
dup 33 /arrowright put
dup 36 /arrowboth put
dup 58 /logicalnot put
dup 94 /logicaland put
dup 95 /logicalor put
dup 96 /turnstileleft put
dup 106 /bar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
A5287CC3ECE49060639A27A413F7938F178B830E61C8E9815DCF7FD17B9EFFDF
4910FB9750AE63D3DA287CD54C345AE3422E9EBDB9A7D75D89D704F095BFAA79
4784EFCEDC1BEC4CC7E1DBD35F6497D0E7D42D9E93FEB3814CE5DFBCE66E203B
29204C3FE3F82E8A01DE925A6C023A9A7C255C2E1B695763E0D38358F7FB5144
92D393943EC5E426DFD7CBE2E38C92C9921400A6FB105F03D8F9F96086DBFEB9
AEEC379C249C41067B72679ED6BD87CEB075D513A235B357056EB0106D8AA65E
79047ECE96EB36F6CA1774EBBB1F6B4DD2D41093D3199861C0539620E14DF409
F116DE68EAFADDD1349C3A17C8AC92C1268847BA3A2CFFC702AB381EF9E3FCBC
65667BC7ED4F5BDD28220B1F88296AEC54F9B7EA0478A9776B80282914FB3F99
944736A99444F643BF5FCB5AB5119861099D8DE81489AC3D1D8B2814E404746B
5144A20E3FB2EE237E2B7474DCB501AAFE06CBC8EA4D728C77BFD063DAF82A23
01FF6D182C0B3516903E80F4317D95C43910F6E81F605FEFD78210F01586B5CA
18C1BC82F2CF6647B778042DF8B0E00FAF3FCE240B993222BEEAD32C99599786
E6B92115855B1C29EE0978F7BBC2FD750A777AB271E8A6E945789AB7262E43BC
A1C1753BDD7AAB80468982099BD1F01B5D40E37626CC2FD819239B21D0F1A33E
C7B4D237BF3ADA8C9475E2ACA314885FAA3DEABD08E65D0B0A85D244AC6B97ED
E9419851956182F84BFCB68C5648633859DE229919466F6CE4BA16F865BD6690
ABE1CBB68FA80DF2FE265B90CACA2778B0860C042D0D714C99936FD909B32253
CF8F14C26C9CDC642C4EAFFCC9F9A3ABB8FE39B40E0896CF0B2BBEB0925AD620
9DB2C360B1A48521CCD0C86F1E7B44A17FC4875E249580B77104D0B89154494A
7EEF29AE9DB339DB992C05CAAD45E0502D95F3ECC03516EE1A8137F851CBF800
DB2259A1F97D118DD3ED9CBC728D3FF56E7E38E4884FF61DB7F054194AD437E2
2F4B3348FA48AEC4B7B0665EB34788D83DA3D82F4B41EA69DF81E35F043C6C26
867502E04CB3DD8392F5E190511176A21C38C32941B86FF8A44905B990F27D2A
BE21CF523AA916B18D38E38AF1712B376A4A88EEB597509F2B84BFB82F53C4E0
090A3F19DDE1090B00466DCD1373D07F45AF5D5F90A4B5F9D2FA36EEEC3D523A
A008E5A351F4CA8A4C59C9608C7B1AF55AFFCCD8927EEEE1C1087210CE220862
D34C45D48246DAF80AD004FFFD28C43F78FC1466B7DA6112C4E90FF5513278DD
54008AB809C2576454D98D0C9C9412F0845325811EFDEE539684A65599F77E56
DD5FA9FB6D80CA875064BBFF790127BDC61A3889CBC27A904250EE14DE715A8D
6EF9EE6687A4AEA881ABDF65B4AF6C4BA1349638A92EF939343E6F5233D0A221
63052A77B5384326EA77A08EEA9F943E960D30C5F6B112F9AA03C2734167AC40
7D47D0E94EAC9F79E8B6F124C4EF08C2761F1D1E336648220E100D6C77EF9222
CD3C0B0CE65C267A127EA8426551E50D57219F5EFF50AF51158D85EA6DFAA0B8
41
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.0: CMMI7 003.002
%%Title: CMMI7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/UniqueID 5087382 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D272B5B1617BAC2B0CB510
5DD5EC6F7ED1226D19189FF547776698FD48B7A6A038131F869A9E24006A4FCB
9FDD5E4A6DA9C531E1F1D1F0131CF8BF06B78BD2C6109E3D5251ACCAA6661142
7E0CF66D8C1998ED3DDDF69890FB2039F35BFBA2D9E6EA42F2E2E88E8C66D0C7
6B2A404F1C72AD3C0A327A90E16092E727CB2BAA0128995EB7C99569C8CD11C3
77C294DC2CDA70D0CB20DC0EA68FFB6BA42D64A1609E07F378A1AE072D1E66EA
6A88B6216A65BB5D731DF9B83A7A1136A9CE874779495E7C1D5CBB3A4F47906A
09156C93994992C526D0C9BD0129976B790F553FB2400B78F2857FDDA9C4AFF2
AF6A3334700FB3733F881FAF164591DCF506611CBDDA1E075026F2E98E581366
76C64A391601CA4FBA8CA906ECD13A23F4B7E7B39B39088D010DA238CCD5FBD1
DE4A90C188432793EEE6100D31754A7E35006BE1525B491190A9349D56CF1571
8CB1A7FADB595012FF87C7C9D63D48DA49C6FF1DA2DB4BE5C17C3390FC33FB05
F07F8B7B0E95733C6AF77AC134FF33E762E1BBC152F2CCFBBE5D9723D91640AC
AED5922B324DC3CAAD20481F05F70C1A22B3E780C9A4F97038266A4F21A83A25
05D1CD86060D665D19D473B50B8D393DB4BD612DA70269407F0CC3460E6FFC13
F0DAD769F4B087F26731D7425147328905277752997C7D75CA4FBAB4DBAEAE86
37C818B1CF698B85C8437F8755DB538D26A67F9B2FB1E0D0D72A23FE80443884
A9B6960CA838A4D03C4B0198154553BEEBF36A4EB2EB71E4B35266608810D629
0941E1787A201AA597C5DEADBEBDC9FC157E4B2B42C0F2741A10DCFDB594E895
E15B521527548B1A359F94D295D9383225F515AF82D6AF5E4C812F20B8D1C87D
1E9C54FF3A03C806F6CCE235DF97A52D64BC126B2365507143F21E10FBC383C0
2D10F7E7CAA580BB254403D588AD2EB7BFC41EEF179A9E957A16E099FE244651
E0A81D744D0E8797742AD3249DC5848D34093DF28744892FB5C0A1BFCEA08030
5A5744E96EEBA64273E9449D43D383C246DEFCAC94677A841C1859CA599724F9
F0F57ECE3D705B63DDC8D25B24E1C552A59AE58FC5A640B3B5AE3F065EC33925
FDAB88B269C2C4E24B1234A8570A5B8463723982CD21D0C24C8147FCA33E673B
5DDCCB50C74375A05F267A754245C132927C7E5B9728F7EAD9C22A79BE51B6EF
14C1CCFAC92DD535F227172B359C1986797DB0B2D6E9862A4444B5B6D29DC9FB
3533DF363F57C4A8C67DC309D495E75E89303FB725DEB019C88CB8CF299C367D
C48A55348C9520C7E0DF5047039497677726C5C66E6F6967470985AC22D7369D
F49C9C7C38758AF261C3985C91D18075E4BDC70EDC326ABABA542561EA1F810F
FE4F25DDEAE0D87AFE8C1880D5CFB7E95103725DA9C41768414D056CEC1A30F5
2B943DD0A9B9E9984B79E3093DA4008628C20B14CBC8B4AF5E85F7D1D4C33112
635065D61A9DC9B2F714E458E25C7577C1D743C127AE30919CC370E8E0BC17EF
3286AE643A891426159675D4F14F25F8EBD223E0FA780915A12A4D6DA840E3B1
287FAAEF11AFBE6CF936BE16C1DAF4A843D90F2F1888FF27FA24B24893CC01A9
86ECAAF0C8ABC7F8EDBD86002447E9766D455CEEC2F01E5D17E3BF683442ED48
4793985BBE8A42ADC9A350CE87A6DFC39F30D8BD5563D72169E53A9F479651C6
35E78472ED386C1C2EBA024CDD647F11692AE795A4970F231083DCFEB823D69C
B1DBA469AC63AAAD0CA2C8D8186ACBAFA73F278C74
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/UniqueID 5000790 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A00DE74E4990135B9FCF930B9549CFAA482EEA3C612BF66FF5E4C2F6A0
304CC43B7F56F6DF973313CA7F2D88D31D632573E44274C48B92BAC9041733A2
DE844029A2791C4FB8FCDF3704BD24C436999E5224B3CAEB213738D8F7872101
07B002F922766DE43B31AE5E994D13A98C7B6A5912DDF530BDE6AD7954D7D6F9
5F025981CF77F5EC7A2FC0FBC47775B3A8842C1A202D1A5912408E6218032600
5EF501499BCF9017D11C9A5B5FF46F6E4846C83E29F452D296989A0BB7D8077C
44F471DC05B4F09F813418DC749D92608678094DD512C712B16DC1986EFE6404
0596A26E27E56DA882035A52D3B451A70C1B05D9BF74C114AA5A6B55B83A7997
1B90E77AA18B016AC219794499DFE612EECDDDF98BFB36097A4DAAF4EBAC2E54
A1A8DE7B6A2DD42451EAC79944962E09541FBBBBB4D5349B6BE785713494F627
A3CA73139FB1148DEDEC66C1EAF44C9635C074A6D31FE8B94F39BDE9037697D4
1D0FF4F73F074F8815AFE5252AC37EBA1B4A3430CE3410C81F7AF72FF2C87632
360AA22DAA6EE31E96D01C69FB7CEC46E923523BBF9063C37814E70E4E6E4C12
C18D52FFBE05B9637F566F8F91FEA2E9AA43A0D4EBB6953DC81943085F5E1CE7
CDCEE753A43932449146F63C19845BAC192DBA9AE5138D7C34B0D32FBE72A581
E39AA6EA67875DC17E7D7FA803AF0B2174E6A42C246A67BD68D35D6F2B7D83E0
5538C95D91E2139C383CFF8076CDDA73B01D8630E14E13761FDB61A85E38F6B6
E5F6B249347FF8326BA46A3754B46E7DFB3954F6F894AE2E161A26E787D4C317
7B9C4FAB13ECC04CC8C8850334382C9E77BE936E70495F69D1686302541A686E
A9900A36FB782D0DCDCCFCA672B5C4710AD1BE960F9A3AC6C812F062837055B8
EB37074295E19DC68B2FDC5DCBCB95C7B18F01E47CC84CF40206FC0DE75BF6CC
D3DECC1D63936AB5CDC593381A36964188A97A93B917CB3E3FCB7EB7C5A87BF8
1A51387F1C502A10E689BBE2C900395C8E97F94F6318FDA9F7F4BDC6DE0236D2
5E466AAE5B1D23F6D44683025B5186D4AC68D7996B1A4BF804D47DCC7E352B46
305D460FD30990474E1060A04BC4907B29226A49C2909825F27E0953F309911A
2207E8D8FDA91C93F641B5038D892FD719CD415F297B15EB9F86D4678210ECD2
AA3C6A891DEC8A58FDF4A17FDA72C48C44459171FCFBC574638D785EEF33B1A5
1080316BF55671
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 80 /P put
dup 108 /l put
dup 109 /m put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9122E8494CE3AC668
3B5554571BE12596F1E4AC4A664CDCEB7842581CA963B239C132D1566EA3C8D8
813C2E0080DEDC279CF83DA020EE0285979C4568B1805BD605BBC48767D7E254
2CDACC60553FBCF6C09B8F0B42CEEF693F098F68C9050D6E601A3307C3482173
C52C785C77938E895784B9D7442495A411942ADB7F3DAD182C4DFE4CFA5E25E4
085971B4609973340944D9505C22E9B3AF8886495B2F7FF02617D82222A089D2
E28F7D9F6A1DD342AA0D497399B6CD04C9ED54A1438D29A7A714B8488A5A9A47
0D0B43BE352809671B02BA487CF6B530276593F9908706B0D42808BB5969CFC1
71873C0FEFA8182938E9A28ADFDF68EC67C235C985B95B40CFD9E05F21135CE9
62757BB18C6A59737F0D0570F24366592D4A694C847F3D6BCDCC57BB570C3162
B5BB8A1DF1CB7E7D05EFFD6E164D3B50D8E8D4ED44C8A6E54332B4CB576E99B5
8190F5EB8E5D2EE7293B904BD5A540AE21B9534633699037143B89E101A4E216
D97C7643BC9F77DE51B70C767C27C5526D06D0A275932EE796F23D77025A03CD
3A23B75A040692F25B8DF9BB1F03B1A9968E5300F10EC5804C8D3EBB843FC855
9E0B69E9B24445CE91DEB66B3019D4D3ED419E2FD6AD7735619621C2AE86EC8A
50644D8B493479340FA6329F150EAE998028B27F9E7B213E23E11344AE21D5EA
30831BF4BC010D56372B7F7950D8A6C3F249E910B9148E01BD10FC2253D7C7F9
A2B01ED522A291BE80E6A0F430839493921ECB563D4909081B1D64B40F365BBA
3355AE0A7DD2886011C8A2C7BE14961F260B71C4396B6FEBF12621A0F90AE428
7D65239F252CE0161533E7D20D28C943C825E2035F55467649D7AE418B38F335
5D71175F769FE6DC5CD717B82D861657A628A729853ECA1B37735A3815CAD90E
92BDA077E453EF3B35AD561BEED6AE583E4404A0C26B72789E3D9CCB6C96C635
34C925EF28754B4681C3649AC8C52B62DA6F6F9B43ED6A5548C108A36B1BD751
CF831702DA9E2FD78D11560BCF73DE8C2F73A11A46095C0A7103CF08C05CC70E
2C74EA07D82876B4F5CA1FF61CDD6B0606925E22563508309D47908C107179AA
35BF798A708B312CD690BB98EE151B6710B6D562C987906FE5613EFCAABA4EA4
1468B1E2BCCCC7EA73C5F27BD9D8E3B7A533625BA3E12F0B8975458ADA230355
BBFF93001C225FD2955078F321050B70FEB21346AF20807311CF2DFFEE2C4A5C
93EFB965EB6B1923BB3BAB2139F2C3F6B3475F87CA116C41A4AE54A116828309
016B5FE1BA4185A358A99C5D1D6DE383A0EC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC13F154032A
A1C45D1A3DD9230A4903FE5523D6EE9BC66EF49B2617BE3C1AEBFE2BE26C3778
EE778AB577C5B9E476CBB0EF69EEE350BBEA9712CD97BB2821612964B30B01E7
B08AE39BC8B715A5C11A351E060C8ACCC73F7D8B3B33CB35844961E68842CFC3
601BD2FED84DC32546F5EEEFA423BBAEE305AFA3FB216983DF61299A86F51A67
1DB10D74D95084ACE3907DCC79E6B2C358D53D1A83C0538DF2F8252B6B963B85
BB230DFCCE6BFD3D847DA4F518B81FADA81814332B622EBE6848AE6001554502
7C5D6643ED9E898E52F229400B725F50C0CC1C0B40C04D1680D51033154CDEFA
C137858D49BA7B27E4904BF8D855940AF0DF3BEEA126AB8ACC2E93B1551E750D
B24390D7F0804F28A5DD460DFAA537CC1DD8B32132A2E7C1B93BF1A2C1CFF129
1DC961C949F1641B11368B8A426B97CCCA4FE1A799E07290CC69337450707969
8C07A7B9A821AE7CAC799DDC5C6C5A4AC9E21CE0ACF1C02A9B72F3C264E40D31
BCFEBE729C666E929DD2CC04C4F66493A56A4D7F7C59675EEAF84F33556BA9EF
15C92469A7666520B873ADBFA7CB2C670B71BDEDA9725503C98440DE5CE23DA8
1BFF6451FCFDED1ADD4120058731EFE661AD7E59F1BDBC850E2199B8D101CE73
99B99B9867C5F0970BAAFBBF03CC4CED932E535F9019992A02B95D37EE95F13F
A9E42672C50476966FB61BFA869C5E969D5CB9ACECB8C54A3A6005F381D99CA1
63BE3AE7F8D73F806F020720A1D8B48BFA09E284A945A12AF951B0AD76754079
4958D0D12B5546ACCBAE584E51CC1432C5F44E74E3693663C3C166BEEDD5C135
02BF3FA332F028FDA591442B82FBABDF699F482833B69725F53363FA38967989
39057C6220FBBA1E216D1A74EF9C325E5820D3C9EF826C2CABEE287C3F3FB0FE
3C6A0F9989C65473998758CB837687B185758B4AA264F37E7F9262FC8C671FB3
3550D3C888EDDA84A6665F8C59C1A2F11A4F507FADCC056E276C5224EDE52264
1BB0C9DC62EE166334B9919AD6E843F17763694941FB4E2282F97FEA50082B95
6F14550F916C002B02D9B025971A01FAB3FFB24E6AE36B4917F745F2E3EE3C0F
379E76451D99AA82119E8EEFA75D54A9BD3C7CAC80E222B09C97FF67B09F4BD9
445969C7E76C5031C3C0FD6080CF97D0318FBE6A0DB8D3B0230D1DE688A6927B
C77F937AD3906040842D63C62E80AF1AD0EF0622C911960E1233C57EBA78A4B3
4D7F8810D7E11F829CC621B3FE9FF97B0E458714F0FCCAAF4182BCF89071C9EB
5BEBA24D03FEE294357DE84AA698CC6255AEC3040CC46914D29D5334F8E2786B
432C43F3C736118DFE042FBEEE5D635C87D428A6345482AA722EF55F075DA413
EC718DFCC6C4564DE45455D0ECE31DA9D0ABFCC711F604B29E7601EF35FB6F71
300BBCA8844B267B7610A6D157EA3ADA7CF63EAE1CDEBED7902F167258DF2BA8
32668CE0CFDE1AD430251A144A5F00B6A34A0110DE316A16B928FF4AC0F9BE99
80DEFC979BD2813BAF58F5713463A583410FBB89C699E9A2ACD1DB389CAF0FB4
A3861C67A4A92FEC741ACACFFC1471CA7F2D4514ABF90318DFE00DFDB73EDF8B
627F6922CE1EF92D7557C724FDFB2765698DCCA783AFA464E170F8EC62AEC92F
0B608DF8674B9BDF9A715330456E7248C5544450B79F8511C53DB95B0D0FB194
5544C2E6B906EF47CA2B7446CC4FCB0ED7BFDF6BCF629D175A4C17A5BB2117BC
BFDB3F8BABA7BF3103A69A69CDC3FD3C02304CF8B73656C4178B6FA2E226B8B9
32A195CC0EEFA8E39744C2315DFB5F44CF5C1CAB6DABDC2EC9F4578D1C89718A
602FDA5C6D4B18A6F2EF64841BC9B7B4D9511067659D9A45853C24DA18ABC27F
14C13122B45E4CD2B6BE36D21394D778D7A0F8E4936D0D000FB33CB3F7BD3978
A763B6F500FD4C4D77FE3E46A917722E7C5ADAC72DC13C4CB0ED682689A81738
CDD95CA5E1EE41CDB25AC717A804028E21C7AF021346133336E1623DB706A3E8
429397B7A1D0E6E72A3A4C45A710B4723AFB79501A617D132BC78342F5382D83
FBE19C6DCB9A1A8115CF0DD3E1090256462EB8C45A01A403C1217A8B3B836A94
73B7903E361DAA5BC1326E0488726E2D6F672352A15A8298D0BEA2FCD4557D0D
226934EECFDDC7D0B0B71AABBBB24B4044034791B7D7003597C4740A96A9278D
FE543ACFB65DB1A10646D0762B400B49288C480356F9AF573A9C560C53F4EC10
F01B24BD3061707FE669C2BC2058C407F125EE256A951D8CF895A44E006FB415
45CA88593FD61E5A0DC97EA2E4AA2D6C07BC2970ABF6142E7DDD1A93770F4874
96B751E99D688D566303ACA5C50906D8C4B7172A48169ECE75E7981C6BFF1951
A1142D90C64FC0793B17FFFBA5F6CD3A69CB72CB04BC7B6AD727CB543FA923F2
EBAD5EACD2BDA013241714455C1951CE566712BDAD71655607CBE3F34624892F
6832D1D78A29EC9029922315AF6F8F07189BAA755965E693257084F1CE146749
7A250D79F37BBE3E0F0FAA86C2653483CC2454C887F4AA4D547420EFDC609514
3D555CAADBDD5EC1C4B5F3BBC4599C91ABA0BF347FE236F12C8A23CCA0CA86CA
46CC0D9F6C52FD2D5284F1907CE899700E81DA0C094BC891CDA9412F936CB2DC
3B235BB50BFB85FF25992C81E31E226BD2190E1B4CC993A9AF084A8D82C5E24E
3A304AFB4241A869FEBE73A41DF6748D48720A0F63EDBED52E7A45C0731FA144
32BFB817DA2C19F0C868A3487600CB5DCFAB7C049859928A3DFC72752ACAD074
AA416C667FCAF3C3D020E853171B0D1612A3DFA5264D6B643712735A001309AE
34EF4E7CF2799E7589449EF35A44080B1B0059AB6528318A5DC7648A46AFE9EA
A17E79A2B57D1D3EC7EE88132663A1B15164381022BB6445F9671A8F490EC502
908EC4853FCE7AC34FAA127A4CC965E36719EEDE81E652B0347C8D04A059F61F
B93A488215D6A220A3B1458EA90D68B2B13A5D4A79B827C93CB1A1A5A77CB2CF
394F7EB0D9B1117596E6FFDF4E22371F4D3A8A3FC67D9F369BED60C6E321A55C
B96FC188A3E68A7D3D06321D6DB80CD676DACAB1311AAA2A04C634CF1C7ED769
E57608B331B8C2BB5B62B0CB986F957CB63BC079633B98C875EC4A51CD961CE6
5E6EB2296D1AACCA321CB85D4AD2B39132C134AF1F8C828E95BA1161479F4C94
5B885FA8EF0687A6E8848A98C3337A6319D4D25FBF6515F7C832BB3F5AC2DEAE
E30B8B6D4BD8A9661EC5BCEDF20536F140D86E1219B3A2FFE0ADCBD3D1F3B669
62A7C6579DE0654DF4044B7E823F39346F915682672FB00231115144B7515A34
C16133E148ADB9E6BA1EDB37101843E35DFDF3EA6F7E95F878D89E2167E977EB
70169B6140E93AF10113CB234414E5BC8850D8006A75FAC200C4F8B3AEB29D3E
A5B07EDFD88ADBF2DE10A4D939382A7EFE5D5525009E1974A334C773A20530B0
9145948A5520CB7D9124D6C64B0E3DAE6F2B4E684A29F8C71C37CA3E7472AABF
A16C8AC88C292CD504E11B699D16DFE9901520D089C79230D2C11C8B7745F8E8
4441C02E3D1C41FD465551CF3484339574C0D2EAE193716494BF36A317D69509
16BE92146F66B9C5BFA541D98F99AAE455B447CE25978D76F52258614A9BE969
30C4664985771EF1F3DAB487F6EB060B986D01FDDCC74DA52B11CEFE7ECB5EB2
B7074F3B68997E3A9B5DB28BCC77594AB611C0DE3D24D8A027962847F657C81B
CB6E883DB905BB1F69EC9A9C9A2CBEDBDF024BC083B246681C0541535A3A0104
5C294762580CF9537CEBDA867E2657828356256B69B89D275EFFE5BE11A3415C
7E5EB7F326F77E7D2D0A25ACE9A2B824EFBFB5394A3A31D557E942D5375FCF5F
F37A9D63DB60BD0F55878C975E3A7F03DC50F41C4664A9DC75C3F810C585A873
B4D9F14A126B83ABA02754EC86DA5B709A961345367172C7E80E6698BFEAB95D
857A97895B5F505176005657DE91B5A74A78BDDE896587DC509D44CC6DF15D0A
6E94E06EC752317596692EE47037E6CA760447D766D4BF5F535B3660ABFB7101
8B1047CD48489794E223CE3A1F5A84930FAA87A50C9375BC3DB7EAC12D840FE3
260C36B0617B3A8247AF30C35DB3995574614FBC458486B32FE029263DC79B6F
922A465F52D86E0E4C62BFF03074A537500AEC5292777632524402B816557B31
4EBD5E6350CFFAD98DD1C3AB3DA2C1CA33C407470FC41364853433340952C7FF
151457BE7DF079DE07E710DD62886184B40209E63C7F84B88B770DF1D84A9671
4FB8C4C3B3E0971CAD82A4653649B7CDCA911811C7759F4DB6AF735D5C6B751A
EF5A68F5D4AF7B046D11FE8FDA096E7E52C0CE533016DD1D32F8D3BA2A6AEA30
64E928183A1DA8718AB74E76F44FCD4BE50DA31233D7314E181EA5BEA68C3506
B83596468A20B1A3D3AA718A83FB25F65FA9E30413CA3B9682FEA89A6A6EE199
9139EBA6D5E8F38C59617D7CE27E66E0B40D26C45E9D807153899CAA8CCD6A1D
41C79226C284326BA0D4D924D2508133DC4B223F19B09998F50C2A1CFDA8849F
5A34F0C817D606C62B1AED403DDCAB8837EB699B98305C148F3A53D89331BAC9
EEED46E449DA4B36E6763958319973206DA2F0B4541B318C0A44B24327C86495
F84B638052AE664C945F9C0E14F39BE0C94CAF9E06D1F4D89E6F6C4F6E56EDDC
40F93B34767BA45CBA4B1E419B088970390D853D8277AB67D88246632791FCBF
B6DC15D28E48AB87BA6E9E9428FE3A7EE2B76BC36D165A70DA7762C2F5644001
74EE62C5F06214A570113F0FDAF51AE1B2E096CD2E5525396D0CE9240E0D1AF9
F1D91A86226A3B6AC6542E0088D5CF9F5F9F1FFEBC013FFCE94AA36F63E4A469
58A89886D967A20D02FD23E81A3863859A9A5379B4EE9AF5C0F12DDB97C49725
B22FBC7FDB3CB5896C5F1C5A9E897A0B92E1B320DB0FBFDC772F6E9174B52D83
80C5112F4CC3CBF7A92A950972AC5773C84B1963B7A49695BE4AE0125D437EA8
BF0D7B964901CCAABC0774F8A63E6EAE20A0F4E813286A20BA91CD4BC19F1CFB
2A2690F79C2F9B4B5A3E7C67FFF3F6AA17DFCE60795A8793CCD18F1A2BBC012C
9F347995929FFCADA5DFD2DA706E0D004F871B3611A02D711A1C4F46CEF102D2
CB834F378CA40062DC82D0110E5721667C26C7A70441D98455E59EAB42097871
6F0CDDDA61DFE1683E2CBBFAFF80AEDB4BB096DE59622A2EF791B46312F7CB19
B8E4307F6C4AE3D51108E3306E02C345F4B464F05F1EAB04ABD581C76DD3EA2B
A9EE7756AA7C7899397D934AAB4502D2EF96BD0CD5578D06C80428BDA2BBEDC1
5EC6ECBB70118AC3949C01038F8CA2DF169E0846DB90E4BB00D6AAF240A9DA33
3AAEC630F7F5B0AB006A191A4A40D384D74D5D8E0499C8D29614FB7C10B47377
A99EB96EF13AC25396B732668DFC3F3B7671F4A074ABDF01FFD7F15B48730BA2
AC5A0450852399414A03D0742349C4823F423594C118A7E16B6A68560F9F1B3A
50F453C1E36DD1C8B2C8236F768DBC11745F5FF1D3E1CC1225ECE8601661148D
CEAE1BB4D92C6DEF173E0B552737F5D89F36F435DF5E4E4259D1460D1753C075
609A8B3AD32BB1121234BC6FC15F0A448A3906733A92966CDFF848C362EC2756
611086BF5EE0AF516EEBFB0167565823B27DC219208AF709415D6FE2DD336613
C2FC7161A5C7D75398151A8F2041009ACECD9FB8596D3B999FBD52FC3A58E655
E9183A8A01E1FA253D089243715F21EB9601217D77E9B5695194EC9D21C4CE14
300E0582551D09E5F84F913A1835143E1A5295BB56A33C5F907828FABB6144AE
8867B5BFB104E77F7769C22788334A91C91F02CE675DC14E1CA21EA53D617553
D5C57CB1722553E997ABE85A33824BA283534F982D43F3953E7F8BCA35605815
E0FFF7BD1116D8FAE438A579EBA81C0456BF0297BBD91F79D3C09F392F74D9A2
6F35F91D61E51829D31791F1D36CF6996C7735C7823CAC45513B2A9911B39603
B415168A1FFBECE0C2E2442F285A81A0DE2767675387CA88D3E224CC090D114B
ABC2D268C833BEB10F205B7C98854899BDB45FF9F6EB91BB729EEB88138D8A2F
5F6F5CEC17F4DE0320F9FC41E94E1DA9B6B19795489A2762762B7F603116B479
0EEE7E8463FFF7B0A03F7B5931AB2418F069ED55B5FA5848CD2BC751170B446F
9FC06F4B6EA145D5DF350143B03FC0FD52500E8D21D81154899B9DF267A46262
1B743EB6682CD1F390E9C2228F3108E1803DA3064F424D75431B2BBE0E847894
5588437D4BFF6C26513246E007E791081DE21AF12C1240C57540E73362D1F9A0
904081FA88CFDEFF949914C4B69F50F6628F9EEC6842B79D9F658F183C1648D2
C3826031A7254434ACFD46E4E0C0D8DBD6BE7CDBB243090FB70F146C442F9891
5291EEF18221F365A1271C6D709209D8E5BBAC61D31759911FC8ADBA7051B972
8557498D3140858B5307E9D958122947DAFC39B77C27B464BFDADA50B667C9A9
1BDABB2FB54CE037D9388685EA7E4C51192D44A159DB03719B8AC3D5D25FED17
4A722E72389F9D31478E1B1611835476E9B8C3B6EBE15758BF64EC9BC75371A9
3C5B142A0AB5AEB0A18A695644DD6308DEEACD361D4C2EF5BBDBAC1FC39D6792
C82F3E387F8B13ACA37D5017E5E3D80AFEAC8E966C533ED89EB8601E937CA44B
D6F71B9D5C03C13E24C0714E149AF800F409AC2F04A7B528AC7855CE1564F0AC
54D70F8EFCA5435FE9C3084A1800652E1BE597895CCD2F07640C423ABECE7004
39682064AC01FAEC608B68DB65C04BB3A0F9B6CF1DB7A4E3974F22ABA4BA81BC
9BD51036CBDA8158CE09AD1D96F0B6BA4C74E866D7950B82F1DE12E12FCA1679
38165AC466B73511257A70956B3E33E8A6CDD0A541C7C798C8CE90A734BA76A4
FA51075E252D48B83ABAE575EB55CAD2C6494E10AEC71EA89868564FDC68BF96
C6BDC36835166C9E8B382C436AB5611843ACE48F5873DDF601949E7FF48FE726
A70FFAB1F5D9FD00592BF005FF5F1026C3F00137C6AF584002D0D078A446FFEE
5F851D4BEB686987ED5E2C18A65A4710A19D11A626A5E267AC5793A4B2DEA2F4
D4BD266D61BF244C9AEF2299D7DF80EFBB5AC2A70120E10399E3824D4F65CB97
549F4C9AEE9A59C6D3B14F0EEE93B6E5EBDF1EF1870AD8E20CAE1BA38A5F56CC
339287FFB556DDE3B0ACD76400FD44FBF87AC34EB678DEF5441E172E50514ABD
84EB9ECA64ED264528AE022BCD0F254CD8A11ED7AD8D7EA7A41D5A1A7ACECE58
3B91BAF24D015A2748D62B2DB1BCD88F7FDEFDE7283FAFF061CFE19F1FB6A6B7
AF5FC0CA8189F7CAD7F17D962490AF814C4AAF0AF0502A10FB2A2000D019D44C
2AA0716E72860AB8D41D661554EE99325ACE5827FAC50C108BB049D2EE1BB8A6
DAD286FA6DEF9BC50AD354630CCEE92CFCCDF183F630446B3DAC988D6016200F
721E2B0F63F82670E35ACCBBD99502208A5A3E7D85ABF9BDDD3812F62A88E9D9
84422D42820028FF8E7D44468C7BA53875A95B0A70035DB01769766D82C2DB09
37949A56DF0F5901B94DAA1C07FC764C60FD274C17BD01B4B1F456A2D4AAC4F0
8A9E29419FF5F4A5A3B8DF92181C3639DC47365B4C7538F1815077F58B29A5FE
2247EF2FE71C0F60B36979B3D6A0B8EE718361952FDB28C567A69429EA3D1ED9
BF2F996DA2FD3FB02AEBF1AB3988FCD513899327F05A00A57078A6C9285A03C8
DCFE7F9A8F8F9609A99CD81551E8E47596498331DB6C906DD0F930DCCD782331
DB7F105FB491A5DCF633479E0CB74EC9AFD9258DA7724A283AEAAAAF16BFA22B
B1FB4351C38B93AA60B667E6A5437E88AD9F3ED8062CB52E9CAB64104439903C
91C99DD2D487D0332B8ADE44BF0A302DC1414CC78C40856F61873A643FC76096
8B4BD826582D6F55D35340043F4295DED5D2AF17620EC69D535FBFE3A7F118E9
0B180B45D0EF19B66660AD474A54362FF79053E6131B6359B1CC834E317FC7FF
2253ABCC551375606C6A30DCD6473D2C217F0374A515CCA9AB7E95E262BF07BD
8D66E81EAE132785BC2508E6E24AD12117287636E865797879DD5D4030DD4307
74B497451535420594A95B0542523980C3C2C9B42C21EB1D9BA4117B958373C0
2C758772EF8BDC5E4046CBBC541C9578D5334B4317D2D0CF0D7DFE9FDD6D053D
68B08CE7D97F8930645107A05BCF74D2743CEBE9F2F2AE490A4086A3A03A418F
197D8AB968761EBA1C05DA08A4A60C8B717EF867D2306AF84EDB6963975888E9
53230F204F00A31C841021DB44D49FFB8EAA2E9779CA2550C5EF7A505DEE110E
F4B8FFD3E82ADE2FFCE0A0FA7A48879C17E7DC5BC87A59518ACF47AE6203DBC7
E6027576F30893C7A4F7D9807CF3BFAC6271991CD856EBBBC252C6450A6EA03F
60DC27A93488DEFB0B4C297BC5912E7F28AB9A6BB0B0D2E0878EA6ACB90189E4
06A28E03A5ECB0B1D99F343DA497EDC92C7450AA26FA5F76C73E1377A91ADFAD
B4C97325F8C6394EE4D850B5B0F718DD36179727419F6B2FF115F74B9057D2A2
7918185C3288F58D50D583CE8F28E93AFB899D313A0940A5363EA9B52A899796
38DBF9E5E16884AB2351B76DE7F42460BA6491EFB210B2AD75A0420C3D9244BE
135E74482EA8D8C40F977F6137244657B8E3E7B676414C60435FDC9C932BE627
6B123E8D1AA1A06632BBD9F25AA9F3C0A69B14BBD009A00E48FC863295B6309A
4D96FA463CDAE3FDF89ECBF3D03C1A1C7DD2F7D6535F45C4D3DF7CAEDF196103
ACA7E06B4743904A2499438E1DB79560A86E3BABF6C43B708A111F5D83764A9E
7E4181A8347D05C0EA325EF6E6D70EE40D56E9014928C891D26F07B4596E47ED
9C8477C2F84102C8489AA275F1662AB779230049FBDFCB4413CF079FBDFE8B02
14EBF9F2DA4EBD4275DD66CADD7FA39912E7346B9B1D00859FE3E28F5557E9D6
7125D707B1D1134153D7FF02E1CF0F0957AF0B7240019E47B223093E88168722
05042401B3E46B10A8C4478913B1E9F3F2648A7FC58096BC4E382C4E80549346
66DC9A3766EBAE0AA55B90987B7316C1FC78BAE749F5FFD76E01C24922FF5B5F
5B466043D5DAFF4B0327470D833CC54309BB9AD1C9AFE4B3F18AA384DB17EAD3
7B14A1F59049321215A0D5D534C3C87886F2440865B844E7782188299515B2EE
4A49618DFC861686C1088A646255CFF0A0C7328FDB63EFE4CB61EBBBF2B2C7CF
C4EC5DFE7E64E1404D3EC99C05EF90A11731E2469E96FD4A081310D9F50C82C7
CD508C547B992B1AA39132A63616A0CEBD6BF8E0670B96C21FA92BF042E9B0DE
BFCD43C4F6BF1FB8F9249A52F06C672A6A67DE611ADC68B1281F8040566800AC
3E95B23128DCB5EAD7134CA696032AB8D41A5FCA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI12
%!PS-AdobeFont-1.0: CMTI12 003.002
%%Title: CMTI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTI12 known{/CMTI12 findfont dup/UniqueID known{dup
/UniqueID get 5000829 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTI12 def
/FontBBox {-36 -251 1103 750 }readonly def
/UniqueID 5000829 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTI12.) readonly def
/FullName (CMTI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
dup 67 /C put
dup 75 /K put
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57C5E0311AE44B83C3E
4FBCDB0B74ABB18FDD877252FD3501E05E597A77D142BED9940318B98D508672
4ECF79C43A857674E4DCF2556325CA8CC1C432E54543F706987376A084BF512F
0E4C517917FB1D607C83E479DD094240C3F309A57561CDF8496722F1D3EBF6FA
45CD3D7D810E2C07D39BFE08C0A25FD568DD37C2D182E5D30A7B2855BAD24559
D455B29B1F723BE1C4F827D72B1156DC2C1EEA76C9B27733FBB23ED36F61919B
4A6E8253C8C05F3D4BDC64B99B8494F7C37E9C19DB6A9CA8E9B0F9E7E3346EE0
EF416016CEE932E53A26599DD8CD09D77DF591A9D532AAD3E321CDCB28636809
E61D9EC969F2E27190A475407B90211902429778103D18665A681B0DD51F6E92
58D1288E2AB3FAEF05854938FEFFD3B4F376AAD303ECD28B23649E5D4C3CB85A
5C9CDCD1853BBF3282BCB5CF57720C6CF7AE468048D7AE5BCD2F15DEC1B33B5F
9917BF69BB64261CF101BB47A09E47D6508250374D00ACEC3E3FE8C5330AD9DB
9D9F60CC170F2FD6DEA12DA24CEA846E25ED6683A213E4FFD0BA239894C920B0
EFF562ED994A7A46F8EE2AF98F88317E513A06AB82A629979AAD3ACE316E7074
01EAD920A9E1D54E8FBD623773429C58A2964B498990E8420E5F7A45B3D4342C
1AC109FA67D4BF33C9D1E0E2973BB8B2495DDF5A7F8E306A0C712BD7A7FC98C7
44B26D102D3CD44A320FE89CBA6B3AB39627DA4679A5BB7C27276B34ED66260F
DEB659189A797BC41D05323454CA4600A6D840CA3C1DC31BB7FEE8DE367B8177
3F1546C9EA98FA9F7CD61F177CEC2950526D54A6E7A0038F2B20609E7BE31EFB
51FDB6829852937071FEAAA3A0E51E625D7FBF2F7C224467C7DB77F7AFE006A5
418CF691841AB7A9923506845BFE066769A01A51EA48840E898FC6FF0ED9C2A6
1DB61E8840029ED92A129D38CAFAD4084B17679A84A262D2F9376363D4B5E46B
1C94302E5CD24CBE93A27319A8F79138414B2E94CE6F78C6F06B544D5862C2C6
297EFE524BBEF0CC2C32F63CDCE433E19B52BF0C2C7064E3ACD429E2466BB85A
ED82C6EDC8AF5D75855B43A61504128F75C2DAF7F5C4405BE36C136CB809DF31
A40E0DEE80C10F6E6442CDCEDEF8DD0C01FB2C035A1D136693D366552862A421
81A290080EB8A3C5160FC2CD760A69F8254E8B0EC8E7280EC33802EC2668C149
73CADCFBD4E56A1E7A9CDA3F6A50E00AA536B02B4BBF4CE60B7A791098C3E434
B5A7F17D6E461FEE23C6C8C148C54D14345DECB7A619E56268131F65F86C51B0
E45860D46A1A798134AB3283BC8B73D9B39EC5D0C1241A85AA46B02E51DE6433
60BEAC76351AB35D8DBFD60C6F12F8B32E08C671E0269174E1E142E687B1C558
5668FDA480255261DC29288FF5ED56B50DD8512BD4948F31F14C71CB4F8FEFEC
DD8E4F4EBE9C28312640334BE454634EF26B5FD02A93210D487AA4F3AF284479
303995AD31F4A6DD2C2DCDED3380D50EA1D8743A3C6561CBF4DE91634374DE87
FED0CF17C73B49060648AC6AF2921D19FFE1B7C7E76AA84600078A0160160D5B
BFAA2007AE70640698BBBFEBFA5C11F351610023F563840413AF6934156D93B6
551069D681492EE73D480D648503801A921E37868B4ABBB013B628772DAC3683
3E44C318352E7700094ED0FF624AE560D2A783343B266FB925AE0D990B65F8E4
7A9725F23F0A08EFA08F81616A5D51E5EC31CD1BA229A89AB63ED782A6D716C7
1F00BA66A3158CDEAE3399653D7A29193760AD92F65C066A4DF35F91BDE771B1
74E17E4879428B5692343AA963A349064693B52F14B09C5F4B329C4AF4078998
D3F6C1046538F989C8AE84AE032A112C3E657907EE7A844B14C6A0FA8C9A1CD9
797E195186C478057525CBCCAA0FFB09F67F97E69BC402F6199B6900D9F285E6
47D359B1728728770C95B1A85E22D2132FDE7075F8FA1123F62504E53AB106D7
99B33689D55D0BC0C552745C5129CEF9F874850240FA6BF5F4779E35BF15A8F9
F425ED40480C60FE3ED85173E620320A462092834C0BCF6EFF9F1D5912CEB941
9C18D8EED5CA36CF2C7D3965BB0929EDBF7FC997A9CFE79A9FA9C54A11E1F421
7F3FA4ABB80A3C60E9165DBFB0EA765BD21846FD1260F1AA4644CBE05CEC736E
638311023F9F51F4C0166733A32BC1F615C8D9256E44BE8C2FFEC45B7B612FCB
21C52DB57E87EC8E166498AA8A4528B7C612E3BB8117D6BAF5CA8F9D038C1430
B7EA8699F31ACDC03774AEDDF6B73233944A1A89ECBAED2EFBD30DDF42821846
AF828EC54BEA6E7312B3255A7F55783C5D4AF1D9780A9670C9C7E02A50535A13
6D957F895D53E4E18A4B4263695DF2BD9626E717D5C3B80E908E59EF5D093798
7215550A5613AB86D67C1F89C95FBB0E6ACCAAB397479D483AEE4607E111EF34
2FD92DC7F991B6AE84BC7CB982D819A17022ECFEFFB981A6F678655A6278825F
0EFB5733C5F46529EF1FBB01C6BA7413BA9211251C0A70A470F735A96F6E0D45
DB1342D6B97ABC234790D346C74927F5C910F71918D615CA907984F0229E3F54
4F5F75AFF784C7A470DDCFFC308ADF6EF43979DD3B54C6A8DF3B53DB783B81E3
9C57413C3A317419C190F207720743084DC20288C1AD08B8B0FD4ED805FBA8B5
BB874DCE4AE93AE3B8A117612787DA6C8C7512191BC36F6D8AA38F39099474AE
CD570CB5570BBA932C9C7A63DD386CABF1956FF87C266BF145ED5D27547234BD
943841047FE9A41C24B82FD3D3EA49A56C56840B1B359FB2A3F28E10AB09AECA
2FE2520DEE9B5542591E72ACE610DA4BF31C6E204574DC78033008F019519B2F
E45C99F1B938D212602E824CA1CA020211420C77FF545DF586702451B0923EDA
CA15BFF98CF2F0A56404591E57F7C89CAC6D22E0FEF9094770CF003801E5CC08
110B272A50805F89C0BB5C2966B9385C26F4A5008AAD97A29408A5116BE613CD
5ED9F85D2BCDE96FCF3121D5EE1D455A4CB03BF2AC33493FEEBEB955EF737F7A
EABF96C137DD84B3EA39C61CE95B5967405CEF17D9CF1BDD1199346F95E77CB8
5FA2D38D858DAEF10D0DD660211C8C4C69EF58B60DEDE48DF76300EAB8F0A547
6DBC87BEE8DD4EDFE3020BA56F362503AFA62D8C13BB270C3884560E227AFABB
5D810B2B092531A679485FCFFB88BA8313646B644A35C413053DECCD4B371450
18F54701F610E52E727AE8D25A8093B60093FAF775B6414F66F43F517488B4A4
00AA4F672A34A73531218601904A7F50A045E80CD804D028EAFF506EDA1ED998
ECF16435C6CA8E203F2A813506F4B8CDAC0A3D69F4B704AB80F170EC87B7C732
AEFCBA3BF4050A9CFADB87F7AD4B53BECE197C10A2E84571A640328B90E9A294
73F6CDDE4F4AF9F1F3A257BD130454CF95D390ECA95FC4221D5041E71D65FC21
8323BA5A3335E2E905E33D5BA56BBBC9CC30D25764A066D013B116E693C56762
4F683F112A572C2C04ED041CF7BB4FAB0D899B3F2679B431E8993A650184CB4B
1B391B39929AF803F868245A69C964B560A274B07DFCB88A6508082DD6092E38
80D9187A146B60B225CA22F593AA6B4B7EE1EE41A0D375C4FA69EC6C8E02B54F
B855D385C973A7223DE22465D039D213315C35F0D079E8CD030F62993495B2EB
A0F9BA98565F89D2E09BB60D90B0CFFFF1F0845810ED27CC8F1088F74D48A30D
7FA0728498E78A381B0169B7678520EB5769522BB5838212D32C8C1ED5635753
EAA3C14E6640BC34D43EC162711996E0CABBBDE0932FCB6B2838C22C0E42DCE7
1BC85E372F24C1145655D59CCD50EA6E1A673CB0342BB744A43EA1B9104CF736
324E367D82ED67E01B0608294A91386045C1564E4E417E1A62EFBC148C0B4A56
73A98AE2F2433164740B839F851F9C38124B3C01CD976128DF6A06FEFE14B960
4573E748370D70F9FBFDBF875584852E70264766FA5CE893F74D0D5884889178
078CB149821A743D797E9577A7D27E7ED607349CB2CC6968A7CE402DF9A55069
4A985B517B714C603F993944CC64083DE3D5F969F9C5913C297E8493D310CA42
795C94740A5E5D3415CE7B4A5AA11A940D93992329D8B00213244405BBE73958
37CD65B6AEBCCB2263B937F671FFF3C6314D400983E5AEB6A34709D854FDD0AA
3D27A62BB23E253E6E2CA994294009B857B5F1FFB66E772A0BF9D83F4F72B89F
51B125AC9E495343C9D84A4BB4759DA4D2ADA38A195C7905CE288FD8634ED996
9068F0DC8DD08F3D3A1288A271E7F7EC4AF76EF6A78C47BAD95FA14A3AB690E1
19A13639774593D77FC1610D7F1E25A31AF94C5354B35500B8E57B0F65AC82C2
2A519581B587F5E3C941734A4269842D38F74E89C2AADB8ADB3D16542B0485BF
BD4F1EDB4064E96A330D735F73789614C8D606DC553A0A2409CF4C595AE51505
CF203817971BD7F9B3346C036A18FECA44CE1C2042BA4E7FFA3FFEB6371A06F9
30082F47FE87B207E13A68BCA122968AD74CF6A12EF6767988F0EB0CB64981C9
30D9717F6C7D07F4B37CFDD68EE4480C0CA305AFA4BD21DFE131D6715E839973
E1271BF576F70C2F8C6827B3EF02CCA123EA46A02B2722E06078C3D9B3743CDE
45B43B561743264277D0D1FCACDDA80E5C6185E90F82D1DA4DC076B6BE49D2BE
F03EF513F1861CF66D2B7F8D52C7A5C21DF1276B72CC1CDAAB5A16D20722A95F
8B1EB6E6B605D3878831204A0EFC95CB3C5B588D4F0A540D466D13B8468ECDC1
DB08D36E7FA19709A67A0FA08421053EEC9068ED464D29BB1BEDD0BA88882707
9F41334C3BD3F995321711B6ABDE3C12A8907F930F7AF490D774A05398ED03D6
789D91B4DACEA3D8EE11C2CD850A6EF4128B60EDE9BD37710F43836EF6D53FD2
D8123F81EC6F01A93A8B36FAE49692E7276F7CDCCB09F332ECE359E3E7DB2364
A60B192438FD158B18CB3EB40FD28F74A740367F02D5CB6B53959A0D11BDF388
9AAEE02F0E96AE2F802FF08BF778F26DBBAC8F5AA04CF3AEB180235BFDE493DA
4D0B13E0B61696A8ACE4FF7A09956A1896B2875E5B2BDBA09DA08B9589957E85
51084D76A00FB728E286CCFD2F53088158005599835B18F6F5AAAA6051270AF2
59F7BF641B0AF4E79F4491725189B89E57CD10B442B8EF89345D04EE3E18EC98
217D81FFB1B473B9562605F7B0AC3FA8CFB798A988E5FF20F068A6B2399C71B8
2E3C19E58601B0AD3872170B0AE8FA33F3A50EC5E67EC22C00D3DDDCD7B592E1
0D1CF31DAA48D10F7C6A56CA052A5AE914EE08CEE011FFF20D00B46A7738C434
D70F1040C611168D2C1851DBA89DA526428E6D5DDA244AA267AE3559B0C7DC8F
AAE1687F823CE628AAD59999E74DFFACCF7D3412B466F6C3A315D8AA3350FB18
9EBE417717C42F3201D19E1870A2A3424E96F1A9734F32E85DF220E08C4DDF8A
AE6F3491A3C805578924F36C146CBAF1D38C8C18D18E5A9B38236BD3E6B9E5BA
595F66A2A8DE9F52C9DFE00ABA5B99806A87D2EA39EF2C3A8D94FBFCB0CB5345
9AC36328B89AA13E4BBFAD70314009B0A2588847B7092C9EB938DD069CFA3679
73D9CF01F9756B931B34E70F4A5F1C41FC577515A5CDC49FE2C9A13D62E7E612
2AA5969248241BEAEEA5CAD34154EF5F9153D85ACD6FBD6B7F2834BC65C77E27
5ED803220949B14126BFAAC7728CAE16EF205F408232C5D7B83AFDB9C2191997
38005204EF424640DE1163B577274FB455EC0383BC6CC17F35112AB638743DEF
9954A5B2DF6A50DAA8662967E8E2208A9D1E3506309A9EC4C001CF91896E79A1
F3F6FE998DDF7C7971707CF7DF7415F6D42EE28620C0A225A1B9E389F397F972
552E566F748613EA1FD417CAA7B90A2BEC1AB07F44BB8AB6ED829F2D7F4DD597
989617E6BEF5E701498823382DEFC2D5FD078DF888DDCA99E62890AC0E5BE8BE
0CB662B561A49D2221847151D203457C797A904BCB5A1D68A51EEA20A167047C
36FF0FDD999E46C857864D1CE7568CE9518230418124EE5E51FD96C0FD8EB7BC
2A49F49AD72BB71F849B112147271000A77F41CF476AD687E6BC3DFDDE0CDE1D
ABE816BF31348D25FE0A11FE7F5559BEDFC24A14F91BB73BE7F5FA95DA24D705
3DA96E8D05B84A1E5BFB0F15D7D4638CE4C63B74404128CF56A016180EAA054B
85FEE6937681557D0B5BC3C560947D456F48D7F4CB7A5EED52B103281B152E3F
ADCE8B98497B74B05096AABA261D2A2EF56572904ACE2866C6A081C926BAC3E0
DE02EBB63FA29197B3812809F08A9E3D5ECFFF751E60F7082749F57352040E06
CAF9290336395684E85FA2446FBF1D0223F74B0D3464B06975010B83D0975181
3DB6C0E2967CFBDAFBD555018305184953487AFAE112D36E696DB8A18F3E3A74
C8B123F16D077DBBC85A226A26D406F622858EB7F1646BC0093A7C9711A1DCD2
6302B0611AC20A3870195D8BBA4E8E4F2CC73030B2354308CF8C06D68DD7FA14
87CE9D6FC7A8A356AA2DC356231B4993655A0FF55AF67090E2947C2B7FB9E96C
EAAF52A01ABA6D69B738D6E3D4B2CF1E037D991EB5943BB0E6AB3868138CBF20
A112805F4CC00C65A4BE86D7492C23E34CC0BEEFAA0403E2AC21FD33D7A7FD09
9DCAC0BE550881647B322FE5806735FD993F5ED7C62173AB29095F67A626B9F3
20829E4788786C978B4BC9BAB9B3A750F130F9D4AFDA6EA3A7DF09D7615951D1
0C783A653F0BBFC23902019BA276A6D7944F1A34C1EC7E2710091C0B94CC3938
01C50C5E4A9C19F47D69074023F574D7A7302565EF9920A8E2A5076E6E3DDD2F
409CF1AB8BCE348FE63A136E03A520DDACA32571675AEB94D761B7B625AF1626
8BA9ED761E12A52C511890DAF1F790857C3C9FD3FD033A8330CD8E19266FE888
76AB1F3B3C8BA1FFCF3A6CA570290FC1640B6C4231D8346BD346E647D138B2B7
F7861E2C7C7C4431E3E91E318BA1DF8338AD4EB4AC104EBE7AAD8F5A09E6AB3A
48B9EB51A85277B221E3A22AAF38219B681918DBBB2F77FA8AA27F310159C763
A6E66D93879B592289B919B425FD7A367B7820FF430100E1EAE0877F84326FCF
5F1DD99964BC6BEB63528D2B218CCE41024EA2CE703959071A65EDE99127EFB8
0CC01566E5E52DB32D01512383A7711C7770AE17A71E5D95629642AA79CD5F01
D37FC89696F25C2EE4DD70DBDECEFA4FA2CD5D2F8ACE75937D2B1FEC7A31A893
16D314D800AFD3EA28068983A2ED3A7C75A5570F30A2824A47D6A789AC554C3C
A78C2DE9771B86F73C66EF8E1D0FD046DD4F19A31EEAEE04D5F38B73C623F326
F146C7164C9B18B5EED2113363092ADE0ABF0D7BD4C10BE9766F81C34878B236
1A0FD6D8AB4BC7E3C01F1C880C3A9186E4006210D22EB64CD7690FDA750EAE7E
C87A9D29128D49082578ECC0BC977D91E9CBB1ECC0D3527DC0ACAB39402015F1
B067FC5E7705586D97E81F8911FC2BC8E7C077384AAD4DDDEDBEF65CA4B75F6E
39E41528CF53CADA928537D557B518BB740593A6E4D0100ACBF126FF20888342
A0D3D7C201C4CDE8CBF59A1BA4F924E4EBC3E02883D5FDF2C8249AD8117332E1
BB52D2F621115C0F98037857E9DE1FF64F0674457A70FBA6B2EA4A39CCCCACFB
7222423B2A0F00BBD793D80729F4DADC600746F71F311137EC1D91D932FEA8A7
10106CC7EE6133A18BC4FB8CF81B49505AB2A72BC3F9A63F488D0B55BA6A85E1
184C28376918431D1E90D75AE565E857D692570D2C43C4097138FBC4E3F27BA6
A0A2C9660B2330091ECD3EDF09E4DF014126EAFCDB7692A35BF0D1535FB840E4
0A333CC4E6B305401207108F3D4D7AC63BE03D71F312E8D9A59958571BD5DF4A
9588B2A62F1302EEFD90F1377C28D7BC0614461671E1A34870063DCD4380F708
CF42B72C9D868D95A7BBD1ECFD8425B18A3438947851E07C416A80E9DC1DE4BD
DB9FCE9DB3DE8B0A93DE1A4F6F01F859CFA4BC2854E7B608245CD972578050E3
74C13D3E31CFFBBEF020882C58CD5B3F1C3FBAA2DD6BF0CD5AE25DFB459743DE
6B195855E78C837D88DC7E318E1E8529B2661083186E297A3C3409246E6AC6E2
A56E7742B0AF5CD408C303036EF884D484B4116A1D69D89D99F0279F6755E232
9A26701539A77CA784EDB7F39F2BC2B6824107B323FA7453E6C9E4FEBC976FE1
8C0D9F0097C6D921D108565DC28C774D8726A2D55DBCCF145F214B0AA55C826F
5F8C05047FF851DF16DF487DB44C029B0872CFCDAF667A0161234F8FE5F964AC
6C79470733FF5643446DD56B3513E0B65B46F4109820CBCA39107617A426F9D8
418CF6D959CD5D424A848A34F0B67EBAFA9F25A8E70AD011ED22BA285131AA70
3D887E26005F21BF23B5A47E13AA9B84C81D213B376C67EAFEC1276243295825
EFE65BD948B695206581AAD237482EB3BF513A002E151B647A4216FF16E25134
5A4465FA8EFA5E5B044464C6484C484391420D99A50516182AB61E41EE1E32E0
7D6891E527FA3989F276722375DC16AFCAB4BF5CD99463D6B6562B82BF4D9780
B29202E0C3F7C9831717A6CCE94160D6BABEA14056F37F7774A927BDB84E3B7B
C859760C0EA09E7128C687A8562397A61A25C49373F9FA40C5327F7323E78BC7
1F48D8644089C0481105F9532C6748BF3502EBB90C5004D509CD20FDBE6857B5
799A577DCD873D06D4E33F376ABB227AB4D483558BBD8B24198B7412FD15105F
DCBD3F66E3589FE04937DC01E289B64D36EAFD6A6512E56E5F68FC47086A7EA1
B43A71738475F776B90638053CA6867729E335BA3A74CBBEFFA58B1191712A02
7B32D5B31B4828E3CC0B952401FD5F62CBA1FE700F1E61F70E4EA7C2C218D713
0907A713FFB142C71C1E47D5BD97382C5D49336EB5C7E62631EF945770A288F8
6354B1BBA293B717B5FD4B5388EA154F36436D690B547FDA26317B20ED0CC258
3F3B815FD25359A10F84AD5F5C7F8EBD9958B1CB8DCC8B3ABF8A8E289BE5B7AE
A01A35AE108EB632653177E70DFAC0EE635B05620A61A4FC7733AF8CD1FD7592
A8CA82840FEF6C5DB0877B8773CB758D76AC170637D4CF3435477E2B45A7BDCF
04BC696DE8524F56849BEBE205FC2D4F2C245D21495A775AFF33878B62B41951
0542232AFE4C83A8BEE8BD05E5DF57C0B7C4000AE17B41FD8223E7A247EA84CE
EEB6F9B5301C5FB8A8B23A451D5BC3BE3092ADAC95C69F8E6E7D30AB75FADC68
C63ED4CF981F17F514DB3D5E22293A2EFBF5C5078BB29406764F7F54D62A69CD
B40F14554F4B8D9377BC295057A899D6D6F25C904A45D1C22AFDC1DC59B82996
DC5CC62DBFAE56942357A2BE10666683D68CD6A4A8BB7BC5825B41CC7305D28B
6CF3DC62DC051F48A152322324E83104AAFA4DA3AC9F24C60088FAFE5ED620EE
BDD411D036BF5FE015CAC481DB0C448802F46754A4391AF62D45B3B692389451
B651ABA7DEA10F43D9EAD55CB55AD25F1741597F1B962D6F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/UniqueID 5087386 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 32 /psi put
dup 58 /period put
dup 59 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 75 /K put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709006B68486B326967A28D
41E878EF9CDFFA015BFD11310CB2305640182A131B96D73348B7ED8D31A29D7F
2D889D8EC4F6C7A55DD179594ABED611CE4DE790CDDCB68CC677A362B879F4A7
F4F84113A561F6D170454B0DC4DB2F973E21176E5B00D0774F0BDB3F0E22D753
FDC635611AC85411D57FCE2CC85BB5DAE17BC41F3C1E5CA1BE272ECDEC1C574E
E68E33D269E90877555B1E9AF694D44B85295968D0CCDAC4B5EEFD6E6F284597
DC1016F2D7502E91FD71BA624C499BC62FE7B4734070F8C123A633E51596A0ED
00F273E0DD044A7DF055D633040BF5853FE171E3442C0A00DD938476920CF678
69A9DDF5A29AACE82231873F15E4EA92B37F9045EB711B4939EBC0785F347643
5792033AB924266D8734301BA52C5192F8B32AE780CC9D48C832833999E78819
CC4FEBEAAAD11210EA3D220AC1798A5781DFBE3E47C31D0B5A0B87147FFD44C2
0F4FEF9B7C06072E0398F740D8BBD3FB1B9920AE84C085461C1F5C08F4251173
001AC878E423340D008E73A1F49B6058DBD668C43C513C35AE8144FD672DF548
C439A883086F14F419820F312F3127097B59ECB9ED4D16EFFBCCFF0CF648981B
B0F888C510C0CB3C45918E92417F6CC39A8288A88398390816BB3FAC62D2051C
CCC0A389D730EAD6B05AD28D4311178DFBFE442372B08A31D416B78B71520456
64620D9D0A3FA3E8BA66A32F7839E4410B48557459EB0918274A879B02E0392E
5AF97B16F09D2B8A3B514BC1BB5467D359020C43A00570AAEBD3DBF637154F71
9A636A9700C081553E214361B2B57EDA19BBCCF098E1870D0846736F0649DCA8
FCCCB124E1FADDFAF3D5925CEF54EFE72CD0D2BDB735D18B4103C1DBDCD8EACB
15EA2822AC4D8AFF79F1746B14ACDB6FC83D45B9D3E972710DEF408694402960
947DA3B6BF54DA82FFEBC510725C300BA2FB19A603ECB41DC86E8ACD2DA44C5D
157E7B53ABA05461DA40B675F081053377364DEE80EF4EDC65A99750A337D1FC
360908DDFDA1D097729126AE06EE723A37E6B0AC10F2D31DFCF9E2B1FCDE1E3B
8B9659D7801E8E456B952F3A503F4AAE7A878CD75F948199CA27C1838AD62C53
887F68EED03DE18F36FAFB39DCB99A05EBF8355DA8D365ADD468CCF773F3D5F4
82480A69070C62EDF9CE6E41E6C4AEF2CE7215F9FB88D09FE4D1FCC0B5C4214A
D810A3E22CBBCDCC9538BB8AA51657E0899BDFD5F2D7837F89EC2075440673EF
6003FED63F5F59BD71275379538EBFC5BFD8C93AC879D09B847670F103540645
FF66168961B75C245FAD7929F7EC83DC5EF376AE43E5B5DED91030783F8CBB69
6DC1E3AC3CD434FDE1329B1F8C202FE7486CDC11EA40E1DBDD7D263BB3DC23AD
99925459B26B502FA8058FDF97D6D5A602B7D3EC7983DDB21270A54894F53618
1832D54089B7590966A0B7ABA94A00A1FE2265A1FF6BB0F2511C6947BCA4D4E4
C32BF5C6D52844B5EA0504D4F1E15A786A24C555F071154801F32551D90FBDB7
3C5F1A1555AEA91394ED682BD5DFC90B959AC3A19FA9D0303DAC5BE0058B7AC4
6EFB606372A863F05EA4BFEEBD5DEDA74B52C8EB0BA710C37E1EB159606D2297
BC192D312488ACA3A78A2BE855A05E957A0BE481889125A9F918B0D589B3F751
30CC1763A04776F70BDD9C6C2B5597E7A5D919BD56C2BBCF6FB4226A4908FC09
1FFAAB28E9BD7E6F53C082DDA43473239A62A2B336E3BA094FF5B01F141F4607
2FE68D7D01B39F4C5BB7FDBD12DAE03DF457371FA15792EF95A63990BCD918F1
59DA7EF9DF36E738062437FCD132F1881D65F8CB127FF9A82A56EB0C0AB7D65C
829A362E3BA27BD71527B31E66EA75B826992AA9AED0A7585F3CD72528D8437A
84E4091990977324DFE8E1DF20228754D04D5A98C2A8F4C3482C7937EE850E8F
14108D7E8FFD60C4D6ABCA86A72F2D8491BFBA1EABF19AA5801DBA25FFF093E6
A73EDB7FCA726B6FB0519FFAFE193057EB38758DDC5CDB511C5366CA7ACFAEAC
C7D7370AF684AC1276B9BCD165FD2B55E72ABAA1B0C9F212D601615378A62891
3E8F8BB7E90DC924F52EC882D9B71A33217E4AE9EB2F69484B1011EA7C2B3F02
179EAF8058768C443C4D61E0CE8F8A26A89054B4BDE6A4256C36F5AD4317E947
812FB1E539A468E47A5D44FF41A6F15F47B20E8925FA557151948D1F72C17938
AC868835992DE7F98C9626FDD27E4447F40C5E3EC6D4580C778AE5E4EBED7014
AE86091B6DBF330174E860BFDBB705ADD3DF9387999EABE778B11783AFC7EDC2
D27FF50EC3DB80637B1C5940606BC32E57ED7222F32C4461D59D18EB64F37828
9C619D8C2A601A76D27C501B49561E78A8800AE691524EB1D679A868C8955EF7
F5B66DE3F28B5F1B300D5A3FB2E8B71A2B9DFBB0FEFEA990EE6D8E3B14B0E46A
2B1E4479DA7543D38546C76E9A257565C402E26CC73B3CC548B81AB4ECEB3C7C
DBDD6F05F9C89005546D994A16EA3307E4ED0156AC995553B8E2449976F93CF2
98D86B586F64286690BC1DA979900B82B440467468A475F21F58296A11C1A1E2
912ADEE0D4FDA6BC0315BA44F0AC741BA5D12839ABE6D4160435AD774C6C13E1
997CBB8199109667D9A78ABFC7331C496E9AD9ED15F22E64C57453CC00739E78
0DAD8EA9AB99C637BCB4566521D0DBF476B94A09B1A08CCFE696A74E08AAA6FD
4E7795AD1BE109A08BA2B939BC91EF4F35816A39E65BFC3EA89DE6FEB8CA882B
E4BF6E6852253C9B2810853CC2AD6C83949DCFA8498E064649357956F607CC94
D988F307ABE21298E97164C1FF245718B028F0E004F24B73C8051FEF5C45C1DB
50C2554B20A85C414FFCDE7330EB4FB043D6A170F59B15189AA2DB2451897DF3
60C8A36F47011C10619571F046CD874C46057AAF6F8B44FFF1C9ED112DFA0D80
9B00E445E40C12B4FEA12D19A767726054B918875D138750B076F603DD43FCB3
2B9FA3737BD8257CE49C397194A76B7A50EC64E03C3F36AF43767B65F73EBB92
D95C59EC3B5C0AF6988200665482054C73F815B604518D5BBA078EB4406F4CDC
0FA2E192CE404EDE13AFE81793F9514DE35DF28882508B07334C62A2ECA5259F
1ADA8578D0E8B2D8162A35BA06002E2B8D5BEC09636A6ECDF62F17592C6659B5
479649F71FDF2FEB2E35B51530E70724D2D98C7978D9D61B60C43B3F9466DAFC
2DDE7E1C4E4B4191F9FEC37D1580AD05D75D178973E8F329A2B6C1D8BB46CEAD
846B151E99BCC5C8E0DDBF457DD36877A20B25BE10094DFCA1246AE9D5216BCC
A82A54CD170B92259B2EEADAC7ADBDF225EEEFE4F27107A6D3488994E6893BC5
E3A2B4C1B78A103E6CF19F19CCFAC67ADA904CE4B006C2E9F556C374E4041644
283DE68E6B6A56C0B0FC88617D20FD51106B00F2B9D9511364F7C3C14E6E2299
7E37ACDA4775A63B94F3B970E946EF411749805D8D25954D9E95B8CEE612412A
FCB7A44E08441DB64CB7B1945E8BA52DC4AA4037EB034D9026AA3A1A221A4003
921296AF93F01DF57F1B19529D2A39AE0B71A53273FC0F14AF29E6901DA0C5CD
22A16B0D007518730DD1847034A8ED6A047D6FF36F823BDBA18624F5043B068E
51C8B92EE471C9F83E913A6AF794E40FAA8B931905D05559C2C8549E52D63152
591CEB896FB487D0861ED9174081EF7BEBACA70F12214FCBECC69F0135A7FB03
83BDCD7FAFC5BB0FC65A86670602407B24DB9616A1A6B389FC76528650D325FF
022B0564FB14F76685A9FEC1F2168BE38C41B211A00225A607A55A27935280C7
BD3E37E651EB4E9DAD2EF5A7E6D63313CE569833EA123CF79EA3E1C0DCAB92A2
DF87AD366527A0ACBA26D2B92FFAAA1C1CC016197BED011685A3C86E20036523
F197A5381F14DADBB2A10D2EEF8A262FA1B015A99EF54B6E113BF9550AE4A168
797F786786989402A87BDCEAA4A3568B378E647155B77033A2B6CD9AEA739FAE
E2E77992768E4CE4D9786C6F50F3A5DCF082C5CE4A621555387FD7ED83B55EE7
1C316EC09EE5C253C3996C715AC5AC07E49655E42F19917B3130D5F934FED2E0
9244256E4A7F9C8A83F5FD7E52AED768F223F972C418EB50E005C1F2A2B8A947
AFD0BEC9450622784E8404121A3372871B0AD3A206DBA3CE4BA921709A0495B8
78F17A5C769FCF72D78F4D72EFC1B5999B053AD7DD5F156E35866D447FBBBC12
46E098CADBF578080EBE5B50A2DC05D42B1D6A2AC0766963F9F93063A16A697C
53698E6A6D69CFA6FB99751B63105436B457ADA546A470A04997B8222F13E2F0
EEB35ACFE240B80B7F208C9608779CAF472B258AABA14588286152A98236A985
2D13BE43BBC00CD2052F9CA534F4EB867F96965F295D703012F67B60A7C01234
4682E9B40E7EFCB4AD6B90D6D376935A7A9491FFB1C42B4790D2C103478414C0
5B0CF30A74E13584AC1DDED78C5E536324C217E8B18372DF136A13D9BCF95DE4
A7CF1BF29FB0997E15984F42D4079C186E7C92ACD867F17471DA9AE9DC28FB2C
2FCA30E58E592E0671F3849E7A249B7A0408F323FF5333EE680FF1C578912834
A95B0C3077525DD3E9CB6BA31CA09EA0E2B1DC0A7286FF38A8211FFCCE8F8A5A
D4B7A268FF814461292E1D2086EF2386ADC8B63F15FF36BF239DA9200A9B6D80
E359ADC75DA16DE4B1CF8E2BEDEF18A9C4140C2EB7CC20E291B72ADB5B94677F
7CB0308E315E0DE2E5486929E4B7007C1AD8CCA3696F7DD455597BBD29A0BA8D
34040D8D3AC1D976DECDE5591BB7B187EA0ECC8397E6B811A6E3BB97DB18C795
F10210B79D33030E2CA2A309FA67F26DC5371AEBC0A234676E246DFFECC4A95B
799973B15D3DD8B8950FE50934340EC45D792FA6AE5A9FE317C21DBE3720816E
56757A13FC9606192D396DF134419C5A6FC58AA56D1CE47EB6593E66E91B4648
94C00091F75887D916A7F8C9177D1B6731D5E3DC4F5C6A38E6F74139C76C882D
8DFE7D351E640DA97AAD028FC275BA872B2D2E65A05B67FDF0BBC463384E854F
FE83B8C513B97092C87F8E05ACA4AE136878B42A332C9D19F0CA3FE71DFF9607
A972765585ACF9DA7CBC0A80587793589A99FF37722D132463B0C75C428FB163
280CC17AA46DEC7FA8F4209F8191E2269632E6E2A8D477F70008E70868266AB9
BF463FE2639DF84BEE97B0BFA2AD512FE12317B9CB0152639B9ED3E5BF0DD218
5ECC3E5939A4D9D3BD47E4439E57413C54B69DB7E0B0F6A1E7688FF5B8589B47
39E545636D2349668013ADB2D0DAAEC844AEC51E99BF93A9C2A20F1F5241D548
CFF0A12C5CF7D2E7E9F8223CB68C16CCE1CDD036E2A666A0A953371871DDFB05
AB9F52A3BE0ACB8D879C16E3DA20AF2EFB0AF18814D12D69DA602A5AF87AB8F4
104DCEE3164F9A30AE644E8E421615F96253189F9C5436297278C6D2DCCF6538
F5CC9887D2E8E1962D0852485FC4D168BF5DF6DCFE0CC6E979B814EEC6574494
5A23D1AFF3AA6ABE39D64CA06B1ACC76E52854E06E5FD03A1A33D672540D9BF4
D1A50F2F5A4AE8ED5F5AEC11941FCC7073905D5F48F6F72114DB1A7D5E93F1AD
2022DEC65D34629767A9A23566DA688B004F300855FEF185A64F2D5AEA32C28B
99D1F7C58D0B5295989E4E74403935EFD7B209729A217BB61DBC1A542708EF9A
9B1DB67E256E0AC2C22A9622DBFF3B27C1E81B94A11A2BBEAA72C057C26AEE48
196E59E3C316B7C40F8DB0EEA5C3DB9C3A9360915E76DA78103EBF2063BA2344
A9ED50A05A44D4FBC4E1FE1BB546287571D433D8F0F8FEFC1363B18538DC6002
FA14959B3FE3D3B26DA295AB4271E740A11378970BDDD05F90797A7448756A3B
5DB79F9945D16CD53C8020A1F7F31DC5E9CADC5BC04A7E3A1ACD9B73F51A967B
33E198ADD4A70D06CCDBD58B4D2197438162C954DE60B78DC7D8D083B88925A4
DF9C0F144261391B4EAB76154DFCDE8DE5AEC141590C3191B22BA3511F818969
C8AB4F93DB3C97D5971E9F522FB99B91AE3F0C94A52A0D0862E97335A86C800B
A20AC32BCAAD28124250D619AEDD396822A301BAD6FCE03DBF370B2A9BE47496
AEF6189942C75E2DF75E52BDA17B7A733D8FDD648CE2CC265552766CF0E7A14B
A7922F95E54F1C3227EF2A9152C6A70A12741BE458F95497BC6B9B7FAC576D19
B68D965BD8D758A5924711A21DBBA12CAEA38CCEAB02500961BAE8C5D04CF750
F7F0F7F7FF997C458D26CBBFEEBD8620E2DD03607FE0561E0F687BAD6F756EDF
D8FB364112E182DBB79A06CDACEEAF1C5446B17BDD53A2BB3F9A31FE9A87F449
0F1C844A1361227FA8256611C060F21FF97A674BBE29C5677C8EC9E3D6766029
64CFDA1095695ABB100EE9BAC170130380B16AB19897956566CEC0F07219D4FE
3583F94A63F3249BB355EAF460CD7E4D92B3BF9D7E268620890784FAEE57CB96
D959A4927891F18DB00D7DC483FF92F8C40DA49A6E0D7C2EA02F399870B6A81C
76E9125A0A0CD5AEADCEFB86247DD0583D87D2A76F7728AA9FA082D1BB3D9BFC
C49ED78EE3EE9C8C194AF9C5D1C3D29804D2F3134C98A5BB2D7EC6733A26A03B
3B177A039B9CB2EE2D9627B254FAD28F32E863C8B62D68DA50FD7E6749C7DB4B
D548B0B3A7CB8B9145C9325D05D045EFFF02D4DC823BD043F06D97CC4F5245E4
2B42BA6872AC5F7FDD558B52D490623A19A5F9ED7B1796EA4B81597BEAC758B0
38FE21F38B9FE9FC316B699E7C1434B5D69E0631FF243A701BD3E0C47CD939E6
9A30313E6AB58B840C6D14EE7851621C90BCED7B7B274D316642AF5ECA6B2932
5B68976F3F6BB8F25978473ED83EB3D1B243234F45033DF3F9830A76A6DC864C
B4DA55B73505A98902731E22B1A7428D258CCEA97A2EEE153731676CACC6C19B
56646D7CF6F292BE60A37AB31A2E7898504C2171B63824681481F94DB5055210
842A2F30BC48E7E582524BF18F3BDD6848D7934F47A9E5A3CE6DF77FC8411755
35EF699419B52086D5840FEB54D4CC21FB88EF0F7B36A798DCB112A7FAB320E6
6831C4400C692CB7722A1A7666FB7DC90A7848120EC532B869323457FED0CF08
4118AB7A7246BD1BA60462C9F842C9A67D74B0E724C061CFA5163AAF7F481FED
34FA435B213AA99C4AFA2E11F2A070494CA98E31373202738907639B31EFA242
81B70B4F7866D96CD7DB5F3F442F5F28DE36E97CDCC2D3424E9CD58A173795D2
2B06DEF41965FB25BCD0789AC68EEAB4215686880E488B1833543294B85CD0C9
9629CB51F0E043628A169DABBCBF562755C0170F3F3E8EBD0D2E4560B0B9C10C
7A748028C0C47ED5FF523700C6D5880B1A5483391166966986DCC205AD7A0E27
D49DFE178C3EE62052EEEC43A15C4A808DA6DBC702EF4E41BC775569939FE0B4
228E1553E3FFB35B35FB7C4CD467117D7257D5D6F6A60AECC26A6FD2842C7906
33034315D34ADB1FC1FE9364E2B5D45FCFBEFC6D5038FC29CF3DFFDC91070E29
8CED425D21E1A5EA3D611E559BB6447D187D4C7CF1DEDD91985FC6D7CDACBAD3
63A18B298B1256D2F8981C1F98A5582B7607098D64739FB51FCF4286A5179151
585A40A8B50DFA08C9C598459D1CC598A2BAB0B0A97304EA424F3FD462E25F17
59A08681CB0217397F5BA1BFA8EC1C97
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusMonL-Regu
%!PS-AdobeFont-1.0: NimbusMonL-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Mono L Regular) readonly def
/FamilyName (Nimbus Mono L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusMonL-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-12 -237 650 811} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B89290699B50C1BF1BAEFFE
1F57BE7B5EA025241A248A6D4CFA5067A1DA6EBA4CFC940599BA3F3C934D7248
B8E4AC5816F0D2CE8B3C4193CE39D19FFFDB75254573173CB51CCD83C2F2D06B
2483CF9B07B21EC6F502F028C273887BB06DAE2AFAC10E9FD3C7CF51BCA7B277
B706E425302DC78975AC0E43B87073257A5CD7424B6865FCA89D886E8F95C4F6
D457623DBBC0D16BAFEB4C649F5D72B09B18502EEAB687E915E9B536A361B4F1
44C3CD4CC683B5F05A4ECB4823A5EB5179BB7EEE8B76C21B2491A97808F6318B
585B0BAD98F42FB4A755BCB74CD354F794C8BEA5B90FB9681BD5849D45247E39
930C882490230E1662D39CCA875BFFEAC3E79A78DE6E1298ABE9817AE98675C4
16220AD0D3A36580EE2F2A17AAA1246C416D58A4C52FBB26AAF3B6F75833AF8E
3AA996218DAFA571FBC7CAD90ECE9C883C813D8F168C5E86BBFA0F0A5CB36E35
2DE4CAA0F8D3227F72C5056BFB5BCA6BF9C60E037A0E44670A8D3CBC9A19F379
CA8DB30B711F518A8C7569211AC70C46EED2AF62A37F238BD0BD12D60332E673
C6E784B3EBA3F2E71E9993B97E8A38F85048937E958F1CD8FC6E661048546135
56B810FA1FF611B96495081C04542DF7FEF085DEC619DC8C84CC57683D212813
9D14728AA32723E1D15F2AF8F03422CFAC472B1D98FBD0E2E060DBF2CA9A25A5
B11F5A21C9DDD3781A586EEAF451935FDDDC897D2B235FC33C523F93DA3B5684
49DAB2B2402C3A49097E7598116A4D36295BE3F0F241BFDF8A78969FF3C005B6
DC5A54916ED69D1B7FB6EFB7DD6B6C1E79369FAE64074784CD74B34B93D42B17
F6059A1AFC17A51EA38AF85539833E865A51A7FB5A5279043E68FFB9229EC6DE
4ED5A8DA7D9F76AE8021045DC09C95C9AE4B4EF735A5414D985EAD8846A82AF9
1F44923F25BAC6773C8AD0A810792531D6C664F8CC76003C390E4C666D8156FA
A3FD5B5A21FB57B445CC3B9E9DB8993E4F73FF91CFE037D18E559DAB50A977CF
474EE1410D7097785D120CACB576738EB12DA190F7B750529BEE076434721451
DBA912E47FC61D09F44A31F7D88B072B10C44A60DFBC669093304B6A9793AB48
4BA68656FD37163201BA034610F9A7BBE4D94389941682F0CABD073F2376E62C
44DC287DAE5C2DBBCA73CAF31025A3FD47B8B3105C7B8DAF584E040F89694E7E
7977975282962120B9FC4056A749DDC15C7A56AC870774C97200F0601ACCC391
9419478EB7CBFE4FA27538E2780FE896E01C6B488FD152C0CFD0662D318787C1
08CF6922C96AD6D987BFCF71D9D041AFE0416F4F1A755E97F12D7026336D199E
9CA3CF34E140D7DBDF0CD2C2808BF33DBF18E81C46D517324A5E6FF1135DDEA7
7C3A81634324BF12787974F7593F2CC8CF006AEF8B1106D9E42E1BD075949F47
EF868AC4807F7AF1D8580FA64B5350CBE26C0401E33DFD17F6080B00A9B3BB54
8FD2D8337553BF31AA5F2A0A5156B81553747E436F523BE782F9D7CF003C7D49
723CB3509F29909A009B6625CD539E909156A47A1D4F89C3686AA1450F23A5EB
F94C4754EF165A16F356294AFFB344911D7ECD11AA4FF54DEF7C1093ECDC200E
0C407318D16C37BE276A19C497B4C0403D49DBB6803FD753A9E426992ED6BC8B
EFEEAD4D7F0AFC75BAB14B817CE2AD91E5FB8C735C681B61295068FDAD7F8655
6D7A49C65A2B28B030CCEB0EFB92CBC6C3ABEE1E14C643529096A2EFD737A46F
DF835FB00224251203763DC185708039F299BE6BABA56EB677FEE7BFE1DCD5BA
2764536718B57418C07E23BB2D72A807F216E2009FFE57F6CB0CB72BC26EF0EC
DD2C0BA97451C9296C2100009D54C0722BEC75EC3DD97D3D9C53571086A1EF88
110925908148F724A5D21C53DBF2EECA199594CF093FB8D49DAB28DA0EDB9463
FD1A066CBCBA4B3FCF3BC8D6A3496230AAF1232518D579ACDF043A43A294F4A7
F0FAC599672AC5FD5FB3C7F90A908D3DEB35D08E2EAF4EDE0C0C64A45E3F43EF
0E613C40802E0D32EF0DF8FE6F2D4E2880EB4A142B1051D652C1E371D57B511B
52A4DB8F69D76C3BBB44713AF222687DB9CF10CD88109B0AA050F06A64F757B5
69AED696735480B8BA5F68FED42DD602A9644C8587C6BC5C9FE406C4A4206DF7
652D22B20BC90EFF9E94E483473A359ABF0C020AA89F9E74BA70701B18D94002
8C70E43447EFC2E50AD5550235270EA6787A4E15BF4FE23DFDA51D40DD9BF5DD
D3CB175F3E1E612D87391E09FE53FAA4CD9E8C779273D47755CAB6FFF172646D
F47F999BF6FF6FAD1450F5FB9B42ACAD3609A54B8B49C81270862B8528051C67
824D505EBA49C21B1C0C5AD05C2736E54B1C37962B6AFC229BC6F0A0527C100D
EB0C7D98EB67CE9C25F62632EB30BDE3A806E10F28A51822A85F52582848C432
4241222673009938835AFBCFD91900B19867E85B3CC3AE38C42A90CFEC73FC18
1CA0042E22BFC1725BA2C696CD7D58DF4F8A5F6C606372AB44A10872CBD16F81
22A624D8D71C946740BE4BF01A7ACD72330ABC9E413D1DC2AC8DB5FB78D744C9
ABFCD095A12C405F561BD9FBC456D92083B879671A87722307DD8BE84F65F443
B78CC756130F09B9C2B636562C5C7CBD2D34994227FD7BC1FC0E142A7644F56B
21B1EFDAA5BD4F7059552906D8A023148C895EC6A8FD669D6702EA42A1BCDA40
7B3C74C6BAA665D56A05FE6A270625DF8ABA0420067817990FE7EEAC4CAD991C
4DA475602C98D1064DBF03040A309616B0A7A154D9577EB6EDFB9F157911E60B
FC3B69093EED07FE5C491EDD336CEFF891C44368CC68BC012B0B3BE7FD642FBE
01853F7F1EA8A129600ABE4143FBB248AA643C5F573A81891AE27C8741D9A25D
065223F04A29C28C1C21FCF83DE4DC83E854B7E802445AA7F3728514E3F485DE
7B0FD1C34723FC8529F41BDE487280787CD363A398058AA4BB535EC8F15819A5
DBBFA283F990B6A68856A2E0FEAD3FFA383343DEDA2CFC1099B1C9BBBE34F5CD
3769804A9E356170742E3089C4F6137B402CCDF06E6CEC73153C415D4511CCE4
0B458764CCB7B3D5D909920DCCA2203E28B5F312C10B94877315E717F27E8B8E
1337629DFF4C9F257DD2790DCDC92899C0127F200B8CF2CA3C067A34CF65BDF2
76D5D7DE707A867827389AD410CB0816BF3ED4CEBF13762C6027769C216D3525
5C7FAA8EBBFE0DBD7AAFCF78B5AD07D26F98F716E605799F3800C68000941A52
D691640320D5E607ADCF51A5008A5CA9091105129F16BD5B2B6F2DE610C064F9
5504C55B0B33BA921D3E00537475478BE62E4A4C69618FE8EE03001B4A00839D
B50762309EAFD25B0D6175D567B8BE86A1AC1F7D05D239E99CBBA7E661295C05
43E196D6D9D86C8123494D46EC27566B91425A2A65C07D4FBCBB8FB94BE05DFF
2B3679CEB0DA2442304FF353060D4326034A5CD9EC8F7E868A429DACE417CECE
A2D839810D562BC8ABC3021CB68A52C9349C362FD595A48C117213B7502DAE7A
2074D4FEEB470DCB239EF9D2771EDD2A4BDD22F82EC7F10C1EA26A509F71696E
FD6AA65FE8DDCF689666504EB979E085F5FD245FEBFEDC9BB1134443FFF918C8
051FDDF6B44A2552C20E9C17F1F3478D685F972CD43E70F82264386ED3307C69
F7B4EB8C14B2A4EE6C78DFFB590080B9F865D19D39B03D577C85C3A6B25CB5DE
520C3095555805F13A46331CD39E04A6727EB5365DDA567226FE29A2981574E5
38612162F118E48E3671A73269C58E0A739CF0468DE47619EB1A7536E42E562D
803F890B82B3F3A4CD704E8EAFC757784FC686D40D1F65352DBF24A1618AF1FF
B55955BE68678420A1F98BA33929FF18B516272CE7D4D9C12C6859FAE642F05B
F22730C6B5B205F0077083BABEB9F6BB1F3FDDB482868D57D08600673DF0C70B
1CE7512DFB96C1C6C2E34BD4F3F2363F09CFBD6074A209666AE594ADB4DB30D3
13BD8989BC3CA66DA2890FB3B6009E065B8E2B2C8E7CE69326303C6F314EC6B1
1679E916AABD5C467828ECBA22B6359BF24D2951ED1BC2195F11D414400F81FE
0DB15CE6FC30ECA3A2B2AD548B7E1BFCDDFE507280C091AEF56CC7D4AD1AEFC2
68D4E260ACD0562572A411DCF9B2572E1DD4EE78D2CD47AEF84B97CF8DFF2B55
183AC797D337BA0E84F9060C62A96D4AAB95EDB58EA45CEC2AFB8BE931A6F888
B9157F7471D9275D43C056277C26E49BB0BC85A603D738378B1B680EFD0BA3A1
14DB1AAAA0E3CB300B81AA22BF4C8499F176375348789BE208256E68FA3B5386
F56A089E390113FDA80264140D8ACB672E68FC69C5BED42963A242A1267A2E8F
2F36482F1F773DBA1C7BF1CCAD0FDCF8F33CCF7EC6FD08F3293E91896AA1101A
B0B10F8267D9CC73E2121826B3FB7D324F6944073B73F832B05982EA7A720108
959992415ACA7B6768F2D9E497D9D7AE83CB0BF119A941D11CB62997E29B687E
06F553C076341D757B09A3E3EC6954EC35AF45D1636E6A64BC035327144B153E
A7313133DF49A031282BFAE08008D14DE50E5F8652CDAC1C078BBE7A86A40080
A0B3276B420582F6DF048C00375D622C533AD57758FD145E769DCE5687C417B5
D618580AD64293C7621004FCEB7E5E3E0E172138229E6F5B0670B0FCC10ACB90
26D03D42AD8873FBAC459E0B9341142FECA95C5DEA906380C91F087A5997F8D2
0139AF21E4B42BE32C869F7D4988BEF2B66951DC84705383D05EA02D410DA660
EE50583BE34AA67E94C8599D05340C6A561DF3A56C054235CB5A713FDF71D671
0F91FD8AFA989EB8BA0CB3C5BDD0A24DDC0866ADF478483D668221C3D21B072A
A0B8373C97DDBFD7445D1FC275798319F29DA8C996F21B95EC298B4C5C980843
D5C1F2EDC7FF839307FEDFFEC8F435767AC00997A6B82E666764F90484747EB6
E236A366D8046477D04EBE547137A9D4634A52602A4A406CEC3E6B836FA313F7
6E5EEB2599453A7829EF715B07B78CA642D70641EEAD89438CAC1AB2FEEC6635
8B3938BE626700079B26F81CD00E2BDB6CFC966D03BF5EC2AB2F06BA7BC2FAAC
13F915F25CD38A71A8ABA0A089705DB44889D86F033ACBC749DB1B62560BAAB9
EE6ACA0725F126CB0672B30C92BF5105E2968A90A2C2D17C29FABBDCCC6B3366
E0EFF2B08A1F5E4453A41E2104D06763891493B7A9E34AF931A13816323CE989
E500417F4B9D1D680FFB5EC0D1AC01059EDB0CDCD149B1CAAD17429EB8AF1C9E
3D3CE95A7912FBEA676A02C1F2AC82CAB29950A51ACB97A7DAB16BA61E2615B3
F6D4AC2B193FEF981CC5D52CAC0DB6CC37838A64723596565132A30605FBD9C7
59E6CBA161EDF7DF88544B13204E6203B8537D063B5887D5CFFAAEC31607A664
42B3D0829E4C9213360180D2E2DCC87709D1D9DFADA9782A1B63A813A16996F5
7B202C960396F7B95310FDC36AE39E1A7891EB489A44088F53CD554413C7CA03
F9A442B0DA9E0833B6147833883CC77AEE03858E5D2CBF641D98B7099E68120A
800FCBCAB7657D587F53C771E42C7579B5C1E51359BDA910FC9C631802896EEB
6127591F1E8E7417093574382D3256421E05FF7780AD4749A6C5C0F20571C577
ED03D63028C20E01C4FA4B7EE1DC737637D95CC5287E9A8700D904CD410735A2
259A0B74B311F18C11CC63026D8847FEBBEB405736F4315090B59D663C6F381D
52575C6169D5AA7A3A916AD53A10FA663E1F73E5C45BB3863A15638AE470FC66
42B47CF188F7AEBB016BB96893386573F84C0D6E69762B41C4A87F5C1F45E54E
7CDD807D51CA60C065398E161621C2068DAE575FA6F4A3A74E15B468CAA52A0F
7A2403B121D4FCD2C6B677FD740968CFE0CCC287548E61E4B83D7B1E0B938D6F
0D51E1DD5C1C879FFF4E1A8BA116808C78769AAC164971689069D827D804F47E
41D9249AE29CD0CC5821E8E519763C2B61D2B29F0501EAFED4F37A3B26398A1D
2A9EAD2F523691D1B053F3079BC8D8EB4775CAF2106549BDD1D0D9EA244E5CC8
93BEAB526274680BC2F82CCDEE4C5A43E50B507E0852031A7D7F332CD3604612
4BF3FC0BA485E0505FDEEBED99409D7DBBE52DF47D33F454316DDACF60A7F3B8
AA21AC42B13A3B38164B462A3320E57E29AD4BE16B730C8F2C2F86FEEE11AE5C
639C4C7AA496FE37B34D462E09EED3FF80F29788B7BFFE70435821E967043F91
62C39E4975930F18CD36CFB0020B11D13FB9133872FE01AB7C5806B2ADE3957A
2F7BEF0F009BF61A7E0741CC2097EFFB9F6D77D760CF7251A6095FF63BA64BDC
D2DEB2E4AC3CC3210AEA2D3DEE9728FDD19787CA457EE7125B97FB50D7EBCE7B
BC7991C10C8A28CCFB9D4BCB002E70F8EFFBB73C892E98FDAA16FD298ACDDD99
06CB53504948C5D14E14A4F74AB42AE4C65069BCAD90791CBC90EA1EB8027B6C
AA2B8C83821CD49B5DAAF3D84C9F2E8F5B40D1DD0A834099C9C41AC6E66FA653
9DD72C1954F1FBDDE327FB220D4AF623BC9F1BC6ADB83AF9A99B669D8503875F
B27B41C3BE8C0589D65C9AC368172048B848E74338D2D8F1BAAD580D22FC84A8
687231FC83412B07E613C4798B2BB2DB9D168701DEC9254C983425A28A20C7E3
2793E2DDA8ED6D90F8041298B7A268FE23611A4823A1C828D92FE07D3B36F04B
49F1D8708514B2EDE880C30EE66110F3D0C57316578102AF0CB0078751F1E2D5
12647277B9CE8FB16D00896BB88B0A87F4243806F30D13DC8B1A60616CB434CD
E7436FBE5D62D17CB062E0D1D8FE563927103137035F19D1606BA78599F7810A
39E38267DE1497B597DDF127081FBCF0407AB719824E1ED5C40D3C40923DA150
C493699F0E68263B15D8B89904A846BEB906269EF691B4B66A9FBF2F42FCA265
0359A8B6BF01600E4A11FDBAA2689E99E8FA8D84EA1BC74744F93ADF8FE08B4C
8BDE976D18C8F669EFAAA5EB408B2B3F92ECCD384633B1CFBE950D0C420E2AA9
78CAED87EB5CC6194E2C471F8876C13CFE68DE879958821C6E78539970EFB2D1
3C855D11D212CE13ABD5A5302D78B78374263AD37C10FC1098F92AD5419695DC
B32BF3B26B2A7FFBC00A9912B63DA88B3C465E434C7ADE8B527660AFEACE72D4
7D75003B5DD518CA905BCE5758C1302F38D459A241F1D79D4958D052E0B8752B
7DA94D3E4FB9E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9B169F6545DD7
B4C68A3F79464C1D64E30219493B226F5A7E1038203E4AFB32361ACAB13BACD3
E465D094B64BEE4213F52B3921E48CBD1046A9F5D5BC258A8D370AFCE233C810
9064F1B79385F1F09F222B545B1E00A91B3A9A9D911E78F990231066888CC3CA
21D9B855B9419305073E0334C3F081F0E15D5D26A72F48979F8C3C01E7D65CAD
577A2E135403EFAD52472E97602424CC86C824536AC2ED86B7806DFAD1307E21
78523F2617B1C3DA8BD6845413514C2B1A3249E83C9B3BB09C5FE38C7AC82B40
10E6CB8CAF5B6C5EF38D62BDD9CF7072F2714E974749A493A3486B2251BA5739
F9B229E9C09CF9428E7A631E3B8C64E51A1017DB919CEAB585B907BB47E6B700
F7B8D0EE7BB169CBFADDC4BB1B1552A81FBFBCDB24C77A82D729813F1B3849E1
959EBF034CD9229C35435A186849B87C3639E79466007C7BAED2D2F3FFA02D3F
4C69964F7A1219DB87C73771A6CED0715EFF43475A0FD680DDA601E8BAE2DC26
FF4CFFB4C707B8CCEF0694F57A327C41588B6BEA8BA7A8A2DA134401D0ACA9E2
39449DF4A6591041681175F8FE3057BF6E9FBCF3F635F1FD8DA05FB8136A3D16
8F9CD580D7AD66A2DE7D9CAFBA0562AB6D2911EB5A38478C0F43CE39C9A9EB8F
8FA55020FEB0FDA1F7FBCB3F7468BB0E7F7F6525C086DC7EFB997A60E059D211
EFCC8BE299B33BBD923AFC2F0AE54C0459012F234F9CF555DFC8C27356F012F4
69039685D8BE9CEABA2C1D33410B9E9B87F2B03692C75C75B73262006C142BED
E5660987DC232178A07DC9817B111949483D3BE38D9FB47992015549919593A3
DF4D032EEB40699074E7A4871DE9CC512F527FEC90A076CE6387994F454899E0
3F267A00A9EFDF0569C572CD38C921577A03BECE43FAEF8769691F9CE7ADA075
447311DBB27F0BD196D5723E1C3A1D72AB167EFB07C3DA6F036AD052CD456CA1
79E313C19ADFA5A3AA89C7DC124E674BAF78735304965D991DAA7AC12E3EE716
2B4BA3126E6E78B0A7D0A1FFE768FEE4783112AF2E75795B20D0B68F7B3471CE
BE01F71F66868A34CF9B5097719B511E88130C1C71DBAF4ECA80F69A524DB9C9
947F8323A5B3F0037903760BFF53804702C3ED3C348871F5A898DAF3D235E475
95EB6986E01E43D1BDBA46204125A5D15C8C858BE8E21DC9F00F0091018865E2
3D6CCD650DBFD16346B2151D9469BCDBE7A625A00390608941B5C206999107D6
7F4AE3D159C66C6FDDE01627F5A93C3D019071FE703623CF42A0D679469D0656
C8DE634E7C667ABF9913862F8520476592A0E46D0839E3773E9D2A01186EF9D8
D7BB70C9C6A84C625472BDA4ED0AFE6257BDDAACBBF915DC722F129532453551
30086EFF0F27D7A391CBE6D87DE3102CFD686EDF32FDD5BDB4B052873BF11F9A
A1AF2736027F8BBE4EB70618427ED0E984DAE501E74B162E96006C27A87CE961
E0DD4796A59A57DB242BAB62D68E65CAEB36E4CAD22A51B2B34065D3586E219C
55EC4E39BFDB3C74C001BBAA870E845542FD9A9041A7CB316B6DA707D8798E24
1F61110709B9FBAF106DAB98F948CB88275DC411F874D7AD7865282C69E4369E
DC97B2A0709F5BE9200E0F5EB6852152679B57185B5FA0C67D4074341C558306
CC1237C437F1EE5C98E149EB57C90FE3DF9FA373AB739D6A8107E9BBCB98D6B1
488F171A5B0730F8E0695989C414FA5BFD63534325A465BFE565C56D2C638260
089D911F28E9954839CA02440227ADF03DC09B9EB6BFAC2ADC6817BB130E6831
E4FA91015721F73B3EDB73EB63956C6171B28865041E4D789FD52E782CDB84D7
58EEBD4C8B25A333F29F6279B854710B0206DEEAED9200E4DDC04356EC6B477F
2F775006A43FC017E01B31D28A3C91A476F320D598C972DDFE5750B90066D765
14C48A4FAFF2270BC9FEE462B418D2D29D4429196A1FEB71886C211DA05FF145
4730F362FA522B369E2C13A644631D31F9662DF465BE288DB9CF3B99B97C6BA1
D8A04B5F44AF8C47F074F42C129161041CBADBBEC510AC62CE179BED267CE930
CEF85774469085395F7F3287B1C86BC6071157AC9AC59BC64899D263FDF09A69
F10014E256D1AC247BCF8FDA29E9E225467AB6A2DBD2EBC2F1EF0BF15A91E019
55B3AB2F6C0412A2C3224F0F0C461AE33248F912F88A145B67B2BE5EC830FC3E
091F0613F57A921B97516A2A6B75EC65E14BD4C4F076CCA839B2583762644149
66A3BE4E22F1E8F77AB9792DC7097ABEDCC9F669360B1FF29AAE4381C0598CDE
8F56DFD0D210D1288D24287FB1FF03DA06E48441B85C338335AADBC9301F412D
0BE150E8A1BEBBA8CCD02471C1A0D59532E02ECDC59237AF4BD3DC58874BC8CB
2DDE1947BEC9DD0E0E5315F61694F0F190206E4E60EA42B980F54FB41E71BBA1
3D4C74B9C13CDD95FDA9546B97C80B68FEE20493C1BB94E623206ACA14AC2D7A
8BD2BD78EA05206B69D9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-MediItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-MediItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle -15.3 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-MediItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-200 -324 996 964} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E1D5D732CFAD353E3B2D8
C2EB95195919264C4622E31A19D91AACFCBE5948640C6FF2ED865A61A34D5621
EC8F97345E25F89A2E3CDC64953A73D32C60044ED8C5175D7C40116E16BD025B
405736F8A4BD8D4070948E532BB7864341D6A02CAC612A639B6C94EC233CA648
C252709BD9C80F0E8CE48CF2F94766DF957F078F6AF4A7E5204102810F649186
3B67F9B7D04E783DD36176EBB99E92785F84225B659973AB97B63EC6FEC3D6AF
6C347303452A654C465952A3F0AFC0A74C9276CA0F262DF3ECE72D0E56057A6A
DDF6B9B6D3F64BC46336C8F8AB296E0A502A1B878052317E8F659881D1912278
082486870DC26891FF364E75D72547966C4B7E6C131EA1F71CD02B64104F7513
BA1157E65EFC56F23EB9E296D425562037559648C23DE28D468F61843F23F63C
10081F3DEEE3EBBD10B8E7B4B1B317B6B2116698542675F81AE47CF56F910DFB
878926D16FD18854090DB163B6C3E719A33B542AA70855DC846B98CD83DAB916
91691E259F7AEEE5B3F25435146E8EE16B5E46EC7F62E5B4298AD064A0D66991
3290D798C4CFB5499D96004311B4707DF64CF43724242FB88A88C5E2B53D2976
7F749D893DFC2D5A4280C4992FD60CC672FA505469184B21C6411C916339E7D9
64BCD55D6974362B0939449BD1355F7B99F07D6F3EE674328D1C485299EEDF90
5D5A5284EAD4B9606E8A9E381D623E38C74FD6F93EFBA70FBBCFA73565884CE2
39A5B4864E4852B6EEA8D2EAD8A396C424B4D318BAEC8AAC9CDE1863337C98C2
109A91C2EF30C929EE3F3BBB33E361EFF2812778CCBFCD2E7FFFC7F1F4406F15
BA868C0A90877010683689700681F7EFA9C6A377022865638E3B3CE101B3AF4C
FC4A583B396FC778023F828FCDA979E25395FD87AAFD437C2043CE2D2CE8E377
29A8A22744C233F003CF9B1F0AC9F14D7A187B8768DEE153BF971E35DE1AEAA1
65AF023B6737631A91A680833A0C7FFD06721A0A326E89FF25FEB234CF6ED023
0AD073B3113F6AC4F73696A7A7276F30506AE63589ECEE47BE4421A95E6B8243
746EBF74813266AF9200CCFCD7E26DE76469479963BBCA39FF12A6C27A30BE9D
F8E2797BB52CA05603870FE7C734D80223EA640390C353F464EAFB984ED9535E
EF0550084F44EDEC96437250C43D32222BA390DB627D9C246F4CFC399C46C142
6F4FF72A744B8EED9375BA4144071FD30CB05C0AAC0D6FD8486C034DF78B7705
48214D4862C26B1BDFD5E9ADEEC72918FDDBC862112A1440EC171DE0B4C6A03A
D8C04C59A7A86BF1BD10D2FDCFF30014FE1DC8921C0EA428E4809029FF9F7966
08B48FA55F73FB9648B66848EAE89CF668D0E0A1DF7BBF182FFA1055A1BF1F53
C0B670FDAAC8CD815089540B0B4D7D4EF68BFF74A9D07C26F5D34D728AEC75A4
B728D27C8018BECD829ACB6C3D9129E976A2427B80F1CBD753C5E11137C66FC4
82C8879A7B6FA29984BDA651117D0A2A97CCFC80A69C974FB2CCB36DD6ADC47C
61DBD34AC593EF6F48BA96AE35A6BA0B59619F5472169D6BA9283C269D2EBBBD
B48B707EDED071F8FD14AB944E0B3949BAB173449FD05F2D761B67600B98DEAD
07135CBB70B81D3DD53483BE7CFAA66508B40DEB70F7261093F8A8E52BAA1E6D
DBDBBB387CAE5401B4398224D50B111990D1F4436C860DA78F1A51CD8BC83BBE
06422D1C075D8455E3D5C3ADA2C3716610DBBDB7835E97EB66928F45EA814616
4441267E541E00AA38E2F36A0C5AE69E84EF52EC5EB1D04367A1F1E79044CCE1
EB5FC3CB80149DE54B2FE9459AF2DD2AE7113E1CD62CFF43B8FE29E702711D60
CDBE68ED569B34CF3AFD65DA452D7B64C01A2E0FCC48AEB365AB95A173E4B6F3
271396CB9B90CE73A3467090058FD1BB6A841BA76536B62D20E752B76BADF8AA
33822F0BCF964690AEB6B3D26C3BE813D55E1CB07EF881CF8F1512C407DE6B00
3F76842DB549077A292B73EC12DE6969DE96CD728B05487CC0FF81CE86FB7B86
52E5B3D64055F4E4C30DA2A788CCE3BD7AE873D44B0B9D53E6EABCEE56323248
80BDAD3223A53432A1370A32B7CFC733EDE3AF510ECDECE38CB01A214E1EB80E
BACAAE7E29FABBDCCC6B33640024B9DD96A135DE24B41E07EB960FFB6B386EC6
C9D6D8564975D17D8E0A1227998D4B94FCA8042756F978C99ED39EF436CBA30F
8EB1A6E543782DABE3FF873A54188D11AF8339662D164EF37BF8635D5E0A836C
D8EE4608A524C4F1A641735601161669B687EB8F74CBCCBE8FBE932F21EE27EF
2B6C1E47B0216326BA8766413148C812BD4323EB029D021211373CD1ACCDA953
1D52AE43F4EC19D387D38BF89EE6AD68A56756BC41F1E2E0EE80310D61F570C0
66C5AE63DA7B8CA9B4FF039FE7E238DA0FCD330859671E51F5091CF9AA225F1B
310A2C5AF5F7741C363475CBDC743B9308C9FC2B721CC585A7D6DFA3CDBE2B96
3004C201C511A3A23894D253FD7B51FC1183FEDEFC9D852353FA45CB859AD23B
BE6341801360957618071859FE807923A951920A75DB7A6AECD4D7B2397A43DE
80F9F8ABDF1B7483B3068368C29E17B821B2D119CFE46CEE6FD265E712D661A4
B9064D01DD620E7F7D63E814FFA7D512A5ACD472AACBF8AE866C0504DCAE2EA0
AF63D45D80F3C7B6C6F9947D613D7508533669497454E52766AB7058FB54F50A
1422E72A76924F4264CC4ED3C7238F9922503A485B0615F0D3D880CAE4ACC7B6
E8B260A180B58F6383AEA24BEDA70A1ABEDC08AFAEFAB484948D1DC80E274940
0B4D9A8BEA502B531A95D074A7642D5D06EF94D0D2D096B734CE3721C371C213
B6AFA0E73F91D641F1C153F22C13C33B10A1FF7AE6EB0FBB6D88CBEFD108277C
1B6C547F34B4092E027CDB9142F8031C3357D218276A5D0FA4EADB3616CBBE98
428D5D873799F341D019829AFE863747C1FDC7B38BECE8BB0CDEFDC63493D8B9
EF33711947B65B0C07BB7FE129E072F38C194C67DE0043104AF5E61366D0E9E9
307B6304D12915D1535769B782BE557DE619C17762B43E6BD74D538E4FF8BD62
AE25DE20A0745D88EDAB8F6005B87766998E83E5365136ACF7F9D099F66AA8A0
584CC24CCE6AA3E032167058311EA5B1C174450C668622DB382F54F191E50EEB
CD45D2980B707F79565E09CD5F437BF4593B1BBA2AE03C5A3A6AB1318B2F2208
9D192707B1BA6A2844A96F735507FAC1A256207D61C8C952EC5A30C31B181680
9D481DA1E4DB4B8B2D8A24533B52A79CA47EC3017088C3AEDF88EC4D8F08C318
6F1F9BF30B0005AC00DABB27C6EEBC42B9BE16EFE8FA129BC685BCA6B4D9F21E
06AB415F4462B7D0BB2376BC147AF6D55F2657DBC9301FDA0D292668CF919E30
133211CE5C7D2FE7AF767FB680AEEEF088D2BA31CE3F54C70410D16CD38B3C0D
8897FA36DB3CDC60A123CB701D55EAFA0F9879660BDCDD2EBF3DE0490BE4BB8A
25369879041A7F548020D1E3923FF7CA111DCEF22BFDAAE0A7FA0303A0269B0B
F57057B95A15D3B8F74B1D3101578C35ADD0A8D9D4DFC3CEF40136DE44D1DD09
56C1362CA7676F0E037CF8CD345A102333C67F1ADE0BF892F79B30340EAD8532
6BDCA8D0D1EA25C291CCED6B43B67052CD04D314D991D286DD7BC14D5A7A87D0
04F59B8EBE03E1147E9D36045A1E8EAE967B6738797AFCF77E5C4A3292CDAED9
3092097015E0C4F622C4B5080B76BAA2635F36341374A485BE3CBF2F82115761
62D806F8F5A1C1D17394F524CE9ABCE9B5DFD6E935B1D43771DF39AAD3E87F92
E71EAFD3121D857793F033E18F604C6AE3B800626CECFEE6ECB6AD565E77920B
D3FF425821DAAABE904A98B0953A98326A173A243C61FFC3830922DD30578D30
DF7582E296838D7DD1CCD7A89F9D218170F4E5C798B45D6826F49C36CAFDFE84
99EF2D42B46B5FE143136C37C78D7E26BB9233D4CDE927F97E513255CB46F8BF
DF52CAFAC8D1D15CD9791656F68FAA1F1383DBA895395D6B20432A3F66DE2697
E5D4C1B7BE36C8EB9E2FADD79234CA9D0FB6BDD1FC708638346AF8F99EE92640
2C7B0B0B28BB843AC330EE4DE3BBB3BD6D1D4026549015C503686379B23B52A5
49C48F775279E1ADDE1D278201E415CAD59624BD9A18C85C14E2DB6F1FBF31AB
F448C9261B75BF1EB61260DEF867D4904EBBD089B189203DF723F44B7870557B
23B9DE4DE1642416405BCCE8D41818D663AFDC9CD1C81B9A1B327257D9BEB1BC
43CE626586FD77921C79F575F41E311B641EDE7B07C21A7FD2CE803A205B482B
03F2D2DAAF413DD3DC1787AB924A6028F1147DA54DB76029CE44873FF17704C4
D368DDE2B930D4CFBEB9FD050A529CD6732467BF89E8EAC7A4865824BD356EA9
D1B6E077C95360CE30E12507BEFFD3C64C38EC16B2DD29830E2C994EBA7BFA66
9EBE226C968C3BDD512B9F5D28DFC2DB7E855079941919118817DCEA5BF323F6
7EF19870CEC1FD5B41F648DF10D79CE3320B23F51458B058A12DBCEA04A67F07
283B88142E7AA1957FBFCA8A2CFE5DADB41F2ACE750BDB5D51EDEAEB668FBE25
3CBC6ECF46A147B42841933790150AD638555713A382BA8306B820F11700BEFF
0D07544AA627F92472AF1A5715A88FAB1C999BD8C391F4F045EE1155E8E9933D
BD3F8A82802EFB8FBD6FD2D9F982701798DEAD16D0A49F5BC96B818D8BF7FC53
E52A18A6A8FF54CAD873A468D74F414484DCCDB235EFA0168F2B8CA0CF190BB8
48DB75AE218037ADF8EDF8F889696EE83158CFED88392B8C997509157E4D9109
AA3747B3F047412F2204092DC27DA9A3C94312A223857832054281187DBBD391
AFC6E5FF84D02FBCEDF0F2A5D79632DA32F81306474313C3DA64B8B5CD55CB4D
818AD307465FFAC80C633812276F8DAEB33CBB846CEE191EA7831C469440C75A
4BA68E3463CF129FEFC0A3D8978F498BEB42C3BB330554AF89BCF95EC1FC5129
F798D489EA760AAA2B4A55D3150B910E7B563D7749164BCCFB3B7C18F3A1F1D7
3DBE0BCB52F24CFF47277B229AC683B98C8BE3C475DD1D5E06753AD5DCEC8A1D
50EFFB808621483AB1F4AB2FA138EFB50B41BF9130726839117338627E1A393D
F34AD7772DAC67BEBB9CB1D5F93915D9E0C07831443F18F8BFEC4EB329341351
F398CA5DE07608C0D145D9258177A2F569DBE1328F3681748873F33D64B53B6B
0CA59C38D8A3BA89A6E5B70C0CD5A88CAE21AE36BCD65E1C4C08F77F2077B331
E03C102F22476517D3627AE09C9BD4B69092DFFE8F722CBC94AD91920A101294
ECE75FF3E09EBC38FCFE2DE44EF169725ADB63F35AB6A2D551B9B7F7435B508C
0FB63B6F6E5679D2432045BCBDFC358DBAE0719ACE9F56B1616DF43FA9288539
01C76B846535939358D6798087B573DD951D3AAD05E9141A42BF9AC65355FFC1
D65E50905E3FD77AAB7FAA1B549E88CDE416F16C0EDD1AFB8FCF1FE58147E9D4
1E0BAB62411DF255B5384B3F39A9CDDE0F1EC048DDE738CC0938C5C7367D6B8F
8865F0B1E6A5B591174692B5513CCCA30EAC8D913FFC1CE67055B92039431DD1
0EAA212A77CDC0DC66915E22117070491F9491069F35D5A12BC322078AE99865
371E55686277D14FCD40C37B2439C06FDFDABF5E6119349E226FC5584B9F3B49
AB28BDEBF1319F3AAA4DFF4EAFC90D9DEE76C17FBBBA409F50104759BEA0F7D0
2077CE8B426F5A7D1A0693196EB0D9799A00F108F6848978EB1585DCDD2FD6E0
B21D7ED6E5A6350C4349B6ABC5072FAAB20BABAE47D513023341F189E2659166
ED44A40B65CF4E2FB2E43A3102BCFE58A6BABF2EDB859D4DEC9CF8E8D7015525
7FF8C847BAC9AC2BAE347E0404CC0B1614AFABECC64B3F108AF877A1629D89E6
ACB73C3AC418E42D1654C6E9F2BDD2D5A7630325608E8BE332B3708F1EA828DC
21A4E33DF29F1CCF92BAFB35521B1FF4CEEFE05A593441648DEC39408DDB70B4
84BA874AD776D5E3064BB81E60C345522109859B03FCEDCC7650A81FB835EF7C
D4F93ABE913BD6C25C66526D303C59A25C2939F50E7B46695DD069C0781686C6
1CD00F547E1A89AA9994F2B7011039D73AB870C58D68D00A437F35AB4C545DEE
3303644978555088A101B9AFF0EA25B39CD927968771EDC9EF952A81E23ADECD
E18C9EFEC072030FC9F06E92BAD21A1EEE634399A52C9EF8AE8448BBC999CB5D
6E50BF082CE6FF056175D00684EF36497839C8A766136EC7C0B54A36E4C5BE13
767C38673B4BDD89533AE3FAA88E3C2831CD4BAA5F86986247A575CF70124E9F
0308DF6599197767EA8A83946D49AEE8FB5E28D646532EE7DA64C0DE5495DD92
8364F5CC34C891A8CB5976450003FE72C4D5B371CA54AD912B0E78F1213CC2F4
5596F5C4D6C1ABDAA045DA3494EDD65FA5C735EDC975CEC47F95848DAF548C2C
1E6C4C20FC0C4A91B9F34006745CC91D0C1B1A906F6B3995976FD8A57142EF1D
3392FEB09A800DDFAE0BE5C8B07B9ED0896E392A713CDDE91D395A7CC89CAEE8
2FCEF35D84025BF4BBEA39E8B8E810E84AC4803BA237EFAAE13064EF31CE635C
97CB3E013D5EB5808F64802FFCBE382E2A4AA23028EBB2AB795B113F7BCC2CAF
FA092EBEC2E9604982CDAC16A9712F3A68BE1CC4B35B6E8B93FAF64130546C54
D2E591808EF9D381CB388A15FFDF26C0685B03F604B930772A4D52CF1E348022
9AE08409D9503DD3A3DC42C9107CA0BAC50A027BB01514BD9E6F9F75B524F1A0
64F5474731EBA0B687076CCD143239793D0976A5B2CAC668D4D0759AC9F82277
403C5DCEFC2B0E5AE5681A99559451496988B1682D6B23ACE310E91131118955
D3C26BDF7A0FF8FFA29F8046C929210BD2FD14B5FE7A5EFD43BAA7D48BCB87B1
BBECEB0B630D6FE0E2A64869B9F4ED56C6C5CFA68B814B94B7BE0A5F23C4893D
A3C710044C03A37A680D1F806296BBF942428B09E24FD31DBEEC75234E4ABD28
D403F75CC1E5A6817C146C6E6867AC612C4A7BA39FAD5682A4E34AB38324115B
75CE12B7531AC67791D0E6842693642532E9F0DFAC150DF8D6B0D502750247BB
25006F466250647F37A368E6A291FA8947D12382B17FDCEBBC82F61E5EF76E87
96A1DFCBF1CC2B737C0219CCBAF02A248C68FE46365ED9388829B98D35736FD2
CCBB0E36AEB6643C283A61B6EAC74E1A49931E22563699D4270B089C6F91831C
C4E379937C53FE85F8C56A14109EC81E903522047C2CD466CC95DC626F7A1363
DB3004BFD229E6A1E22554AF326DDB4E738AC92E29737ACAD5B256A95A961B1E
A3EA711CE9F9447905A91173BC23B3D1657C9E8DCBDAB522E1F4AF4D92D65A0A
2DEF5563A9EBEC3B5A1BDE88057173C031F324112E7D266EF13D18FE4670DBC1
A8E3BB231F9B2841A9A65A8CC12079C24C649478843833534B15A83436BDF7A9
15590C8C5A147E34341E158CAA3AB1B6C57368F0699E8020FB501C223F493D0F
A587209565FAEEC1CD3C6BDD86894235D7DBFC11532518F8D8695AE74DFBB310
7574710C0678EEF70A0C57A8D87EFAFB4289EC577E7CA27E88743D7EE30E15C1
651991A6A9CD12066878AEE74C14BC6589B20A16C2E1CE69B430C9E868EBEEAA
1A585CABB230D76693C8E5802D2FBD34ADBC0D48CE7D3314E3736958AD160737
94C893B9CE977F7FBF95D2C47D26644619A4EE1A5CA99AD4D51FF975CD8ADBE4
7F6AB61FF45781397E9BD4BA26E2B8960CF88D9EB312118BFF5C950778E209CA
3023378B9EB6CA3763F99C29C798D1A98E5B2712D6F84E63A541739B3F161891
F0FEF72180DCE2D6B5553FF74AB96D945E03C1BE540BDE98F8FA2ADB2CF22304
52D3C09C48A0F14996DEB19058841D9821D7F9DCBE58B496511D2E03F6BD356B
A8109DBAF905F366E3B07C907AEBA188421F423B505F1673164F283B43472435
CB677B7572E854BD33A94202D9B13974102B6FFBD4E372B3B820A07D9B46AC55
09B97AD6BB97B1153557682F6EF3F7F284C0D81A912ED19CFF73C1F4781BE027
D66539C5687DFC8B37F1A2AAE2AC9C4310AC8830F245287BABD8CF9DC4853547
0DC214DE7E4DB1FE4316DBB4B6AEA0991D493F9DE711B772A40EC014ADC4AD8F
D2544451A3915F0C0FC5AF17F260BCB9978BA3E819491BD0328614D9D521BB80
9953660C326940D5F5689E62542173F79B5D91C1CAF67E61CE19001751BA2721
CC864497340C9F20F179254E5C41252258C73459690663A422158043BEB6A682
050366C161F11892580F36D2596924D75E9F4E5A8CB57208C675B566A0D996BC
A4B9478A18FB554A274DDDD22186416747F885A91351C0C8B94717521951246E
265143BA1056D9C648EC5361CE6D84BDEE22B23AB63819BF6541E7AC33B6556E
412DE320530D1C34A0B559E9D03E3FC93FE91CFF26875BC7B63A4449B8F78437
38D85D714467A635F8056314BEE24AD3EE21179FDFFF655ECA86DD6FCD786926
71155DCC8C6CAC3BB5C9CB30E9BAD230CDC7BD9CB5B1E1E72447E5333AA4CF85
8DD5BB0957EB25E7B84591DCAA43D08D7933414A933DF2B1AFD23C177E6E7E9B
CDAFB23694FFC0CDDDFB5490779F35CAE5A465C6A4709F29773DC74F4FC13526
1866F9B8B3C6AE79E4280EA416C55E54226CF42CFB02E5933C0625142C335DAC
9F34F1BEEF73AB4FE080C6E5BCA930CAE4AB313FB121E2E5AACC0CA2117BA13F
7D76ECE3E4EC2A9E005F5399120190F3406358B302DA747B08208D6325929C53
58F7935DA5B807F36AD5F0448B7BC8E9328602215C8BA4DFA1E7DB6591267E23
93A9AC6764CD6F594E651086384C4F0C475623C912D509835EE2E48156175150
71F690FB6F900D6F83728175FD17D042F8FE5B3DE356D62754142B0756DD5606
34345B4334EF1145D488434287B19549C13155792B5F6BCAD7EDD597E5657F55
4C602BBB8B9B84C9BE4B53988852265E27D64D4FC1B6F0FC199542AF20DB4125
8B8DFE94371DB10E97C5C01D94675AA6E2C6E4CE9272604AAEF008EFED8476E3
D79B53450AFEB4989A33A4A9FE089BF9B0C16328F899578C67387853297C2DBB
9030710FDF13D114416AB3DA0096D5BD57D23639B1ABDBCA2676E00FE4857DA0
9BE5E56DC6360CAE6712B1F95CF56FA14CC2242F7B6602FA94A8FECA299354D1
B28283350A5ECCC8700AC14A71179DCF532AD3D37CFDC508C4B0AEEF3D755358
086ADDC2C3F4110A173393A746910BA21C3D3064DBCF332957F69B7602F6CD08
1FF6B647FCAEA6BE6C76FCACA63E2E2E958F266314403D0D97E90A139F9FC03B
D621AA8B680C779247ADA5E1C9853DFB57F8577F842684082A6ABBC6F62F6102
7E7FE855633D7EBCE377A23E2DDC3085FA9B07DA71031E1E5ED984E985CD5BFA
2B3D6D059C93F11F924B6F0B44241320A9473B650F5F475825230BF46917922D
05EF756715732C58EAF883C85368411FF080E16A07BF42446A86EA7AA900C629
81110CE7EF4491B246A2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB03DBB65661FD48D
5E16DA2E1FDA727A13AA52DC9F2827BAC1ABE9135E5FF8F322DCFDC3AD492EC2
E938F27CA41A26E44E7E264E1D3304B68A5E5B13FA0E2C36D1BC7D0CC690D105
D3EE27FC27E2337EBF82BC30EB08B9D150900EC9C57B38834DF8ADB373CBCFDA
AAE5494EAF576231F91345BEBA6ACB55D71A535C90C33A846F2663B5445A2A3A
9166B80818F6C1C6315FDD85228D0313BE7D3D4B6919AAB1D5E606F44C60B792
84F67C4AABE257DF33B4EDBE4DD888AB006B1907E24A39D02878AD7EB271FA1E
C039EE7178EF77F80D59A40F6A2A7F7ADC3BB1F9D9B22BE5A2E22002F0206D6E
47AB178CE72CCEAA9F816A55544AE841FD08C8B001B4365100BB79253FCD09AF
E15B7C4C75C0C00F4549D250A8D8D0B82FBFDED75739A29DDAD519705EC0C3A4
25F84078E97512C13EEFEC631D2B1F265ABC4F71643449475261A75A8C17EE6E
339E5C3279B78C4BF98B23BA5E8FCD80D6A406BA3A705E8B1275BA8E9E8205C6
155EAF3633CB439446AF333242F316A00A621DBCBB84ED80EB0F10ECF433D4C9
901B0A5D2888B29FC66B4FC576AEFE70105DFA58305BFB1B83CFFC76259E2586
0A372E417C1865E2E3FBAD3BBC137FD522CEEC5B7CA9ECFB1E78EBBC6C56A8E4
48153895A30B4A82AF5946F8BC31643A74F5D36BD724808357D4FD1813801BFD
FD760B0F05CB4E8623072F9884ED79A75221D2A3772869EF6FFEDFCD9C2CEA3A
186DFAC1138901391308AD353502AD3EA9660E33D4589CDB05E48EE2564259E0
3DDBEDFCFBEEB35AD055FA06D20693B88721E5EF326085013459865498DFAE85
A17838CAB6C86BEEB5C5F9F025F0FE2A069914903C74B2EA642EFE67E03DEC81
05701D74E8B2860B118C8B20D0E508C6BE908DA1DA339D66E56DD1ABD23AB236
BFEABDCD1A36C3A3C3F213DD31EB4E2BF4BF01A9580D0F0800921140DAC0F9C3
48EA2B5DE623338326FCED59380E334AAAEE6D7A1161558E0103D69F95627A6E
456099191DA14F1ECCC59E7EC7C5C5CEBAAB9D2B1C47F6E34CB9B2D4B34136FD
F936F96FFC813FE16DA5F79B0F2B32C464A5EB0BB4F2C8AE029BD1172B430088
B5786E7AC155B8679004B35D754A18A615A3D23ACD78645D8E711270D61C8ACB
19DD62AEA40B0E23678322EBA231B48573C5BADD2EE20443E0153D406453CDA3
F1F15B370BCE1B20E379D68E69989000DD7B0A0F8D3ECD9BC82DF2E22254DB51
80EEA8A6CE823431E43B9E6BCBD0E885E4A31E174DA933847D3ABA982D56AD33
3C1E3EB860C295991CB992A3F534A9E0D53B54A745A9133782330BD5D9F22A46
3B001DE70A433C893FD5501508F37309526DF175DC62BA3C4724FAA09E11A2BB
9F9154A5AC44C53DA909D7328D8619C0EE9994C7008387546F0857BE0B5F1416
478EB58CA6B839D3F9830B6007FD174CA119EF313088FD1130AD9DDE88D57021
C3AC99C1795D03196BC776AE64ED2C2A6F111DC0E34D3D1D03E9A3CD593DFDF0
E8A27E608DA36E59F2A4DB698C9484AFF6873BEED3F9698D71B91903E04F1EB4
A934E031EBCBBD0149BC29394CC083B40625E8DDA165A6835C941042BA30EB7B
94FC6FB40AE406BD4AD8C024312CA552954FD646D2861FC829D94FD8F4EDE021
E28EC6607121968A58F529981F9A0854B9E3540A3246CA0450EADE171D6F8C4A
773E6776A8807D44B7988D037B3AA50E7BA69A8F156E0708FC12DAA800AF2957
442302D6FF1184E9A060875F7D29782269B48B85BF259FCB0ABC06AA351899D1
F9A0BF459F754BF5244E9D6D2B266FB7345BA5C09D1328CCB4CE026622460A1E
FD5A50F83C296A60B047672EAE40F0E80F7C388EFF377861996DCA342685BB78
F9A9BC0FB71731D894B10277C510CA28AB901476936E72E7BEF230F45F398BF2
6FE0D0B2843C153E80310EE2DD1D32215A10E6E6B93D5F5443915D00E467A799
253161B3FE9740C6D9FF8DBAE4903DCCC630DA0C8D6E8F1F69640AD6A2FFAB34
72BA04C62FB350D208B4463CBF2147DD3C1FA731E3F8AEAEECC7288D113FEB26
F5D34D728AEC70B9A29825E5BC689F7AD6B6E5D89D9156DA431227EBDE43C59E
2F387F40B3665038188C4FFCD66ECFB22FD54E85136C8DD05740E69504AB1315
622FAA42080286B24A9D71498A2916659F119ABE11E5BF52E862908B3B19D497
FD232C6DD9738A350A2F6EA5FDFEC1009690C5FA6629C517D56C9A25C7096689
6C90BB3CE15E5AA47898560ED80F8F7DDFBC965018949FD9BF643106C3D7F3AA
612E0FDDA6ED16BF1A0A0ECAA2D7D965141848BFC3F91502FD8CF7686D713E75
22EB8D9079F3E98F41D1D608228C0921C23573BE2240F803672EF0AC1A4F04D7
BAA8DB8DE9804387C04EA79BDB72B0D2AF645AAFB3EA13A9722398DF710A00EB
561A0A23231EFF8933892FF779B739C2BB080F1D8B78BEC7CD679ECA55020F48
0872050F01733ED6EE7183F760A4375DF49A6F887C55587208EDE6623D4A2BB0
119AE0941A9CF736B9A63F8D66306630846B5D6CBB548FD2D833755511D8FB65
A4B85073FA7C70A3FD3F1508DCBB9F3145E54E1DCA47451CC8919DFF187A589F
11E89869BE34F9C838C5D6E0759370339A0297AC32017884DF605D752B706D85
8CFD235685341F8D7877A87084A763690FA7D1D55FA245994549DCD60CB7B233
81394981B466F64C52F017B28CA426A7D49472EA7925D0D427004E2A785D667E
0AF18066F251707195E3C88E4DA41A68F923AC1155077BF8897BD6B6C97A25E2
343F1841A4D7DE8D0DAB0C62C253326CCDDFC28FC16B1078568D511D9E0F53A5
FC0332422DDE6403515B80C003EC3A1B09E298AFFEB88D6A1CD36FCD0D882273
E8A81471D33D18BCD9E397C8CDFA1FF119FE6C3CC37B443C27A432C9F32FCC06
2068D50325B5A0051EC8F750B8B00BC21B9D6C17340989ADDBDEF90C96929E1B
4ABD4A27C6E6F6D18A70D2F1662CD0628158943FAE1A9F7D3CC8A25E7C127029
46A34CF8BB86F07B85B067039A42F68D7BCD3F5A3E7607620035CF0BD708E71F
43F5722BD715DF2C18BA4451018E0FB0EB3C625259B0B064954613D4BD77BA4E
B44FA78D964420D378703FFB2437D303615B177C5AB8EBC973CD8DC58306B50B
593046DB5B2D837595F45F20D9A6D282DD042625B9779D30183AE4590BA34D49
3B526D2FEA1DF5DEFC79BA53A0F298003F9F79C69196823520981D83CB62222B
79B1D1685E965DB6871E70DC1DC83A6DAB267C1D0C656CF2D3576B0807B0B5CD
76CE96FAE27F46904C53242DBD0AD7F30EC1DF5B91996D6D22F4558459A8F4C7
BA64926BAC4E648A742DFE9345C991DF4492CFF19BE31AD5366B5607A5BDAEC2
033D77840831AF54DA4BEA83F0986EA7972E5577FC1C5036EB454C8F67BF1322
406FF0DC07AAA22111578650E9B6EA14BA2BE5C70CEB1757E191DA795F5F6B94
193B81D179F4A49AA2B2BA7E0AB2D096985B59588AC7E7688BE795BA60D895E6
5CD1B5C91B6D4C6867C18161CCCD948D54A1FEA28A5F7A8B059A58FA556EF330
8146AF5486A7AB03ECCC79A950BDD2B6F554D47CD940E48BEE992EE0EDC47A40
EA032F272692F29FA446CB320EF9E2B9808FBF49284BB99EEC6832110365BC46
800FA77D112A5B031A5783CE0BC138FD0CE019D8AE25A4692D178968F12AAABF
E5552449FFB799BD12AB5168A545321B21DC2FBD63A11F9CBFDACCD5DEB50600
2D62AD75F0945D48F8DD69EE48DD2DAA5898E55DD54AA6E700A1CE8C185A9D11
725B143F935D3F4FFDB31FDC40C05D38F018C0D58E767B0102669CB93FAD2134
46927A539492EE440A99E413617E745B66E31908E90AC92E1B0CC8FA75944C00
7C4149DD8D961936D93A5B632AC01D0DDF966727D1C8211E3A3000E71AF0C897
63691D128061C67ABFE8CCD3F6A21C5A0CF54DA689745B877D7ACCD7F76F91C1
F91EF913AAECD09865679DE5E7CDFD746B9611CFF2D60F8105103B2E4D023F31
2FB8069A59AA85720839AD6ABE1A0B43184BB79D88C960053AD6CA70924602E5
3DD9BFD2DAC29A0339A42F6A342FAFA1F45B11D42E21FB229C2226462B3E4BCB
F2126DC2EA825AD9AFAA83F37FD4D440C86FA99697367D03DB34C8C4305F4274
28E4BE40EDA44718B7FDF081CFDE9CC125AC401A0E09B5B66A4C032D0FD251B7
C58513F009689488DF613BFF936B7211EA57539777F7F8A391267D19EB0976D2
1E0B290F4767CC57E51336AC9D5B1E889A180F1437EBCBE0AF86938881CC66D5
3F73542D297EC7E861107B1BBDC7AD60507807E9216C8B2296246C48FA042237
7F688769231FD5E417F4143C554C6CEB5E5B59CF2281A4B1100276D40C3110C4
3524765A57C1C3217F18A6621663F23AF24F44BA5C5FA57960BE2FDE3CBE479B
DBC145CB39FAC4655EB74ACA1262F83AC8C9D6C4DECDCFD2B6FD88EA3BC4A474
BA19F3AFCC102A1675F9914CE626DA6431204C74CBB662283EA734B880BA7173
C589DA6156B9860ECC1EE9D29DFA66CE184562603F7B03B0C29A6665AA6064C8
DDA097487B97C8CA524C60CDBC3A9F86DFD02B5F0678DC86364821639F9FF9D1
B29CA0D838000406D1C9E5F430BF5314B6731BE0B8824D2C9D5B6CBFF1A9034F
403801060350FD4F8AADCD73CB08A376CB8E95E4248C4A1BFDD7DA279097919A
2254314FCF21D618A11C8FE5DD420DB58184D56DEFCA7213829FCEAC430A54AA
B1CEC7BD070A91E0E3FDF6589A34F8599566F61D53D78C286539F9BF11DA75BD
2522D53162BA21E584BE474888680E7C90DC710C4909D50036BB8CEC57664218
15BD11A29E4F5378B00283F43C55605847ECC0FD7789985376BE304012384CFC
BA0E0C73FF2F9658531A308785646B5CED0623606D46F4B4E8EEF169B785AB33
B54E814C13706AFDA1D383F306ED42A31C12817DFCA77DAF67285284FEBC7967
4BB9E69279B86DC4C054716AF0F15640CB97B6668B4EA1D587F68B6894B08FDB
B54C2C40E25FA35617679BE8240D69E1A49228B39A6604E6901F87BC78668267
C26960D7C0ED0B7458D6E3381C01605FC52AEC72D430CB4783FCE82134AA35AE
D8C046966CEF4CD28DB24BBBE788FD518A6B4DD0A6D87EE94E783D9B3A2F97C8
3025DD7225AE624E618EB7D296FDFB7367471430E8EA9D26A418301A046FB643
075C756A0BAE281385A3D821F31929FCBB7838A66DA2890FB3B600E8FCAA282A
29227EB20226923246498DF79B13E62E040FC3440274AD11ADFC43DF9A0143E2
EC5F7791D39C5A5FAF4A11F01101EC7D0607D31420261A0ACB34ECC65BCBB397
CE31C0B14CFD51C41644654A57332A905B9B77B25FF6C7A61407901770415E04
0793AC0997C6F824A91F02E5AEFEF08233B9A453BB50F99F03855C2D60F4D0BE
313AF0B6156C424796159DD4332FAB42253DA38F8096C24681C30F9DC21D9744
00A8C2642147D4B652A8F1A7EAAD6334C742685421CE3D57B9784DE4B5CA81DC
BE03C0FDC77F71453796044F1B276869708B343DAB5E48C99B15403DF8DDFADD
039C0397D6940F1C8AF4879CEAA37352B93A0F6BA1D5C6324B5CD60C1D6E271B
CA5D2234E3B7B1B1A4796B2BF82FD736DF4F46D711C8C98B5F6E492E6CCD758A
A29B38B23D5F30F749F37805F3958422048C45B5F86C88DC2C93F8A23E0348EC
6AB899EFA7636BCEB56F1492793929CC3D4194C3DB9C6A6CD59834A853BBD985
B34755F069B7326466D2D72BE3F525882A033464895EDC87B84D22781E1634E6
500A60AAD8F7A4CE92A253DFE2688F464727BE1C2F56BA101C7484BD5A8081F8
C5CB32AB3A8EC5E9913505DAD2B07E1DAF7E6AEC566D83AA9BC41826C94238C6
0E84692B9CFCF0AFF8FFBFEE473E583AA97C8DB40B5CC9E809341BF5E55CFF71
AA87A7222594D963206BE300F58905ECC8155BF6E2D4AD41CE32EEB4F39B4AE9
2A79516C291735DDC093D39D5361B2874B1975C2539DD7FD5A697BDD16841FA7
F66EA1BCE610A1D75EC0038478DA98A23F565B7C702542DCC4F62D28B5545444
6AA3C68AB709D22B3F1223EBFE22F823AFAC1A9A7F034C99A3C64BED64FFDDC6
83B50FDD0DB96AC4BD033BFE2682C9337440C3659A8ADA7B737A6F83D4256A71
B0405711DACEB17DAA11CD30B66600C40C0AF53947E30D73E925785191B84366
059A170C6170432DA902F904160FD933AAF7FFE70D4ADC3831228CF1A187772C
19F559CFD559D041610ED277408DB6870EA1049DEF7D5B3DEE7418117EC10F93
66BD4A473DA24F182022FA689A9251A16BDE1ED832CB34DB60A49D3A4D76E0DE
A68C5A01E6EA782F8FE4E48794F75B4CE30BAFDF4D8C59175B84CB4B3D3CFDFC
9878BA37C1233D32B6A8C11D3DC4559D32A31558EEADD232BF936527C3F6251D
E11B8B5F815032AEDFF3CBFDD9406E4766C83F8A052743EE40BCA174B5CC9029
769FA1C113BAB6AC38D8E043118CF1325D3CDE7E16731BE07FA021A27EBFA924
A38256D69F03A84D9E9B199843FC92081ACF2464284F5F20D73D72E7855B765A
C37A0D73A9138368968D1FDF8CD283ADE7083A8BD67249DBA9A3A76327BD519B
33C0556C6AC68D8A31E0D96EC8DFC16E97A77FB5760AA686E5461354ABFA8B52
CCF6C82BFE3A364D83D58A180D00722699C0C98E953BFCCBE2DC01FA409B4A05
5214DF69D0A148E75F4813B38F51CAA5B7A8CCF0BB6A7B254FA159335DFCACFE
4EFE49503FF718CEF0E2EA46EE227D7D2F3BBCE0D7C0156B43342F32691855DD
405E20765195DDDC03762FEAE027820741A5C0DA13B710BDA57D5162B033F04C
E17124EA79488AEB984012DB2022571255E105D9D4DA8F3094EE0171AAAAC74E
1B230C43FED872272560156017B2E2CB3DABCE800F61CDF6F47FB4D8D9034DC1
971571A9AAA25114CE2484465A20BC10C3E5AF1CD37EA90A968DE76E0757E724
AFA0F51B8E2B4E03CFA22FC745443F93B1C31C4EC20FC2BE0907294DA1F0CD6E
FB6B32CBF16CDD7736B5209014ACB58A9600D4CA1EA31982D01087DE4D04AE65
A1610F68EF82272F79CD57F56ACAA60C3A169EF90450326EAC4EECDB1B8AFA3C
E22F8B07A8C48FDD4D13338FB67A9377C4781B457EDB416C6F336CA3E96E70D7
A526FB64E9EDD479DE21D3686075BCEAC3E2BBD41E82C1E2B11968ADD6C21DE2
D8F113BDD76497FD980141716917FA95CBCFBE6CB3C85DD022047EFD360C57FB
D728EA77D62DFEBBD8F10E6A6E32F80DBEAF20B2A58387CD51D6D23B3A9D9151
D24FF8AF843C9A2F4110CA2B2291676612C1501AB9309E2D778830B269DB08DE
D764E8FC2E239F816CD3B2D67BE46F3D779006EB631DAF9D830E89664EA62E73
2C4BA52CAE84E769C7684A8A96FE4545BBAEF73162A697698A830D55C94C746C
7F4EF8C2A5A24214F8BC388F6E5C1B7C8DA33835A92E4D1584749251E4464D8D
013E6B4EA8318042E603E8A11C0DA8966FAD25E976CAB8119B2349EB2FAC31D9
224B1A0690A29F5743213E67574A90FD94D8DF5BF98ED7897AB05EF7CD62ED9F
12EA38A3AF65590AE97D8C8D373A635DF7CE13F9168F6C98C0B1E492234E4253
0316CA91804910ED7B65C50060D5CD7E601A6BF46D57B576A3AB64998A45B825
44976EA3997D0EDBD2BA7C8586E942973B8ADC21BA304ABFBFCC505B399EC972
D59920550403FEF3B3F7764DA0655D6695C25AEA4A0CADB5303CD0D839FC4ED4
3F1882F0B6262FA6B9121BB2C946FCDAC777B8AA6D8560DB95B0A2B1F453A6D8
2701E2F30DDD864275C35CCEDEF16C8D4D7BFE189D7436B4C57773CA5FCD9E31
22E613DF73002C979353FD550C5207C4339BF3788C46ADFE76D1E5F8BE2835F3
CEA11A64AE03BBB372298DFC9E138F95118A7F25CD5BB49DB6A29D4C884788F4
3A1DD9BC450230D73CAD76B5135B8CAA9F3EF14991E189101A5493374B3357EF
EEE121749B21520222188861B7C31AEA9D19FABD50B67FF80CEFBE00D9739625
27EB04E1D556F0E30A7C6EA4428A51A6CEC39D369ACC311016E1995EC1250DBC
97146540FD1D838153406BBF80E4C87155BE86002A8E404AE962E27DB198D391
CFA67B0A4AE512AA9A0A857FE87D50D3D1D20C076FDA97A0AEB95FF7F6FD1990
D78D66279A5737AFBD6F4CA01746C8BF532110FC0EA11E09399851CA785D3437
5529FEA11FB77C0B825F038C5F600B6933FCCDA6F82933AE42B15931DDE304F2
498F905D1D74E554B61CC07CBE5032768ECE31BF96302C60195FA1EC25BE4D80
11E948916F683C3A3D871922FF9B20CFBF4C9DD2D9799A04FCB595BC93F7E520
919C9284F519FDC2EB4C53AE8AB259EB719E1FA33D395579B52763401D087C3D
018A825D246B9BBB115DE58500AE8957B0AD0D25ABA60511633DD5954D34EE03
CD37BC5FBE0A3445D6CBC05AAD242C781062280C8B5D346E148C9FC7BEC56914
ADF730F9DA026FB12F798C0625FAB1DEA0D55F11A0674E11C30C0E964B04D7E8
EFB1743165050913614F8E78C1E212980B79B8B311930E868E004E417D816B70
3D41DA6762EE6F462943D5CDAB4FBB239187AE2A66A62A1CFF3ABB2BF4850ACD
7F21522C262CBF1D85A8D2927087853ED76FED2C466A9AE302433EF4C08FDF85
1DE6608BF746E0C71525EC9C6575297768AFE5943DFE1510B83DC85C4C4E886D
3BB51B827F1CFCCD9DC1A379D56F385037E693A1CD3061976104AD66CC75448A
3F1C334E705295D469E24B979DB7A163BFA1098CD1D44BAE1D0D3F47FC383F86
C8D8E7AA4C07F39CCEF6A0304CC43B7F5676C0CA17EA9FD601A8A2CBBAC7D111
5ADF2DE08AF7B31448DFC1C98EE686B4AC3FEC051F28CEE15A5FF871704963F5
1A4AEF8D56EBBBC75F452CC7349D12683C6D610AAB4267EB6D070EE7721D1402
C5E8895E20D821636CA7BF79B5B8C0925EC8BD4AD5940CD3518AF32E5C3204B5
9CCE1CB06363EB36E1D9D46F9F67952116166482CAE5E08BB53FC5E72D3EBC89
0CF088F10DE2078E17FA0A86A5017656773E7A78C4BCE8E5B5EFEB67FEDD0021
5C3E170D67E4537DA0FA7D50712406CA41C2774AF399F6E9B01F7D52069B0D98
16DEBB04E097D8190E80B9F4EB3B50F08C69051E420E378181C85507CF1916C7
D6DA3FF2EFF7DB3731D6B1FEC77CEDB37E12F0638352EA68C7301487AC9EB33A
A6EEC3557A5FCD1482AC6B0A5F7A74B6BF25849BEADBFA0C956505B6DA9281FE
587343EAFA0113FE64CA4EB8D708B2B900F04BAD64809DF7154DE438CC9B0473
50D4E144978CB3DDB524115D20E161F93055C3432CB412BA299FB6769E965882
F7124566BC16EC17989C1052F8E184590223348E583F44B97C63BBF2BB2E9BC1
4F2B0A1D2C5353AD1C60CF859C0F2391FA6B63F2E6A01890368EA8F0D42E7A93
B3421402DA3CDB78AED53F98161464DC5DFD2B460B990E9F602F6E37605D7BE1
D821C67C6D1B7D6DE1806454199A47FC68EA7C574A6A79776A857EFCF4DFC6FF
C26057B1EF1B3C44DC05BF90F7E1C0DC50899D11BE76EC06E70AC618F59BB20B
7D268041C60CBC8641FEFC5BC425FFEA7B42467B373760BC57A72FAA1CD06877
7D347A8B663674CB0D1472445EDC8B761635A25AB894750A1AB4297725F8B509
22247D81A69837ED9404D7C2039816785923EC6F9437C9EF0EB983125CD8B111
7596E6FFDF4E24A9588A87444532769CDE9A96856F620850D625FE73C56DC4CD
94F41B52945FC6ABCF3E4DFD50F4BAD2FEC8A77A98583C55F49AF5AD492EC2E9
38F27CB30DB76B79997C4288AA1C8CDAAE21E053F32A9C648004E49FC043D15A
10125A7054E79CDB1726E27E632AB6BC87271B5DC4615D289B1AC0135F0F4E5F
B7031F691BDA8D846AD44A267B9F6ADABFD96E5F33538FE9AE67455F421F35EB
45FBB288A29CC45F497950D802BE5222DD5EFE420C7368C5E7328C070FA8FE2A
FD3D6C9E852E4FEC3BE94E47EE02DD31999AFA42E57CA1F3F0DC037CC277EC2F
AB34A2718AD96625952E5431C06D2C1CEE4C071B7AFC4EA775F0D305BE355076
4EF93B4E77769007C7BA4E7B615055165BF75291EF6E74795232999432CE8E3A
D8DB10AAF6AEB3FF141695EE47260A1A82EDC3B0FB0600206F5C1DFFE78F9FB4
B79A06680D81C64C56F59C9CC55279D18F5FC90B50FF3088027770565CE44095
1016B37571F52EEBB72AEBB3BC9F3C72022E5EA54632A1474B5C07B02C711B06
08180D273CDA746BA5AEA5F1A0C19BC7C0F4C7A421734301813921B971F6B6E7
B41DE98B4C0BAC128B7D4D61C2AA87093F0D9188350856B1F6F79D200E2BB4A8
AA530ADF5EEB2DA9FB58AB9830965B9EF166C33ADE345C6AB91921B93E226983
28AB963EACD14C6094E8419F8391DE31E8C02450EEF602768A32A96813F16B44
5B873CBA2B9DC3623AF7619795631DCA272A63D56BAE0BF64D38E564EAA957AA
BD0BBD37AD9771FF52D9B99EFF6E2AC36895C02494F1D1E7FD1C8E5B261706FE
5DA56E84A1947299D5B636ACE7B2E2E72384902D1438E9C14862F5B9D7E21887
7590C769C117CCDC503DD3A3DC42C9107CA0BAC50A027BB01514BD9E6707D12E
824D1F9E7004CAED6DBA20F6A900EC119A9095AA880E5F0AFAB2498FE1D79954
BD53619CA37601FFDAE35BF9C6B42EA671743480E6A45FEA0456295803399BDA
D55B8CC6FE268840400BDEC78CB30A2F939E9175E131B4CC1AA1F4E87F1F184F
6819F4D26416C3F9BAF3E355C3F6D99AE73789CA43DDD61AFD0A6C1ABC42F119
E98C022ADC8E75DD413871CAAB11C9262D553D7CB136506107E1EA0897B4F8DF
63107CA946BF97F48184A0C28C822CBE46B808969D5297401F7ECC7509B43994
0207D85FF6581D93BB225684B50FC56691BB3A1D226C2E0033688D90A399CBD7
92FE3855F316DC33187662B519FAF615BE6C7B997D66D0491D2D29410B9129E7
D9438493FA21A3DC25DEE1FCF529A726BF39D2C3956923C9516F2BB69B1F6CAA
C21DB33EC962F1ECC629A17F5ABE0C56DECB400809AEA55041FD2603281EFAA4
908EA2FA9EAC0C33188185385198140AED45908D3FF52E73696F7E79828EAFE1
F39B30DBCD29259E9D074AF29AD2F5EC1A124CDA5D57430725B83121E5387B42
996D67FC13722B9D3846EFF006022789CC4AB83076A9410F1488CA368772C106
0579C365A90272B061A2B6D8F8EAF870394215800375E7B4800960719504ADAC
6DCE246A6C014572C88AD0ADE3550B92B6384DA08B68A44D93B849F37C9CC40C
100BCA8FC822870F78CDB4E5A2D33572B2FD5CB4E76935B6D28984C9FE8D19A9
80F248D587FB9AC00D902F219CF578269262CBAA6E084AEB2DB4AA8DB9F0C614
DF3EC90D4FDD84505FAF78D66B6E7E3C93A4B017741CD9D47218971819C58624
B38CACDB59F71B142C993321B6849FBD9BDF775876F92B95ECCF029A6B1831D2
3D3FC460F850DBFB1A60599AC72D585295BA9DF8CEFDC0FA2A5E9BB38CAD65F7
6F59F5E7FB30446111D4B36EE2ABC165984D2235B7100C08AF6298BB8C2A6692
B9B34158AF8AE1F8DAFBAD0A85BD0A615B1B8F9B04215F01DE9B8BD2E24C040F
1FABDA452C418ED3F119746FA84732E8A64E5C303B231F95482605DED707FA17
794952DCDD7FB4ADE942DD76DE08688D06421E9F86417A06AD984B9DDA4569FD
7C9DC666AFBF239BB0AB604DC764CD89ECAB5D77646CD8356A56793180AA86D0
60BA370A199A2A590F40CA88E652B2BCFF05D4B162CD558ECBF74C03AFC09E8A
A87B2DF05DC0B7EE021FEF16B633D727B0754E34CBB424037DEF18D5D1D54ADC
134E7B58C518FC964BA4D7C11740CD6539A333B2803FEBDBDE20076F81C2A325
0939639D9BA1140336BCB5856AB99C75197AAA56BFE619480A3E9388CA5D7135
1DCD880E4FEE18065F4055ECCB6E3022F774FE6A54096390223ECAF3BB96515E
87FC36485599544FAF6549E7F9214DD0B56AE620B2A3919869228C04F512DA07
E4DA28EA1E015850D679540BB9B98D1376DAD9A862181C338F4AE8A2F23BD06E
CB241814C4AC7FD4F7DAE230CB07B50CC2D5BDC30F07AD09C439797D92E1BD0C
C495099B9110D0F5A317EFBA2793329EBF94E8F3753A954072436EDF606163E9
C522191C3CD511DC85496F34C2E6BA07662A20B740ECFE30BAE5B059088A1AAC
BD41660A8BA96B955EC2BBA41FBF7D9DA8604D951D559346EC5E20DCC8F98BA2
D4F7F2E95B1C71AB93854FBF90CE4A622584644DB0D29B043572DBD0D5A8E2B0
38B94AF91D05D861D7AB5C1348247CF756FA6FE7ED592B8F14688675D86D9F7C
1E986C8167946BADE17B6004BBD58D81DBCEEFEECB886BDB8883DE84A5787BB6
100F4158D197E0518099278E22EB43075AD5272F339A9754C08A4ECCD165B75B
75B1AC41CE86C2AC265E2D1B22DEE6D1FE8DA5531461F32BFE252CF0305D7CC9
249F9DB7DEB33FFBD8D3AED32FB1FFB3B9D8C4CA77DAF2CA849B35218054679F
1561582DD209BBE0A40BB89CF9F7F4BC951DD7D5A55211F2DFE95C9E707CECB8
8AD9B38FFE6D932CD4F83D0689664EA62E732C4B43D8D896ABC92974486779E5
7ED37EAA93FB34F5DFB307B9056BE0E6B22A79E526DFFCB2B06F4331976DA37E
B583AE9836976AD59F590F7C618F05A2CF586CBF97B5518E3D70D857B9106734
70E2B7EE070306B9F0FBD81A24EF175A6EF84D9A4AF4895A7D9659C64590E407
C2CA961F03D12F9EEDA0BD65E7EA02DE944FA62BC5B3FB8EC4184E9CAD122155
C01F715302C92EAD1FD47F6C68E30E0CF9BE91B8C32FBB816749B8699A32DF90
FAA864BB1F56280842CD773BE26C1323AA513F07DA05FA0ECCEB05ABFD203CCE
673ECA1971102BC0B5D3C1FAB05858E32F8AEA71845223877FE1BB7E9B4725BB
9198B3AE8035D8C520681CC63EEE8D8ADA5D0A48DEAAA63DC1ADB726C506528D
FA24806C127C84313D1A8BBC26BC4E4CF86631EE73EAF3BE24E4B2DF71826B04
094660AD0AF0BACD3CEEDB8E03A1FAA95E92398364675257F65BF8FBEB79D97E
348D049BED0F098F066B55E96866241A803DFFFE1FD248589D72ABC692B89AF0
89478B86262065F37FAFE179F5D1033B3610CF859B437255386A71842B5204C1
5311FC5B9B7BB5227B2850884D2061B52C61B7ED7285A067C62CD2F511D36549
318560D2C00ECAE645AB31750C072C1E95F06D557A17F43616479ADCD9B23365
87ABA20F3F3F355E73CDD0689249783E78B5A3C5AAAF852365323B53BECFC1D2
AB14568F856F5FF7F780B7E6834DA0955D38D9DBE250D5A8BD5BEBE85F31C477
920053DCAE0D483233150E265FBDF317BC816B4AEADE53D00F2AF83EFE1E93EC
493803D7091D0869D0102F4ACA897FAA2097E9879364A5A36399458F7A1BE2BE
04AF2C5F2AFE6E1471CD61BBAE0B6A6C670C0C4A05C6BBCF81DA9D1C4D0ABACD
162D68DA7F9F5B2081640087EF6F3D9E0CB0D73ACD15F50E046A0D52D6D047EE
80C9513CD099D0CA98B0020C86841355A2CDC066A9513E1AC3840E59AEF9148C
F0FD231E3B1059B5C2281190A9D8364A368F1BB5F5AD1F2F0BAF9798F1D9A642
AC398E183C4EA0813D1D129452E83AC29F27641A59503BECE58507A2DF21B10B
C2F7ABF92E6E732DF4B05369D3B162AEFA6F9337002EB78052D197D6C1D6693E
04CA11D37FBF3A71EF32537541405B05C4CE22AE6FF8735C3A190A59B2A28D4D
CA4A1206D24F5DD3B8C77B9D893090E5298136847A827A61883E10EC63278EB9
ADAB837790422AAE8A32C926AF70223092FE048778FDE8730013432BE6836513
B2B140DFD90A9836B1C453082EEB0F48E1A2CDCFD3533BD9128E5C50F8C42261
7BE29C1DA30EE1CAA9EE1584500AFB2E9EEAA3D1CD48555DE83EC9C02E82E284
CB201B3687B5A2B6FDEE50BFE29CFF39E6FABDAA2161836F6F027056989EB7CE
1FEC9D3172B6CE1384E1C610D200FCF39B435D1DC41F868EDA507C2C7D2AA247
6912EE7780D7FDFDD14EB1DBAFDDF0A086BF2D2A05377741758713E7F98C8C73
A33DAA0A3CC1CBCC72003807750C58DB8E6B17677A40E44D71F7440596011E6E
080AAE030C17FF39EC5829C79F539D6E50213388571DE371C587D1F3C16991E3
406129A359956797D3F8BF9AB0FB8030D73487220F00FCC9A5E2188704C99CDD
666790FFB914665482BA22E49118923D556F1B62B240EC5265271E6E9F502CA2
3FBFD0DE471E5D2DC8BD9C153BD2D5EF756ABF11F289405E0723140E56F786C1
3EB43C3F638617FF7294D5DE2F02B1CF37FC6FC4A547F57312005E6BCBEDCB01
B8CA5F59334ECFE545B72D378C18D334A9BF5FB3CFE8C4C3557BC29001A65DA2
70E87968C9C709E50AB37EF933A79497DBDF0BD520B09EB3AA90DF73192EB653
7BC19BDB03CC0135C2BE94301BEC5490A89D26A082C2251DD1F26CB9046A5294
76ADAA7CE31278DD472D03735F2FD311100B730F81183E2415E0516C9BC452DF
8E3B1DB0760938CCB1B1279F26489E87AA7D31F968FB0977A0BA861967E3B71F
FCE2E35F1F85F16CA354E9B2B1D45E8ED9D9D8386544C81C0A07FF267BDA0B61
6D7BF3F9E2D4871C0B0919D880EA596C589231D40AAE9E3EC78DD028F18F6FF0
9441163F5F57BA56FFEF402A05E30CE45423D02271B99661FC3C07EAF0A85E3D
A0666A2384E207A6E7D56DDEE7EBE9BB8E06FC7054382A92433C0F1E6BCAF791
3D29DDF372EA8CCB4576DFF12DE72E6B993C47A71BE9935C384962A4854B07A0
96C803B43CBFBE42777F310CBBE92862923F312A40166B1BBD753DB920C1EDDA
A1857BDEFA27C93A8635FB15F505836C0F83259A8E0FDD28B4E059B18870E742
C88E1C38EE0ABDDCF7A63561E6D6B9331C421B22D2F7327D25287E921E5BEA34
0AC9223166B4B18AA8E0F1998921B3F1075BC493EFEE8D6713B08C2D1C4E9CEF
E75191B60283C99BD82BE7B243E5C196F7D4EF0E501EBC731716EDF1198506F1
BAB2BC2C86D99E24A78969AE4AC96D1708A24EF8A8FB3C07F5DD8CB42FD04CE4
3F484BA6AB7207A9414CB57FD4933ECC6D9C2BC0DE6516B6F6E3D57374C6A30A
F7D984FCF8EAB914D6AF1D306E1B15200C21F4449DE23420215B6D4EBEECE774
7F03047696787779F7699443E5B96FA9B0A7A7E6E6966DE81B28CD4295F38ABD
9A3800B527159186E1F4711E1720C2BE77789EBFD2FE3F151B94D7889A200150
02A93E9680BF576B9542FECB7902874AEB536B79DF8FC3A39356F39EC3901F46
ED94713F6FE84B212C129F07F1B907C670B4CBD178CF7E23E79C7DECB2A48FFD
1096D6559BCE7E21D44DA34E9A6293B5BA12287364FFAE35005BBBB184C12EA4
202900E3D4AAC51C0F330088884533D470C0C267AFA04BC4DAB0CDB6FB05C532
7294C0733130FC48E2B2AE43AAEE5F3625AF749336E3A1F38DF1FBBDBC81EC03
AA2E295DEBA61048B10829AC0F108434BA1EEBF8C3F20AB0241ED751348874E1
8D279BBC87B0CCF36EA922F25B84D82C850AB827368BCBA8FD8E76FD43D9CF19
A965C10A7814C2A26D2FC6F94E5878130F8EDF790518364BE10396C8BD2945E4
88BDD2B92FDB019362852527EF0E732E1777C44D7C2C1C22E019D40FCFD9039C
6B2F82AB577ED4AF18C2B89CE1918A9CF4ABD6C8ABC7F2A97FE6682E8B4FA4C7
88C4D423E33D5B92F6FC5E62BE1A33AFBB37E0E5D57FCC210033B0316F3D1F61
14DC5ABDEC0990B821C57AD6D4FAC88B9C19FF73D298835F92C703F710741F41
54B93A3C8D029C26BC53D97B5DAC255E85981BFEB7F2B4470A58D1E206355F68
180C225454B50E637FD1C83D0E1A760824A8B18ECD2F1CD59D857C5272A39183
66746EEC96DAD6AC0D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40606846 57236177 2074 600 600
(propositional_resolution2.dvi)
@start /Fa 172[115 29[96 96 96 96 96 49[{
 TeXBase1Encoding ReEncodeFont }6 172.188 /NimbusSanL-ReguItal
rf /Fb 214[67 67 40[{}2 172.188 /CMR10 rf /Fc 194[157
11[101 7[79 79 40[{}4 206.625 /CMR12 rf /Fd 145[96 2[83
65 55 105[{}4 154.969 /CMMI9 rf /Fe 203[80 80 80 80 49[{}4
154.969 /CMR9 rf /Ff 135[103 7[115 2[172 46 6[115 3[115
27[138 10[57 58[{ TeXBase1Encoding ReEncodeFont }8 206.625
/NimbusSanL-Regu rf /Fg 255[108{}1 120.531 /CMSY7 rf
/Fh 160[115 115 35[115 24[172 33[{}4 172.188 /CMSY10
rf /Fi 145[85 2[73 57 49 105[{}4 120.531 /CMMI7 rf /Fj
203[69 69 69 69 5[106 43[{}5 120.531 /CMR7 rf /Fk 146[151
51 27[111 20[48 48 58[{}5 172.188 /CMMI10 rf /Fl 134[86
1[124 1[96 48 86 57 1[96 96 96 143 38 2[38 96 1[48 96
96 86 96 96 12[105 7[96 10[115 6[48 11[48 46[{
 TeXBase1Encoding ReEncodeFont }24 172.188 /NimbusSanL-Regu
rf /Fm 137[96 105 57 96 67 2[105 105 1[48 2[48 3[96 15[124
2[124 82[{ TeXBase1Encoding ReEncodeFont }12 172.188
/NimbusSanL-Bold rf /Fn 149[57 9[126 138 138 35[138 21[207
2[207 15[161 17[{}8 206.625 /CMSY10 rf /Fo 134[119 2[119
130 71 119 83 1[130 130 130 190 59 1[59 59 130 130 71
119 130 119 1[119 12[130 1[154 166 142 1[154 178 6[130
2[154 8[71 16[71 71 40[{ TeXBase1Encoding ReEncodeFont }31
213.513 /NimbusSanL-Bold rf /Fp 134[107 2[107 119 59
107 71 1[119 119 119 178 47 1[47 47 119 119 59 119 119
107 119 119 12[130 1[154 3[154 178 3[59 2[130 2[154 1[142
6[59 12[71 42[107 2[{ TeXBase1Encoding ReEncodeFont }32
213.513 /NimbusSanL-ReguItal rf /Fq 173[147 6[155 7[145
142 66[{}4 206.625 /CMTI12 rf /Fr 145[121 177 60 105
84 69 20[119 124 154 160 130 4[172 7[145 154 152 5[56
56 25[132 20[129 11[{}19 206.625 /CMMI12 rf /Fs 105[119
1[71 71 25[107 107 154 107 119 59 107 71 119 119 119
119 178 47 107 47 47 119 119 59 119 119 107 119 119 9[202
1[154 130 142 154 1[142 1[154 178 119 2[59 154 1[130
142 154 154 1[142 1[119 3[59 59 2[119 1[119 119 119 119
119 119 1[59 1[59 2[71 71 47 36[107 2[{ TeXBase1Encoding ReEncodeFont }
60 213.513 /NimbusSanL-Regu rf /Ft 105[39 32[39 20 35
24 39 39 1[39 1[16 2[16 39 39 1[39 1[35 1[39 12[43 10[20
7[47 7[39 39 39 39 39 39 39 39 39 39 1[20 43[35 2[{
 TeXBase1Encoding ReEncodeFont }30 70.5976 /NimbusSanL-Regu
rf /Fu 140[71 71 3[71 71 71 3[71 2[71 71 71 1[71 32[71
17[71 46[{ TeXBase1Encoding ReEncodeFont }12 118.723
/NimbusMonL-Regu rf /Fv 134[71 3[79 39 71 47 2[79 79
1[31 2[31 79 79 39 79 79 71 1[79 12[86 94 5[118 3[39
102 6[94 26[94 38[{ TeXBase1Encoding ReEncodeFont }23
141.195 /NimbusSanL-Regu rf /Fw 139[77 107 107 1[138
138 153 1[77 2[77 1[138 1[122 1[122 1[138 14[184 1[168
3[168 76[{ TeXBase1Encoding ReEncodeFont }15 275.5
/NimbusRomNo9L-MediItal rf /Fx 134[179 179 258 179 199
119 139 159 199 199 179 199 297 99 199 119 99 199 179
119 159 199 159 1[179 11[258 238 199 258 1[218 1[258
1[238 2[139 1[278 218 238 1[258 1[258 6[119 11[89 1[89
2[119 119 37[199 2[{ TeXBase1Encoding ReEncodeFont }43
357.117 /NimbusRomNo9L-Medi rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -600 -600 a
SDict begin [/Producer (dvips + Distiller)/Title (Propositional Reasoning)/Subject
(Masdar Institute)/Creator (LaTeX with hyperref and prosper packages)/Author
(Andreas Henschel)/Keywords (LaTeX, PDF) /DOCINFO pdfmark end
 -600 -600 a -600 -600
a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600 -600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893
a
SDict begin H.R end
 -1211 -1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600
a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600 -600 a -600 6651 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 6651 a -600 6651 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600
6651 a 0 TeXcolorgray -600 6651 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -600 6651 a -600 6651
a
SDict begin [/CropBox [10 40 594 800] /PAGES pdfmark end
 -600 6651 a -600 6651 a
SDict begin [ {Catalog}<</ViewerPreferences<</FitWindow true/CenterWindow
true>>>> /PUT pdfmark end
 -600 6651 a -600 6651 a
SDict begin H.S end
 -600
6651 a -600 6651 a
SDict begin 12 H.A end
 -600 6651 a -600 6651 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 6651
a -600 6651 a
SDict begin [ {Catalog} << /PageLabels<</Nums[0<</P(1)>>1<</P(2)>>2<</P(3)>>3<</P(4)>>4<</P(5)>>5<</P(6)>>6<</P(7)>>7<</P(8)>>8<</P(9)>>9<</P(10)>>10<</P(11)>>11<</P(12)>>12<</P(13)>>13<</P(14)>>14<</P(15)>>15<</P(16)>>16<</P(17)>>17<</P(18)>>18<</P(19)>>19<</P(20)>>20<</P(21)>>21<</P(22)>>22<</P(23)>>23<</P(24)>>24<</P(25)>>25<</P(26)>>]>>
>> /PUT pdfmark end
 -600 6651 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370
5850 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Rotate 90 /PAGES pdfmark end
 5370
4079 a 0 TeXcolorgray 0 0 1 TeXcolorrgb 0 TeXcolorgray
0 0 1 TeXcolorrgb 5232 3019 a Fx(T)-33 b(echniques)87
b(in)i(Arti\002cial)f(Intelligence)p 0 TeXcolorgray 0 0 1
TeXcolorrgb 6178 3434 a Fw(Propositional)67 b(Logic)i(Reasoning)p
0 TeXcolorgray 7362 3839 a Fv(Andreas)37 b(Henschel)7155
4087 y Fu(ahenschel@masdar.ac.ae)6644 4533 y Fv(Masdar)g(Institute)i
(of)g(Science)f(&)h(T)-17 b(echnology)p 0 TeXcolorgray
0 TeXcolorgray 10164 6387 a Ft(T)-8 b(echniques)21 b(in)e(Ar)s
(ti\002cial)g(Intelligence)g(\226)h(p)n(.)f(1)p 0 TeXcolorgray
4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 2/View [ /XYZ null null null ] /Title (This Lecture)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 6969 2044 a Fx(This)89 b(Lectur)-6 b(e)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 5190 2663
a @beginspecial 276 @llx 376 @lly 336 @urx 416 @ury 113
@rwi @setspecial
%%BeginDocument: red-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/red-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 735 string def


% load up the colormap
currentfile cmap readhexstring
140a09 748284 8c050b 3c4244 540408 bcc4c4 8c4a44 c40507 542220 242422 
740404 dce2e4 9c2a24 ac0506 340204 bc8e8c ecf3f0 541517 5c6264 9ca3a1 
e40306 741311 341312 9c0508 f4c2c4 640304 f4f4ec ac1314 6c4244 343533 
d40307 4c534f ac0a04 f4fdfb 740b0b fce4e2 ccd2cc 240a0c 949393 641412 
6c7370 9c0b08 d44a54 44020c acb4b4 441211 840b0b 540c0a 4c261c bc0506 
c4aaa4 741c24 640d0b dcc2c4 9c6264 242a24 d40a04 f4eae4 c40e04 f4f5f4 
4c5a54 241011 8c0a0a 544d4c bccacc a4aba8 443e3c 7c0b0b 5c0d0b 6c0c0b 
8c8e84 b40606 746a6c f40204 341a16 a40508 e4d6d4 fcfcf3 641c1c cc0406 
340b0b 541a1c e40a04 343a3c dc0208 949c98 747e7c 444a4c 342321 e4eae7 
ec0404 841516 bc0b05 6c1311 a40a06 440e0f c46664 f4eef4 2c1111 3c0c0b 
140e0c 848584 842e34 e4fef4 3c1313 2c1e1e d4dedc 441a14 fcf6f7 940a09 
f4d6d4 5c1416 aca6ac 9c1418 5c5254 740d14 b4bebc 841b1e 5c5d5b cccdcb 
5c0c14 ecbab4 6c0d14 fcfefc a49e9c cc6a6c b44644 dca2a4 fc7e84 947674 
dcbabc 64363c ac3634 b47878 bcbdbc a47e7c 7c4a4c fcaaac cc5a64 ac1a1c 
6c6c6c dc7674 843e3c 84625c fcdedf fcb6b4 8c1e1c dccecc 9c4a54 ccc2bc 
840509 342c2c bc1e24 442e2c 9c1a24 a43e44 ac6264 fccac4 848a8c 644a44 
8c9690 94060c 7c141c b40c05 d4d4d4 dc0a0c fcece0 7c6868 9c9c9e 4c0d0b 
843634 fcbeb4 1c0808 7c8381 444443 5c0207 2c2624 7c060c e4e4e3 a4a4a4 
fcc6cc fcf5ec 2c1717 3c3534 545453 2c0907 747574 b4b4b2 4c1212 7c1a1f 
2c2b2c 5c4a54 c4cbce acabac 3c3b3b 7c7d7b 4c4c4a ececec 1c110e ecfef9 
4c1e1c fcd5cf a41214 bc424c c4bec4 c4c5c4 54262c ac0214 646464 34161c 
9c0614 6c0204 b41614 fce5ec ccd6dc 64161c 840a14 540e14 640c14 d40c14 
c40a14 7c0b14 ecaeac b40414 a40614 cc0614 340e14 5c1c1c 34222c ec0614 
6c121c 3c0e14 dcdddc 940e14 fcecec 7c6a74 4c0e14 4c0204 545a57 3c1a1c 
fceef5 ac7e84 ac0a14 4c3e3c 8c8a8c 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

0f7b824d7b6c816c4d824d6c7b817b218421c721c721822167c782c7214d844d6c4d6c7b
117b
107b816c4d864df06c4d6c3b2181217b017b814d218821c7217b4d6cf06c4d814d7b027b
814d7b0b7b
0f7b814d7b897bd5f06c4d6c7b4d6c4d814d6c016c85ea4d6c4d6c7b817b4d024d037b81
4d7b0a7b
0f7b81217b017b834d6cd56c016c82f06cf081f0ea01ea84a6d5b54d7b027b014d107b
0f7b8221c77b827bf06c906cd590de858e33e6a2759b7d8990ea6cb581b57b127b
0f7b01218b7bb54d6c18f14e6f34a25be982e971e987e92e92609da6b54d844d217b214d
814d7b0b7b
107b8d216c4d6cf1112f3445435b6d294b834bca291b861b17718d23b54d814d2182214d
6c816c7b0a7b
0f7b9d3b7b6c3588a92f5d15432e6d4b0d475ca32047dc07cfd47ec9a64d217b4d824d6c
7b0a7b
0c7b914d3b7bb56c82ce2b4e4415432e6d294b473181315c835c4f1e548654071b0cabb5
4d824d614d014d0a7b
0a7b814d7b817b6c016c8d8283116faf5b22433e6d4b0d470701078e4f1e145a14544fd4
8491b56c7b4d7b0b7b
0e7b924d6c880ed9277ad3432e6d294b0d31074f1e548354145a14851454db172a908490
4d10217b0a7b
087b014d017b8b3b7b4d875fed6fda73d32e3e833e295e478447074f54140214025a88e5
1edf80d56c10217b0a7b
0b7b816c7b897b935011edd77a195b2e852e6d295e203182314f140314035a871407e0b4
d57bc77b0a7b
077b816c7b817b4d894d7b4deb5051ec047a2282222e3e883e295e0d475c1e5414011401
528a5a495a54e1d28af07b217b0a7b
077b814d7b017b8b4d7be8b0305fe3ed34bdd32e892e6d295e0d31074f5414011481525a
025a861407985bf0d57b0b7b
097b974d7b4db5cc3db95fa9275d19a22e963e6d4b0d4731071e5481541481145a015a87
54a507cf9a89ea7b0b7b
087b024d8b6c4deb62685fbc443445222e822e6d298529204731071e821e541482145a54
8954384f1ee1f28ab54d7b0a7b
087b834d7b4d6c946cbf62632dbc2f44450ab12e026d295e0d5c314f1e821e54148b1454
383a071e4fdfcb6c4d7b0a7b
097b014d016c96e4b9685fecd9dad37343963e6d294b0d473107e14f1e5481544f894f5c
314f07cf0cb54d7b0a7b
097b034d9225d11668a9d944da0a43b12e3ea1294b47a3318431074f1e4f894f5ca35c07
31e05b6c7b0b7b
097b944d7b4d6c25b6e2685f2f78197a22b12e026d174b0d830da34731813107820731a3
01a38647cfd2bd6c4d7b0a7b
0b7b016c94e43d16632dec2f784522b1432e3ea1174b0d5e0d478147318231472087205e
0d4b02666c7b0b7b
0b7b8c6c4d3f2562162dec2f78197a228b222e023ea1174b295e4b0d4782470d5e875e17
4b17d894b57b0b7b
087b814d7b817b4d874d483d6216685f2f852fda7a452243834302a16d816d2985295e4b
cf0d5e885eca1729e9dd9c6c7b0b7b
097b826c7b6c8d6ccc003dd1e2e711d904277a452281222e862e026d3e6d294b8c4b1729
6d028b96b1337f6c4d7b0a7b
077b944d7b6c4d6c4da469c6b6e2505fbc2f7844da457a4381432e012e823ea1178c17a1
6d3ea16d2e5b27ead54d7b0a7b
047b864d6c4d3b6c103b843b4dc58cc687c66216635fd9ec788178348134738173438143
2e832e3ea13e8b3ed82e3e0a5baf366cf04d7b0a7b
017b814d6c826c3bc501c501b281c5b201b28c8669643dd150e7bceca911783482344522
01228143968196d881d84386432e0a456f9d6c826c4d7b0a7b
964d3b61c559b20be8a477cd77cc8677cd7609006216505f875feca92f1134da4586455d
2243962273017388dd152f0f4d7b6c4d7b0a7b
886c10b2e8a477cc86bb83bb70a8b38bb313a846ae00acd168e7635f855fec2f78443402
340122877a452734450406b583b57b4d7b0b7b
8cc5b29305bb70a826659ec3bac381c3288928adee69c6d11650635f015f93a92f784434
4434450a34446f4434aa794d21c77b0c7b
9ae877bbb32665ba8cd076eeb8765703d01feec2693d25b9efe2635f835fa9d92f022f81
af448144118911bc4edeb54d21c7217b0b7b
8ca486a89ebad072c4ae42c2531d031d85c2b797693d628262d168016881635f815fbc01
bc8aa911bc63081cc9ea6c4d7b0e7b
8a77bba8bad0b8aec2531dbe86beb0be37be37be84be1de4b03d853dac25621668016882
2d08638263c868856881eaf06c4d014d0e7b
8977bb26bad0c4aeb71dbe81be0902098137098209be1d841db79758b601b6831662b916
8216b96b866b168f6e4db54d014d827b4d7b0d7b
8fa4867c6548d0eec4ae0353b7531dc21d811d53015301ae913fb8723ff39958694ab69f
a732a64db5f04d824d7b4d814d7b0e7b
88e87786b32665ba8cd082d072b801b891c41f3c1f3c1fee1228c346267cbb954c39b581
b54d824db54d844d7b6c7b4d814d7b0f7b
87c5b2d6cdbbb3a8f483f465c3ba02ba01288e5601ad019ea055b3bbcd4cb210b54d014d
027b826c4d7b017b81217b817b2181217b0b7b
863bc5b2e8a477868286bbc181c1b383b37ca81301130141012c877486c0246a59101a85
1a4d7b213b7b017b81217b057b81217b0b7b
864d3b61c559b2e882e8a4778677cdc0cdc0cd408740054024d66a0b598559c5101a217b
867b217b217b217b067b81217b0c7b

%
% Compression made this file 26.46% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 298 w Fs(Propositional)59
b(Logic)g(Reasoning)f(Using)h(Resolution)p 0 TeXcolorgray
5524 2951 a @beginspecial 276 @llx 376 @lly 336 @urx
416 @ury 85 @rwi @setspecial
%%BeginDocument: green-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/green-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 723 string def


% load up the colormap
currentfile cmap readhexstring
041808 049008 8c948c 045204 4c544c 04c804 84e284 449644 c4cbc4 0c380e 
04ac07 cce6cc 345e2c e4e7e4 046604 2c3a2c 347234 e4fee2 048208 64cc60 
34922c 24b224 04e404 044604 647264 242623 049f07 8cae8c 04bc06 24c61c 
f4f8f3 1c541c 04d804 1c621c 1c7220 0c280d 14910f 045e04 047c04 ccdcd0 
14ac18 1c481c 747473 04d105 0c6c0b 24852a 1c381c f4f1f3 acafac f4fef5 
0c310c acc6ac 049708 a4a4a3 3c4a44 148314 144812 9cea94 04b405 149e14 
1cbc1c 044004 e4fef4 dcdddd 748274 5c5959 4cba54 145b11 145413 147412 
c4fec4 e4f1e7 146411 088a0a 243028 09c207 fcf8f3 147c13 14c80e acceac 
3c3939 04f405 044e07 07a608 14d00f 0c1f10 0c900b d4d3d4 ecfee3 1c291d 
0c6e14 bcbfbd d4f6d4 909a94 4c5a50 0cac08 24ba24 547e54 0cbc0a 0c5c16 
0c7c0b fcf1fb acb8ac 1c311c aca7a9 e2e2e2 a4e2a4 0cc80a 6c9a6c 143715 
0c650a 0c840b 07de06 14970c 0c980a 0cb40a 848583 ecf0f0 c3c6c3 0c540d 
0c740c cccccc 74ce6c 30a02c 04ec05 54aa5c 6cb66c 9cfa9c 2c862c 5c926c 
6ca674 b4deac 9cda9c 34aa2c 6c7e6c acfeac 448244 34d22c 7d7d7c 6c6d6c 
445644 4c4d4c 1c7a19 1c3e1c 3c3f3c 2c422c 7c9a84 54c254 dceadc 144014 
343231 bccebc bcbabc 447244 6c6664 9c9d9c 7caa7c 349a38 6c7a74 84b69c 
1c4e18 898a89 ccfadc 1c6c2c b8e2c0 1c8a24 a1aaa1 3c4e3c 5f5e5c d8fed8 
24be24 78d670 688668 148a14 14a618 145624 0c480e 2c292b 142916 1c921c 
d4dad9 243828 143017 b4d2bc b4b7b5 1c961c 8c868c 247e24 144e13 04fa04 
246224 fcfefc 0c4e0c ace2b4 3caa3c 244e24 0c180c 949394 545454 ece9ec 
343634 2cb127 6c736c 0ca00c 0cda08 0c5c0b 0ccf06 146a0c b4b2b4 646464 
b4c2b4 0c3f0c ecfdf9 e4dedc ccfdcc 2c2f2b 142214 146b16 c4c2c2 545b54 
2cb62c 74ba74 346634 b4fcb0 244224 444242 246a24 e4feec 0ce204 f4f9fc 
f4eefc 444744 54b654 fcf9fc 0c9114 dcd6d4 ecfeec 0c7b14 0cc614 0c6314 
0c8414 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

10bf8131bf05bf03e98165e902e9046587bf3158ec31bfe9658265e9bf09bf
10bf8131bf04bf81e9bf01bf02e98265bfe982e965e901e981bf318131ec82ecbfe982e9
65bf0abf
12bf82751ebf83bf1ebf318231ec3102318111318131bf81bfe901e981bf318131bf01bf
01e90bbf
0fbf02e901bf023101ec021101a981d6a981a9118111318131bf14bf
0fbf8165e901e988e5bfd4ecd66add07808c80149dc2137f46a911d431bfe981e9bf0fbf

0fbf01e982bfe9318331a49ce28fe2454d37562456dc71567bab87a9d4bf81bfe981e9bf
81bf318131bf0abf
10bf8ac775bf311bde43224d37568656cb535f1a733c893cae8506a91131bfe9bf01bf81
58bf0abf
0fbf911ebf31b761a0442245ed56721a530a3a4e3a813a4e864e73c94246e3bf10bf
07bf81e9bf82bfe9bf92bf1ebf31ec4f0c38e2ef8e4d49561a530a3a6283624b052b8a2b
ce4e60c2dfe331bf4cbf0cbf
0abf81e9bf82bfe9ec8eec83de1f21778e786f01341a0a3a1c851c4b052b20168b162054
aa93df11312fe965bf0abf
0ebf8d3111883d77cdcf78646f0134530a810a1c911c4ece20167c517c16542893a9ec31
e965bf0abf
08bf01e999bfe91ebf316cc07743cd45786f49561a530a3a624b6b2b707c510151877c70
4edcaba9bfe981e9bf0abf
0bbf01e985bf27d34352cf90cf0e4d2656011a530a1c62ee2b20167c5102518816cc1db9
d611bfe9bf0abf
07bf81e9bf01bf90e9bf4c86d3445277d92c786f49721a0a3a853a4b0520167c827c51bd
88bd5116e44b157a11bf0cbf
0dbf8d3f0fc33d4403cfbb0e3756011a0a860a624b2b20167c817c5102510116854b897b
a911bf0bbf
08bf82e9e5bf97bf75dab209bcc021ef254d2649561a533a1c4b052b70167c037c811620
85203a853911bf0bbf
0bbf0131869eb6d3b0bc7748884845646f561acb0a7382734b2b812b1683167c16cc01cc
012b844b2813d4bf0bbf
0abf0231955e236db0c04463cf45646f5634cb533a73624b2b2016821670548854ce2b20
4b28e831bf0bbf
0abf023183b5b6d3b089b044436e45786f49341a871a0a733a626b2b200120896b4e6b05
2b1c5f9decbf0bbf
09bf8131bf97bf31d82e09d3b044cd485a786f1201cb1a530a73621c052b852b054e4b1c
0585053a282d58bf0bbf
0bbf9431bf556709b03844cd482c7864125634cb1a5f0a7382734b0501050162011c854b
0aae2d58bf0bbf
0bbf0131934a236dd3b0bc7743485a786f1201341acb535f3a813a1c011c0173023a8453
3b1458bf0bbf
0bbf8431bf0455098309d338778277ef2c852c266f1201348134cb83cb530a3a013a810a
5f815f0a850a1ab37d58bf0bbf
08bf81e9bf93bf31bf18d83209d338c044cd6e0e2c64126f0172837271cb5382530a5383
53ae531a851a01a57e58bf0bbf
0bbf01e5837600230901098138c082c0482c862c7864126f49568156728272341a811a72
0272864912bb841131bf0abf
03bf94e9bfe9bfe9bf1ebf1ebf275923b632099538c044ef81ef7881786481646f816fad
84adea01ea560156882449ad2da3115831bf0abf
04bf02e992654ce61e75bf0d185523b66d0995bcc043cd2c812c7881786483646f64f001
f08b6f496f49642d6382e3314cbf0abf
01bf85e9e5e9652fc784c7693fc7698a69c7d2b200232eb60929bc84bc6343ef2c862c78
45784d78ed82ed6f6489644d45a3afa2114c31bf0abf
01e58175c783c769d5eb8ceb797679dab87908db67c4b66d876d9538b0447743ef84ef6e
2c78458e455a457864788ecfbe9fd4315831bf0abf
88e5750d3f5779da98d083d0689b3501358d5d0236c45567b6320995b04477cd92cdef6e
2c6e5ad95acf782c4517813e31bf2fbf0bbf
887569575bd0689bc5ba83ba8a2a8a878aca2a74db5955b284b23209d3b081b077017701
cd016e02ef876e2c6e4810a4d4bf01bf814cbf0abf
873f79b835c5ba2a9a829aa8410141868de1d104c690d881d85583552e6d958b9538b0c0
77cd03cd6377afcd84cd4321c1d483d4e9654c814cbf0abf
88575b9b742ad1418de181e15081509603968450c8d759d881d8b283b2326d0981099585
9538bcb0381f871f95c3995ca931bf81bfe981e9bf0bbf
8779b8c58ad1c6e750855096d7b119b104b184d7b119d855845523b2b66d016d83952995
2987296de09211d431bf01bf01e90cbf
8979d0c52aa88de15096b181b119041901b18796c80fd74a59b2b602b6016d86326d328f
ac0b318331bf31bf01bf81e9bf0cbf
88575b9b742ad1c68de186e1c850c850c850865096c850e1e70487045e8ca7912e672e85
2e8cac33473101318158bf02bf82e9bfe981e9bf0abf
8b3f799835c5742a8bd1a8dbc683c68dc68d818dc601c68cdbd1ca40a15da66697274711
31863158bf31bf31bf82bf4ce985e9bfe9bfe9bf0abf
8bc76957dab8359bc5a1748a2a052a018a01748b029ba6665b279447ec311ebf83bf581e
bf82bf4cbf02bf82e9bfe981e9bf0abf
881e75693f57795bb8d082d068350135029b0135013088b8985b7608b40d751e811ebf83
bf1e75bf81bf4c814cbf05bf81e9bf0bbf
83e9e52fc782c7693f823f5779817976027681da760276827957b482b4c7750175822fe5
bf82bf4cbf01bf814cbf81bfe981e9bf01bf01e90dbf

%
% Compression made this file 26.36% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 248 w(Resolution)g(Rule)p
0 TeXcolorgray 5524 3240 a @beginspecial 276 @llx 376
@lly 336 @urx 416 @ury 85 @rwi @setspecial
%%BeginDocument: green-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/green-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 723 string def


% load up the colormap
currentfile cmap readhexstring
041808 049008 8c948c 045204 4c544c 04c804 84e284 449644 c4cbc4 0c380e 
04ac07 cce6cc 345e2c e4e7e4 046604 2c3a2c 347234 e4fee2 048208 64cc60 
34922c 24b224 04e404 044604 647264 242623 049f07 8cae8c 04bc06 24c61c 
f4f8f3 1c541c 04d804 1c621c 1c7220 0c280d 14910f 045e04 047c04 ccdcd0 
14ac18 1c481c 747473 04d105 0c6c0b 24852a 1c381c f4f1f3 acafac f4fef5 
0c310c acc6ac 049708 a4a4a3 3c4a44 148314 144812 9cea94 04b405 149e14 
1cbc1c 044004 e4fef4 dcdddd 748274 5c5959 4cba54 145b11 145413 147412 
c4fec4 e4f1e7 146411 088a0a 243028 09c207 fcf8f3 147c13 14c80e acceac 
3c3939 04f405 044e07 07a608 14d00f 0c1f10 0c900b d4d3d4 ecfee3 1c291d 
0c6e14 bcbfbd d4f6d4 909a94 4c5a50 0cac08 24ba24 547e54 0cbc0a 0c5c16 
0c7c0b fcf1fb acb8ac 1c311c aca7a9 e2e2e2 a4e2a4 0cc80a 6c9a6c 143715 
0c650a 0c840b 07de06 14970c 0c980a 0cb40a 848583 ecf0f0 c3c6c3 0c540d 
0c740c cccccc 74ce6c 30a02c 04ec05 54aa5c 6cb66c 9cfa9c 2c862c 5c926c 
6ca674 b4deac 9cda9c 34aa2c 6c7e6c acfeac 448244 34d22c 7d7d7c 6c6d6c 
445644 4c4d4c 1c7a19 1c3e1c 3c3f3c 2c422c 7c9a84 54c254 dceadc 144014 
343231 bccebc bcbabc 447244 6c6664 9c9d9c 7caa7c 349a38 6c7a74 84b69c 
1c4e18 898a89 ccfadc 1c6c2c b8e2c0 1c8a24 a1aaa1 3c4e3c 5f5e5c d8fed8 
24be24 78d670 688668 148a14 14a618 145624 0c480e 2c292b 142916 1c921c 
d4dad9 243828 143017 b4d2bc b4b7b5 1c961c 8c868c 247e24 144e13 04fa04 
246224 fcfefc 0c4e0c ace2b4 3caa3c 244e24 0c180c 949394 545454 ece9ec 
343634 2cb127 6c736c 0ca00c 0cda08 0c5c0b 0ccf06 146a0c b4b2b4 646464 
b4c2b4 0c3f0c ecfdf9 e4dedc ccfdcc 2c2f2b 142214 146b16 c4c2c2 545b54 
2cb62c 74ba74 346634 b4fcb0 244224 444242 246a24 e4feec 0ce204 f4f9fc 
f4eefc 444744 54b654 fcf9fc 0c9114 dcd6d4 ecfeec 0c7b14 0cc614 0c6314 
0c8414 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

10bf8131bf05bf03e98165e902e9046587bf3158ec31bfe9658265e9bf09bf
10bf8131bf04bf81e9bf01bf02e98265bfe982e965e901e981bf318131ec82ecbfe982e9
65bf0abf
12bf82751ebf83bf1ebf318231ec3102318111318131bf81bfe901e981bf318131bf01bf
01e90bbf
0fbf02e901bf023101ec021101a981d6a981a9118111318131bf14bf
0fbf8165e901e988e5bfd4ecd66add07808c80149dc2137f46a911d431bfe981e9bf0fbf

0fbf01e982bfe9318331a49ce28fe2454d37562456dc71567bab87a9d4bf81bfe981e9bf
81bf318131bf0abf
10bf8ac775bf311bde43224d37568656cb535f1a733c893cae8506a91131bfe9bf01bf81
58bf0abf
0fbf911ebf31b761a0442245ed56721a530a3a4e3a813a4e864e73c94246e3bf10bf
07bf81e9bf82bfe9bf92bf1ebf31ec4f0c38e2ef8e4d49561a530a3a6283624b052b8a2b
ce4e60c2dfe331bf4cbf0cbf
0abf81e9bf82bfe9ec8eec83de1f21778e786f01341a0a3a1c851c4b052b20168b162054
aa93df11312fe965bf0abf
0ebf8d3111883d77cdcf78646f0134530a810a1c911c4ece20167c517c16542893a9ec31
e965bf0abf
08bf01e999bfe91ebf316cc07743cd45786f49561a530a3a624b6b2b707c510151877c70
4edcaba9bfe981e9bf0abf
0bbf01e985bf27d34352cf90cf0e4d2656011a530a1c62ee2b20167c5102518816cc1db9
d611bfe9bf0abf
07bf81e9bf01bf90e9bf4c86d3445277d92c786f49721a0a3a853a4b0520167c827c51bd
88bd5116e44b157a11bf0cbf
0dbf8d3f0fc33d4403cfbb0e3756011a0a860a624b2b20167c817c5102510116854b897b
a911bf0bbf
08bf82e9e5bf97bf75dab209bcc021ef254d2649561a533a1c4b052b70167c037c811620
85203a853911bf0bbf
0bbf0131869eb6d3b0bc7748884845646f561acb0a7382734b2b812b1683167c16cc01cc
012b844b2813d4bf0bbf
0abf0231955e236db0c04463cf45646f5634cb533a73624b2b2016821670548854ce2b20
4b28e831bf0bbf
0abf023183b5b6d3b089b044436e45786f49341a871a0a733a626b2b200120896b4e6b05
2b1c5f9decbf0bbf
09bf8131bf97bf31d82e09d3b044cd485a786f1201cb1a530a73621c052b852b054e4b1c
0585053a282d58bf0bbf
0bbf9431bf556709b03844cd482c7864125634cb1a5f0a7382734b0501050162011c854b
0aae2d58bf0bbf
0bbf0131934a236dd3b0bc7743485a786f1201341acb535f3a813a1c011c0173023a8453
3b1458bf0bbf
0bbf8431bf0455098309d338778277ef2c852c266f1201348134cb83cb530a3a013a810a
5f815f0a850a1ab37d58bf0bbf
08bf81e9bf93bf31bf18d83209d338c044cd6e0e2c64126f0172837271cb5382530a5383
53ae531a851a01a57e58bf0bbf
0bbf01e5837600230901098138c082c0482c862c7864126f49568156728272341a811a72
0272864912bb841131bf0abf
03bf94e9bfe9bfe9bf1ebf1ebf275923b632099538c044ef81ef7881786481646f816fad
84adea01ea560156882449ad2da3115831bf0abf
04bf02e992654ce61e75bf0d185523b66d0995bcc043cd2c812c7881786483646f64f001
f08b6f496f49642d6382e3314cbf0abf
01bf85e9e5e9652fc784c7693fc7698a69c7d2b200232eb60929bc84bc6343ef2c862c78
45784d78ed82ed6f6489644d45a3afa2114c31bf0abf
01e58175c783c769d5eb8ceb797679dab87908db67c4b66d876d9538b0447743ef84ef6e
2c78458e455a457864788ecfbe9fd4315831bf0abf
88e5750d3f5779da98d083d0689b3501358d5d0236c45567b6320995b04477cd92cdef6e
2c6e5ad95acf782c4517813e31bf2fbf0bbf
887569575bd0689bc5ba83ba8a2a8a878aca2a74db5955b284b23209d3b081b077017701
cd016e02ef876e2c6e4810a4d4bf01bf814cbf0abf
873f79b835c5ba2a9a829aa8410141868de1d104c690d881d85583552e6d958b9538b0c0
77cd03cd6377afcd84cd4321c1d483d4e9654c814cbf0abf
88575b9b742ad1418de181e15081509603968450c8d759d881d8b283b2326d0981099585
9538bcb0381f871f95c3995ca931bf81bfe981e9bf0bbf
8779b8c58ad1c6e750855096d7b119b104b184d7b119d855845523b2b66d016d83952995
2987296de09211d431bf01bf01e90cbf
8979d0c52aa88de15096b181b119041901b18796c80fd74a59b2b602b6016d86326d328f
ac0b318331bf31bf01bf81e9bf0cbf
88575b9b742ad1c68de186e1c850c850c850865096c850e1e70487045e8ca7912e672e85
2e8cac33473101318158bf02bf82e9bfe981e9bf0abf
8b3f799835c5742a8bd1a8dbc683c68dc68d818dc601c68cdbd1ca40a15da66697274711
31863158bf31bf31bf82bf4ce985e9bfe9bfe9bf0abf
8bc76957dab8359bc5a1748a2a052a018a01748b029ba6665b279447ec311ebf83bf581e
bf82bf4cbf02bf82e9bfe981e9bf0abf
881e75693f57795bb8d082d068350135029b0135013088b8985b7608b40d751e811ebf83
bf1e75bf81bf4c814cbf05bf81e9bf0bbf
83e9e52fc782c7693f823f5779817976027681da760276827957b482b4c7750175822fe5
bf82bf4cbf01bf814cbf81bfe981e9bf01bf01e90dbf

%
% Compression made this file 26.36% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 248 w(Conjunctiv)-5 b(e)59
b(Nor)5 b(mal)59 b(F)-6 b(or)5 b(m)p 0 TeXcolorgray 5524
3528 a @beginspecial 276 @llx 376 @lly 336 @urx 416 @ury
85 @rwi @setspecial
%%BeginDocument: green-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/green-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 723 string def


% load up the colormap
currentfile cmap readhexstring
041808 049008 8c948c 045204 4c544c 04c804 84e284 449644 c4cbc4 0c380e 
04ac07 cce6cc 345e2c e4e7e4 046604 2c3a2c 347234 e4fee2 048208 64cc60 
34922c 24b224 04e404 044604 647264 242623 049f07 8cae8c 04bc06 24c61c 
f4f8f3 1c541c 04d804 1c621c 1c7220 0c280d 14910f 045e04 047c04 ccdcd0 
14ac18 1c481c 747473 04d105 0c6c0b 24852a 1c381c f4f1f3 acafac f4fef5 
0c310c acc6ac 049708 a4a4a3 3c4a44 148314 144812 9cea94 04b405 149e14 
1cbc1c 044004 e4fef4 dcdddd 748274 5c5959 4cba54 145b11 145413 147412 
c4fec4 e4f1e7 146411 088a0a 243028 09c207 fcf8f3 147c13 14c80e acceac 
3c3939 04f405 044e07 07a608 14d00f 0c1f10 0c900b d4d3d4 ecfee3 1c291d 
0c6e14 bcbfbd d4f6d4 909a94 4c5a50 0cac08 24ba24 547e54 0cbc0a 0c5c16 
0c7c0b fcf1fb acb8ac 1c311c aca7a9 e2e2e2 a4e2a4 0cc80a 6c9a6c 143715 
0c650a 0c840b 07de06 14970c 0c980a 0cb40a 848583 ecf0f0 c3c6c3 0c540d 
0c740c cccccc 74ce6c 30a02c 04ec05 54aa5c 6cb66c 9cfa9c 2c862c 5c926c 
6ca674 b4deac 9cda9c 34aa2c 6c7e6c acfeac 448244 34d22c 7d7d7c 6c6d6c 
445644 4c4d4c 1c7a19 1c3e1c 3c3f3c 2c422c 7c9a84 54c254 dceadc 144014 
343231 bccebc bcbabc 447244 6c6664 9c9d9c 7caa7c 349a38 6c7a74 84b69c 
1c4e18 898a89 ccfadc 1c6c2c b8e2c0 1c8a24 a1aaa1 3c4e3c 5f5e5c d8fed8 
24be24 78d670 688668 148a14 14a618 145624 0c480e 2c292b 142916 1c921c 
d4dad9 243828 143017 b4d2bc b4b7b5 1c961c 8c868c 247e24 144e13 04fa04 
246224 fcfefc 0c4e0c ace2b4 3caa3c 244e24 0c180c 949394 545454 ece9ec 
343634 2cb127 6c736c 0ca00c 0cda08 0c5c0b 0ccf06 146a0c b4b2b4 646464 
b4c2b4 0c3f0c ecfdf9 e4dedc ccfdcc 2c2f2b 142214 146b16 c4c2c2 545b54 
2cb62c 74ba74 346634 b4fcb0 244224 444242 246a24 e4feec 0ce204 f4f9fc 
f4eefc 444744 54b654 fcf9fc 0c9114 dcd6d4 ecfeec 0c7b14 0cc614 0c6314 
0c8414 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

10bf8131bf05bf03e98165e902e9046587bf3158ec31bfe9658265e9bf09bf
10bf8131bf04bf81e9bf01bf02e98265bfe982e965e901e981bf318131ec82ecbfe982e9
65bf0abf
12bf82751ebf83bf1ebf318231ec3102318111318131bf81bfe901e981bf318131bf01bf
01e90bbf
0fbf02e901bf023101ec021101a981d6a981a9118111318131bf14bf
0fbf8165e901e988e5bfd4ecd66add07808c80149dc2137f46a911d431bfe981e9bf0fbf

0fbf01e982bfe9318331a49ce28fe2454d37562456dc71567bab87a9d4bf81bfe981e9bf
81bf318131bf0abf
10bf8ac775bf311bde43224d37568656cb535f1a733c893cae8506a91131bfe9bf01bf81
58bf0abf
0fbf911ebf31b761a0442245ed56721a530a3a4e3a813a4e864e73c94246e3bf10bf
07bf81e9bf82bfe9bf92bf1ebf31ec4f0c38e2ef8e4d49561a530a3a6283624b052b8a2b
ce4e60c2dfe331bf4cbf0cbf
0abf81e9bf82bfe9ec8eec83de1f21778e786f01341a0a3a1c851c4b052b20168b162054
aa93df11312fe965bf0abf
0ebf8d3111883d77cdcf78646f0134530a810a1c911c4ece20167c517c16542893a9ec31
e965bf0abf
08bf01e999bfe91ebf316cc07743cd45786f49561a530a3a624b6b2b707c510151877c70
4edcaba9bfe981e9bf0abf
0bbf01e985bf27d34352cf90cf0e4d2656011a530a1c62ee2b20167c5102518816cc1db9
d611bfe9bf0abf
07bf81e9bf01bf90e9bf4c86d3445277d92c786f49721a0a3a853a4b0520167c827c51bd
88bd5116e44b157a11bf0cbf
0dbf8d3f0fc33d4403cfbb0e3756011a0a860a624b2b20167c817c5102510116854b897b
a911bf0bbf
08bf82e9e5bf97bf75dab209bcc021ef254d2649561a533a1c4b052b70167c037c811620
85203a853911bf0bbf
0bbf0131869eb6d3b0bc7748884845646f561acb0a7382734b2b812b1683167c16cc01cc
012b844b2813d4bf0bbf
0abf0231955e236db0c04463cf45646f5634cb533a73624b2b2016821670548854ce2b20
4b28e831bf0bbf
0abf023183b5b6d3b089b044436e45786f49341a871a0a733a626b2b200120896b4e6b05
2b1c5f9decbf0bbf
09bf8131bf97bf31d82e09d3b044cd485a786f1201cb1a530a73621c052b852b054e4b1c
0585053a282d58bf0bbf
0bbf9431bf556709b03844cd482c7864125634cb1a5f0a7382734b0501050162011c854b
0aae2d58bf0bbf
0bbf0131934a236dd3b0bc7743485a786f1201341acb535f3a813a1c011c0173023a8453
3b1458bf0bbf
0bbf8431bf0455098309d338778277ef2c852c266f1201348134cb83cb530a3a013a810a
5f815f0a850a1ab37d58bf0bbf
08bf81e9bf93bf31bf18d83209d338c044cd6e0e2c64126f0172837271cb5382530a5383
53ae531a851a01a57e58bf0bbf
0bbf01e5837600230901098138c082c0482c862c7864126f49568156728272341a811a72
0272864912bb841131bf0abf
03bf94e9bfe9bfe9bf1ebf1ebf275923b632099538c044ef81ef7881786481646f816fad
84adea01ea560156882449ad2da3115831bf0abf
04bf02e992654ce61e75bf0d185523b66d0995bcc043cd2c812c7881786483646f64f001
f08b6f496f49642d6382e3314cbf0abf
01bf85e9e5e9652fc784c7693fc7698a69c7d2b200232eb60929bc84bc6343ef2c862c78
45784d78ed82ed6f6489644d45a3afa2114c31bf0abf
01e58175c783c769d5eb8ceb797679dab87908db67c4b66d876d9538b0447743ef84ef6e
2c78458e455a457864788ecfbe9fd4315831bf0abf
88e5750d3f5779da98d083d0689b3501358d5d0236c45567b6320995b04477cd92cdef6e
2c6e5ad95acf782c4517813e31bf2fbf0bbf
887569575bd0689bc5ba83ba8a2a8a878aca2a74db5955b284b23209d3b081b077017701
cd016e02ef876e2c6e4810a4d4bf01bf814cbf0abf
873f79b835c5ba2a9a829aa8410141868de1d104c690d881d85583552e6d958b9538b0c0
77cd03cd6377afcd84cd4321c1d483d4e9654c814cbf0abf
88575b9b742ad1418de181e15081509603968450c8d759d881d8b283b2326d0981099585
9538bcb0381f871f95c3995ca931bf81bfe981e9bf0bbf
8779b8c58ad1c6e750855096d7b119b104b184d7b119d855845523b2b66d016d83952995
2987296de09211d431bf01bf01e90cbf
8979d0c52aa88de15096b181b119041901b18796c80fd74a59b2b602b6016d86326d328f
ac0b318331bf31bf01bf81e9bf0cbf
88575b9b742ad1c68de186e1c850c850c850865096c850e1e70487045e8ca7912e672e85
2e8cac33473101318158bf02bf82e9bfe981e9bf0abf
8b3f799835c5742a8bd1a8dbc683c68dc68d818dc601c68cdbd1ca40a15da66697274711
31863158bf31bf31bf82bf4ce985e9bfe9bfe9bf0abf
8bc76957dab8359bc5a1748a2a052a018a01748b029ba6665b279447ec311ebf83bf581e
bf82bf4cbf02bf82e9bfe981e9bf0abf
881e75693f57795bb8d082d068350135029b0135013088b8985b7608b40d751e811ebf83
bf1e75bf81bf4c814cbf05bf81e9bf0bbf
83e9e52fc782c7693f823f5779817976027681da760276827957b482b4c7750175822fe5
bf82bf4cbf01bf814cbf81bfe981e9bf01bf01e90dbf

%
% Compression made this file 26.36% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 248 w(Resolution)59 b(Algor)s(ithm)p
0 TeXcolorgray 0 TeXcolorgray 10164 6387 a Ft(T)-8 b(echniques)21
b(in)e(Ar)s(ti\002cial)g(Intelligence)g(\226)h(p)n(.)f(2)p
0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 3/View [ /XYZ null null null ] /Title (Recall: Propositional Logic Inference)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5096 2010 a Fx(Recall:)110 b(Pr)-6 b(opositional)87
b(Logic)h(Infer)-6 b(ence)p 0 TeXcolorgray 0 TeXcolorgray
5121 2663 a Fs(T)-26 b(o)61 b(ans)-6 b(w)n(er)57 b(quer)s(ies)i(such)f
(as:)5121 2907 y(\223Is)i Fr( )66 b Fs(entailed)60 b(b)l(y)e
Fq(KB)22 b Fs(?\224)5121 3151 y(\223Is)60 b Fr( )66 b
Fs(v)-5 b(alid?\224)5121 3446 y(W)f(e)59 b(studied)g(tw)n(o)g(sound)f
(and)g(complete)h(inf)-6 b(erence)58 b(procedures)5121
3690 y(f)-6 b(or)60 b(propositional)e(logic)p 0 TeXcolorgray
5208 4023 a(1.)p 0 TeXcolorgray 102 w Fp(Natur)n(al)h(deduction:)78
b Fs(T)-26 b(o)59 b(automate)g(it,)h(w)n(e)f(need)g(an)5488
4267 y(algor)s(ithm)g(that)h(\223searches\224)d(through)i(all)h(possib)
l(le)5488 4513 y(sequences)c(of)k(natur)n(al)f(deduction)f(r)s(ules)h
(applied)g(to)g Fq(KB)5488 4757 y Fs(until)h(w)n(e)f(\002nd)f
Fr( )66 b Fs(or)60 b(k)l(eep)e(going)g(inde\002nitely)h(\(gener)n
(ating)5488 5003 y(more)f(and)h(more)g(entailed)g(sentences\))p
0 TeXcolorgray 5475 5292 a @beginspecial 276 @llx 376
@lly 336 @urx 416 @ury 113 @rwi @setspecial
%%BeginDocument: red-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/red-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 735 string def


% load up the colormap
currentfile cmap readhexstring
140a09 748284 8c050b 3c4244 540408 bcc4c4 8c4a44 c40507 542220 242422 
740404 dce2e4 9c2a24 ac0506 340204 bc8e8c ecf3f0 541517 5c6264 9ca3a1 
e40306 741311 341312 9c0508 f4c2c4 640304 f4f4ec ac1314 6c4244 343533 
d40307 4c534f ac0a04 f4fdfb 740b0b fce4e2 ccd2cc 240a0c 949393 641412 
6c7370 9c0b08 d44a54 44020c acb4b4 441211 840b0b 540c0a 4c261c bc0506 
c4aaa4 741c24 640d0b dcc2c4 9c6264 242a24 d40a04 f4eae4 c40e04 f4f5f4 
4c5a54 241011 8c0a0a 544d4c bccacc a4aba8 443e3c 7c0b0b 5c0d0b 6c0c0b 
8c8e84 b40606 746a6c f40204 341a16 a40508 e4d6d4 fcfcf3 641c1c cc0406 
340b0b 541a1c e40a04 343a3c dc0208 949c98 747e7c 444a4c 342321 e4eae7 
ec0404 841516 bc0b05 6c1311 a40a06 440e0f c46664 f4eef4 2c1111 3c0c0b 
140e0c 848584 842e34 e4fef4 3c1313 2c1e1e d4dedc 441a14 fcf6f7 940a09 
f4d6d4 5c1416 aca6ac 9c1418 5c5254 740d14 b4bebc 841b1e 5c5d5b cccdcb 
5c0c14 ecbab4 6c0d14 fcfefc a49e9c cc6a6c b44644 dca2a4 fc7e84 947674 
dcbabc 64363c ac3634 b47878 bcbdbc a47e7c 7c4a4c fcaaac cc5a64 ac1a1c 
6c6c6c dc7674 843e3c 84625c fcdedf fcb6b4 8c1e1c dccecc 9c4a54 ccc2bc 
840509 342c2c bc1e24 442e2c 9c1a24 a43e44 ac6264 fccac4 848a8c 644a44 
8c9690 94060c 7c141c b40c05 d4d4d4 dc0a0c fcece0 7c6868 9c9c9e 4c0d0b 
843634 fcbeb4 1c0808 7c8381 444443 5c0207 2c2624 7c060c e4e4e3 a4a4a4 
fcc6cc fcf5ec 2c1717 3c3534 545453 2c0907 747574 b4b4b2 4c1212 7c1a1f 
2c2b2c 5c4a54 c4cbce acabac 3c3b3b 7c7d7b 4c4c4a ececec 1c110e ecfef9 
4c1e1c fcd5cf a41214 bc424c c4bec4 c4c5c4 54262c ac0214 646464 34161c 
9c0614 6c0204 b41614 fce5ec ccd6dc 64161c 840a14 540e14 640c14 d40c14 
c40a14 7c0b14 ecaeac b40414 a40614 cc0614 340e14 5c1c1c 34222c ec0614 
6c121c 3c0e14 dcdddc 940e14 fcecec 7c6a74 4c0e14 4c0204 545a57 3c1a1c 
fceef5 ac7e84 ac0a14 4c3e3c 8c8a8c 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

0f7b824d7b6c816c4d824d6c7b817b218421c721c721822167c782c7214d844d6c4d6c7b
117b
107b816c4d864df06c4d6c3b2181217b017b814d218821c7217b4d6cf06c4d814d7b027b
814d7b0b7b
0f7b814d7b897bd5f06c4d6c7b4d6c4d814d6c016c85ea4d6c4d6c7b817b4d024d037b81
4d7b0a7b
0f7b81217b017b834d6cd56c016c82f06cf081f0ea01ea84a6d5b54d7b027b014d107b
0f7b8221c77b827bf06c906cd590de858e33e6a2759b7d8990ea6cb581b57b127b
0f7b01218b7bb54d6c18f14e6f34a25be982e971e987e92e92609da6b54d844d217b214d
814d7b0b7b
107b8d216c4d6cf1112f3445435b6d294b834bca291b861b17718d23b54d814d2182214d
6c816c7b0a7b
0f7b9d3b7b6c3588a92f5d15432e6d4b0d475ca32047dc07cfd47ec9a64d217b4d824d6c
7b0a7b
0c7b914d3b7bb56c82ce2b4e4415432e6d294b473181315c835c4f1e548654071b0cabb5
4d824d614d014d0a7b
0a7b814d7b817b6c016c8d8283116faf5b22433e6d4b0d470701078e4f1e145a14544fd4
8491b56c7b4d7b0b7b
0e7b924d6c880ed9277ad3432e6d294b0d31074f1e548354145a14851454db172a908490
4d10217b0a7b
087b014d017b8b3b7b4d875fed6fda73d32e3e833e295e478447074f54140214025a88e5
1edf80d56c10217b0a7b
0b7b816c7b897b935011edd77a195b2e852e6d295e203182314f140314035a871407e0b4
d57bc77b0a7b
077b816c7b817b4d894d7b4deb5051ec047a2282222e3e883e295e0d475c1e5414011401
528a5a495a54e1d28af07b217b0a7b
077b814d7b017b8b4d7be8b0305fe3ed34bdd32e892e6d295e0d31074f5414011481525a
025a861407985bf0d57b0b7b
097b974d7b4db5cc3db95fa9275d19a22e963e6d4b0d4731071e5481541481145a015a87
54a507cf9a89ea7b0b7b
087b024d8b6c4deb62685fbc443445222e822e6d298529204731071e821e541482145a54
8954384f1ee1f28ab54d7b0a7b
087b834d7b4d6c946cbf62632dbc2f44450ab12e026d295e0d5c314f1e821e54148b1454
383a071e4fdfcb6c4d7b0a7b
097b014d016c96e4b9685fecd9dad37343963e6d294b0d473107e14f1e5481544f894f5c
314f07cf0cb54d7b0a7b
097b034d9225d11668a9d944da0a43b12e3ea1294b47a3318431074f1e4f894f5ca35c07
31e05b6c7b0b7b
097b944d7b4d6c25b6e2685f2f78197a22b12e026d174b0d830da34731813107820731a3
01a38647cfd2bd6c4d7b0a7b
0b7b016c94e43d16632dec2f784522b1432e3ea1174b0d5e0d478147318231472087205e
0d4b02666c7b0b7b
0b7b8c6c4d3f2562162dec2f78197a228b222e023ea1174b295e4b0d4782470d5e875e17
4b17d894b57b0b7b
087b814d7b817b4d874d483d6216685f2f852fda7a452243834302a16d816d2985295e4b
cf0d5e885eca1729e9dd9c6c7b0b7b
097b826c7b6c8d6ccc003dd1e2e711d904277a452281222e862e026d3e6d294b8c4b1729
6d028b96b1337f6c4d7b0a7b
077b944d7b6c4d6c4da469c6b6e2505fbc2f7844da457a4381432e012e823ea1178c17a1
6d3ea16d2e5b27ead54d7b0a7b
047b864d6c4d3b6c103b843b4dc58cc687c66216635fd9ec788178348134738173438143
2e832e3ea13e8b3ed82e3e0a5baf366cf04d7b0a7b
017b814d6c826c3bc501c501b281c5b201b28c8669643dd150e7bceca911783482344522
01228143968196d881d84386432e0a456f9d6c826c4d7b0a7b
964d3b61c559b20be8a477cd77cc8677cd7609006216505f875feca92f1134da4586455d
2243962273017388dd152f0f4d7b6c4d7b0a7b
886c10b2e8a477cc86bb83bb70a8b38bb313a846ae00acd168e7635f855fec2f78443402
340122877a452734450406b583b57b4d7b0b7b
8cc5b29305bb70a826659ec3bac381c3288928adee69c6d11650635f015f93a92f784434
4434450a34446f4434aa794d21c77b0c7b
9ae877bbb32665ba8cd076eeb8765703d01feec2693d25b9efe2635f835fa9d92f022f81
af448144118911bc4edeb54d21c7217b0b7b
8ca486a89ebad072c4ae42c2531d031d85c2b797693d628262d168016881635f815fbc01
bc8aa911bc63081cc9ea6c4d7b0e7b
8a77bba8bad0b8aec2531dbe86beb0be37be37be84be1de4b03d853dac25621668016882
2d08638263c868856881eaf06c4d014d0e7b
8977bb26bad0c4aeb71dbe81be0902098137098209be1d841db79758b601b6831662b916
8216b96b866b168f6e4db54d014d827b4d7b0d7b
8fa4867c6548d0eec4ae0353b7531dc21d811d53015301ae913fb8723ff39958694ab69f
a732a64db5f04d824d7b4d814d7b0e7b
88e87786b32665ba8cd082d072b801b891c41f3c1f3c1fee1228c346267cbb954c39b581
b54d824db54d844d7b6c7b4d814d7b0f7b
87c5b2d6cdbbb3a8f483f465c3ba02ba01288e5601ad019ea055b3bbcd4cb210b54d014d
027b826c4d7b017b81217b817b2181217b0b7b
863bc5b2e8a477868286bbc181c1b383b37ca81301130141012c877486c0246a59101a85
1a4d7b213b7b017b81217b057b81217b0b7b
864d3b61c559b2e882e8a4778677cdc0cdc0cd408740054024d66a0b598559c5101a217b
867b217b217b217b067b81217b0c7b

%
% Compression made this file 26.46% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 297 w(Can)g(be)g(impro)m(v)-5
b(ed)58 b(b)l(y)g(using)h(special)g(heur)s(istics)g(\(r)s(ules)5772
5538 y(that)h(w)n(e)f(kno)m(w)-13 b(,)59 b(from)g(e)-6
b(xper)s(ience)m(,)58 b(will)i(get)g(us)e(to)i(the)5772
5785 y(solution)f(quic)l(kly\))p 0 TeXcolorgray 0 TeXcolorgray
10164 6387 a Ft(T)-8 b(echniques)21 b(in)e(Ar)s(ti\002cial)g
(Intelligence)g(\226)h(p)n(.)f(3)p 0 TeXcolorgray 4544
6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 4/View [ /XYZ null null null ] /Title (Recall: Propositional Logic Inference)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5096 2010 a Fx(Recall:)110 b(Pr)-6 b(opositional)87
b(Logic)h(Infer)-6 b(ence)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 5208 2663 a Fs(2.)p 0 TeXcolorgray 102
w Fp(T)-26 b(r)s(uth)60 b(tab)l(le)f(en)n(umer)n(ation:)77
b Fs(T)-26 b(o)60 b(automate)e(it,)j(w)n(e)e(need)f(an)5488
2907 y(algor)s(ithm)h(that)h(gener)n(ates)d(and)i(e)-6
b(v)h(aluates)57 b(all)j(possib)l(le)5488 3153 y(inter)6
b(pretations)59 b(of)h(propositions)e(in)h(our)g(language)p
0 TeXcolorgray 5475 3444 a @beginspecial 276 @llx 376
@lly 336 @urx 416 @ury 113 @rwi @setspecial
%%BeginDocument: red-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/red-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 735 string def


% load up the colormap
currentfile cmap readhexstring
140a09 748284 8c050b 3c4244 540408 bcc4c4 8c4a44 c40507 542220 242422 
740404 dce2e4 9c2a24 ac0506 340204 bc8e8c ecf3f0 541517 5c6264 9ca3a1 
e40306 741311 341312 9c0508 f4c2c4 640304 f4f4ec ac1314 6c4244 343533 
d40307 4c534f ac0a04 f4fdfb 740b0b fce4e2 ccd2cc 240a0c 949393 641412 
6c7370 9c0b08 d44a54 44020c acb4b4 441211 840b0b 540c0a 4c261c bc0506 
c4aaa4 741c24 640d0b dcc2c4 9c6264 242a24 d40a04 f4eae4 c40e04 f4f5f4 
4c5a54 241011 8c0a0a 544d4c bccacc a4aba8 443e3c 7c0b0b 5c0d0b 6c0c0b 
8c8e84 b40606 746a6c f40204 341a16 a40508 e4d6d4 fcfcf3 641c1c cc0406 
340b0b 541a1c e40a04 343a3c dc0208 949c98 747e7c 444a4c 342321 e4eae7 
ec0404 841516 bc0b05 6c1311 a40a06 440e0f c46664 f4eef4 2c1111 3c0c0b 
140e0c 848584 842e34 e4fef4 3c1313 2c1e1e d4dedc 441a14 fcf6f7 940a09 
f4d6d4 5c1416 aca6ac 9c1418 5c5254 740d14 b4bebc 841b1e 5c5d5b cccdcb 
5c0c14 ecbab4 6c0d14 fcfefc a49e9c cc6a6c b44644 dca2a4 fc7e84 947674 
dcbabc 64363c ac3634 b47878 bcbdbc a47e7c 7c4a4c fcaaac cc5a64 ac1a1c 
6c6c6c dc7674 843e3c 84625c fcdedf fcb6b4 8c1e1c dccecc 9c4a54 ccc2bc 
840509 342c2c bc1e24 442e2c 9c1a24 a43e44 ac6264 fccac4 848a8c 644a44 
8c9690 94060c 7c141c b40c05 d4d4d4 dc0a0c fcece0 7c6868 9c9c9e 4c0d0b 
843634 fcbeb4 1c0808 7c8381 444443 5c0207 2c2624 7c060c e4e4e3 a4a4a4 
fcc6cc fcf5ec 2c1717 3c3534 545453 2c0907 747574 b4b4b2 4c1212 7c1a1f 
2c2b2c 5c4a54 c4cbce acabac 3c3b3b 7c7d7b 4c4c4a ececec 1c110e ecfef9 
4c1e1c fcd5cf a41214 bc424c c4bec4 c4c5c4 54262c ac0214 646464 34161c 
9c0614 6c0204 b41614 fce5ec ccd6dc 64161c 840a14 540e14 640c14 d40c14 
c40a14 7c0b14 ecaeac b40414 a40614 cc0614 340e14 5c1c1c 34222c ec0614 
6c121c 3c0e14 dcdddc 940e14 fcecec 7c6a74 4c0e14 4c0204 545a57 3c1a1c 
fceef5 ac7e84 ac0a14 4c3e3c 8c8a8c 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

0f7b824d7b6c816c4d824d6c7b817b218421c721c721822167c782c7214d844d6c4d6c7b
117b
107b816c4d864df06c4d6c3b2181217b017b814d218821c7217b4d6cf06c4d814d7b027b
814d7b0b7b
0f7b814d7b897bd5f06c4d6c7b4d6c4d814d6c016c85ea4d6c4d6c7b817b4d024d037b81
4d7b0a7b
0f7b81217b017b834d6cd56c016c82f06cf081f0ea01ea84a6d5b54d7b027b014d107b
0f7b8221c77b827bf06c906cd590de858e33e6a2759b7d8990ea6cb581b57b127b
0f7b01218b7bb54d6c18f14e6f34a25be982e971e987e92e92609da6b54d844d217b214d
814d7b0b7b
107b8d216c4d6cf1112f3445435b6d294b834bca291b861b17718d23b54d814d2182214d
6c816c7b0a7b
0f7b9d3b7b6c3588a92f5d15432e6d4b0d475ca32047dc07cfd47ec9a64d217b4d824d6c
7b0a7b
0c7b914d3b7bb56c82ce2b4e4415432e6d294b473181315c835c4f1e548654071b0cabb5
4d824d614d014d0a7b
0a7b814d7b817b6c016c8d8283116faf5b22433e6d4b0d470701078e4f1e145a14544fd4
8491b56c7b4d7b0b7b
0e7b924d6c880ed9277ad3432e6d294b0d31074f1e548354145a14851454db172a908490
4d10217b0a7b
087b014d017b8b3b7b4d875fed6fda73d32e3e833e295e478447074f54140214025a88e5
1edf80d56c10217b0a7b
0b7b816c7b897b935011edd77a195b2e852e6d295e203182314f140314035a871407e0b4
d57bc77b0a7b
077b816c7b817b4d894d7b4deb5051ec047a2282222e3e883e295e0d475c1e5414011401
528a5a495a54e1d28af07b217b0a7b
077b814d7b017b8b4d7be8b0305fe3ed34bdd32e892e6d295e0d31074f5414011481525a
025a861407985bf0d57b0b7b
097b974d7b4db5cc3db95fa9275d19a22e963e6d4b0d4731071e5481541481145a015a87
54a507cf9a89ea7b0b7b
087b024d8b6c4deb62685fbc443445222e822e6d298529204731071e821e541482145a54
8954384f1ee1f28ab54d7b0a7b
087b834d7b4d6c946cbf62632dbc2f44450ab12e026d295e0d5c314f1e821e54148b1454
383a071e4fdfcb6c4d7b0a7b
097b014d016c96e4b9685fecd9dad37343963e6d294b0d473107e14f1e5481544f894f5c
314f07cf0cb54d7b0a7b
097b034d9225d11668a9d944da0a43b12e3ea1294b47a3318431074f1e4f894f5ca35c07
31e05b6c7b0b7b
097b944d7b4d6c25b6e2685f2f78197a22b12e026d174b0d830da34731813107820731a3
01a38647cfd2bd6c4d7b0a7b
0b7b016c94e43d16632dec2f784522b1432e3ea1174b0d5e0d478147318231472087205e
0d4b02666c7b0b7b
0b7b8c6c4d3f2562162dec2f78197a228b222e023ea1174b295e4b0d4782470d5e875e17
4b17d894b57b0b7b
087b814d7b817b4d874d483d6216685f2f852fda7a452243834302a16d816d2985295e4b
cf0d5e885eca1729e9dd9c6c7b0b7b
097b826c7b6c8d6ccc003dd1e2e711d904277a452281222e862e026d3e6d294b8c4b1729
6d028b96b1337f6c4d7b0a7b
077b944d7b6c4d6c4da469c6b6e2505fbc2f7844da457a4381432e012e823ea1178c17a1
6d3ea16d2e5b27ead54d7b0a7b
047b864d6c4d3b6c103b843b4dc58cc687c66216635fd9ec788178348134738173438143
2e832e3ea13e8b3ed82e3e0a5baf366cf04d7b0a7b
017b814d6c826c3bc501c501b281c5b201b28c8669643dd150e7bceca911783482344522
01228143968196d881d84386432e0a456f9d6c826c4d7b0a7b
964d3b61c559b20be8a477cd77cc8677cd7609006216505f875feca92f1134da4586455d
2243962273017388dd152f0f4d7b6c4d7b0a7b
886c10b2e8a477cc86bb83bb70a8b38bb313a846ae00acd168e7635f855fec2f78443402
340122877a452734450406b583b57b4d7b0b7b
8cc5b29305bb70a826659ec3bac381c3288928adee69c6d11650635f015f93a92f784434
4434450a34446f4434aa794d21c77b0c7b
9ae877bbb32665ba8cd076eeb8765703d01feec2693d25b9efe2635f835fa9d92f022f81
af448144118911bc4edeb54d21c7217b0b7b
8ca486a89ebad072c4ae42c2531d031d85c2b797693d628262d168016881635f815fbc01
bc8aa911bc63081cc9ea6c4d7b0e7b
8a77bba8bad0b8aec2531dbe86beb0be37be37be84be1de4b03d853dac25621668016882
2d08638263c868856881eaf06c4d014d0e7b
8977bb26bad0c4aeb71dbe81be0902098137098209be1d841db79758b601b6831662b916
8216b96b866b168f6e4db54d014d827b4d7b0d7b
8fa4867c6548d0eec4ae0353b7531dc21d811d53015301ae913fb8723ff39958694ab69f
a732a64db5f04d824d7b4d814d7b0e7b
88e87786b32665ba8cd082d072b801b891c41f3c1f3c1fee1228c346267cbb954c39b581
b54d824db54d844d7b6c7b4d814d7b0f7b
87c5b2d6cdbbb3a8f483f465c3ba02ba01288e5601ad019ea055b3bbcd4cb210b54d014d
027b826c4d7b017b81217b817b2181217b0b7b
863bc5b2e8a477868286bbc181c1b383b37ca81301130141012c877486c0246a59101a85
1a4d7b213b7b017b81217b057b81217b0b7b
864d3b61c559b2e882e8a4778677cdc0cdc0cd408740054024d66a0b598559c5101a217b
867b217b217b217b067b81217b0c7b

%
% Compression made this file 26.46% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 297 w(Can)g(be)g(impro)m(v)-5
b(ed)58 b(b)l(y)g(ignor)s(ing)h Fp(irrele)-6 b(v)h(ant)78
b Fs(propositions)5772 3691 y(\(that)60 b(do)f(not)g(appear)f(in)h(the)
g(sentence\))5121 4135 y(There)h(are)f(other)f(w)m(a)-6
b(ys)59 b(of)g(automating)g(propositional)f(logic)5121
4382 y(inf)-6 b(erence)5121 4832 y(W)g(e)59 b(will)i(look)d(at)i(an)f
(inf)-6 b(erence)58 b(procedure)f(called)i Fp(resolution)p
0 TeXcolorgray 0 TeXcolorgray 10164 6387 a Ft(T)-8 b(echniques)21
b(in)e(Ar)s(ti\002cial)g(Intelligence)g(\226)h(p)n(.)f(4)p
0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 5/View [ /XYZ null null null ] /Title (Unit Resolution Rule)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 6345 2044 a Fx(Unit)89 b(Resolution)e(Rule)p
0 TeXcolorgray 0 TeXcolorgray 5121 2668 a Fs(A)60 b Fo(literal)g
Fr(l)65 b Fs(is)59 b(a)g(proposition)g(or)g(the)g(negation)f(of)i(a)f
(proposition)5121 3018 y(Liter)n(als)h Fr(l)k Fs(and)59
b Fr(m)g Fs(are)g(called)g Fo(complementar)r(y)g(literals)h
Fs(if)g(one)f(is)5121 3261 y(the)h(negation)e(of)i(the)f(other)g(\(e)m
(.g.)73 b Fr(P)88 b Fs(and)58 b Fn(:)p Fr(P)28 b Fs(\))5180
3734 y Fm(Unit)49 b(Resolution)f Fl(inf)-5 b(erence)47
b(r)s(ule:)5180 4082 y(Let)g Fk(l)5518 4107 y Fj(1)5596
4082 y Fk(;)29 b(:)g(:)g(:)e(l)5953 4107 y Fi(k)6086
4082 y Fl(and)47 b Fk(m)h Fl(be)g(liter)n(als)5180 4325
y(And)f(let)h Fk(l)5815 4351 y Fi(i)5921 4325 y Fl(and)f
Fk(m)h Fl(be)f(complementar)5 b(y)48 b(liter)n(als)m(.)7287
4738 y Fk(l)7338 4764 y Fj(1)7454 4738 y Fh(_)38 b Fk(:)29
b(:)g(:)37 b Fh(_)h Fk(l)8050 4764 y Fi(k)8135 4738 y
Fk(;)373 b(m)p 6902 4815 2192 7 v 6902 4973 a(l)6953
4998 y Fj(1)7069 4973 y Fh(_)38 b Fk(:)29 b(:)g(:)37
b Fh(_)h Fk(l)7665 4998 y Fi(i)p Fg(\000)p Fj(1)7937
4973 y Fh(_)g Fk(l)8141 4998 y Fi(i)p Fj(+1)8411 4973
y Fh(_)g Fk(:)29 b(:)g(:)38 b Fh(_)g Fk(l)9008 4998 y
Fi(k)p 5121 3556 5752 7 v 5122 5174 7 1622 v 10866 5174
V 5121 5177 5752 7 v 5121 5462 a Ff(Example:)7264 5702
y Fr(P)74 b Fn(_)46 b Fr(Q;)448 b Fn(:)p Fr(Q)p 7264
5794 1351 9 v 7859 5983 a(P)p 0 TeXcolorgray 0 TeXcolorgray
10164 6387 a Ft(T)-8 b(echniques)21 b(in)e(Ar)s(ti\002cial)g
(Intelligence)g(\226)h(p)n(.)f(5)p 0 TeXcolorgray 4544
6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 6/View [ /XYZ null null null ] /Title (General Resolution Rule)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 6068 2044 a Fx(General)87 b(Resolution)g(Rule)p
0 TeXcolorgray 0 TeXcolorgray 5180 2696 a Fm(Resolution)49
b Fl(inf)-5 b(erence)47 b(r)s(ule:)5180 3043 y(Let)g
Fk(l)5518 3069 y Fj(1)5596 3043 y Fk(;)29 b(:)g(:)g(:)e(l)5953
3069 y Fi(k)6086 3043 y Fl(and)47 b Fk(m)6572 3069 y
Fj(1)6650 3043 y Fk(;)29 b(:)g(:)g(:)e(m)7107 3069 y
Fi(n)7248 3043 y Fl(be)48 b(liter)n(als)5180 3287 y(And)f(let)h
Fk(l)5815 3313 y Fi(i)5921 3287 y Fl(and)f Fk(m)6407
3313 y Fi(j)6527 3287 y Fl(be)h(complementar)5 b(y)48
b(liter)n(als)m(.)6834 3670 y Fk(l)6885 3696 y Fj(1)7001
3670 y Fh(_)38 b Fk(:)29 b(:)g(:)37 b Fh(_)h Fk(l)7597
3696 y Fi(k)7682 3670 y Fk(;)373 b(m)8254 3696 y Fj(1)8370
3670 y Fh(_)38 b Fk(:)29 b(:)g(:)37 b Fh(_)h Fk(m)9066
3696 y Fi(n)p 5491 3747 5013 7 v 5491 3904 a Fk(l)5542
3930 y Fj(1)5658 3904 y Fh(_)g Fk(:)29 b(:)g(:)37 b Fh(_)h
Fk(l)6254 3930 y Fi(i)p Fg(\000)p Fj(1)6526 3904 y Fh(_)h
Fk(l)6731 3930 y Fi(i)p Fj(+1)7001 3904 y Fh(_)f Fk(:)29
b(:)g(:)37 b Fh(_)h Fk(l)7597 3930 y Fi(k)7720 3904 y
Fh(_)h Fk(m)8025 3930 y Fj(1)8140 3904 y Fh(_)f Fk(:)29
b(:)g(:)37 b Fh(_)h Fk(m)8836 3930 y Fi(j)7 b Fg(\000)p
Fj(1)9124 3904 y Fh(_)38 b Fk(m)9428 3930 y Fi(j)7 b
Fj(+1)9713 3904 y Fh(_)38 b Fk(:)29 b(:)g(:)37 b Fh(_)h
Fk(m)10409 3930 y Fi(n)5180 4290 y Fl(The)48 b(ne)m(w)f(clause)g(is)i
(called)e(the)g Fm(resolvent)p 5121 2518 5752 7 v 5122
4348 7 1834 v 10866 4348 V 5121 4351 5752 7 v 5121 4635
a Ff(Example:)6894 4875 y Fr(P)74 b Fn(_)46 b Fr(Q)g
Fn(_)f Fr(S)q(;)449 b Fn(:)p Fr(Q)45 b Fn(_)h Fr(R)p
6894 4968 2091 9 v 7484 5157 a(P)74 b Fn(_)46 b Fr(S)58
b Fn(_)46 b Fr(R)p 0 TeXcolorgray 0 TeXcolorgray 10164
6387 a Ft(T)-8 b(echniques)21 b(in)e(Ar)s(ti\002cial)g(Intelligence)g
(\226)h(p)n(.)f(6)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651
a eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 7/View [ /XYZ null null null ] /Title (Conjunctive Normal Form)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5917 2010 a Fx(Conjuncti)l(v)l(e)87 b(Normal)i(F)-9
b(orm)p 0 TeXcolorgray 0 TeXcolorgray 5121 2668 a Fs(A)60
b Fo(conjunction)j Fs(of)c(liter)n(als)h(is)g(a)f(sentence)f(of)h(the)g
(f)-6 b(or)5 b(m:)5121 2912 y Fr(l)5181 2943 y Fe(1)5316
2912 y Fn(^)46 b Fr(:)34 b(:)g(:)47 b Fn(^)f Fr(l)6027
2948 y Fd(k)5121 3362 y Fs(A)60 b Fo(disjunction)j Fs(of)c(liter)n(als)
h(\(or)f(a)g Fo(c)l(lause)p Fs(\))g(is)h(a)f(sentence)f(of)h(the)5121
3606 y(f)-6 b(or)5 b(m:)74 b Fr(l)5740 3637 y Fe(1)5875
3606 y Fn(_)45 b Fr(:)34 b(:)g(:)48 b Fn(_)e Fr(l)6586
3642 y Fd(k)5121 4056 y Fs(Note)60 b(that)f(the)h(resolution)e(r)s(ule)
i(applies)f(to)g(tw)n(o)h Fp(disjunctions)k Fs(of)5121
4300 y(propositions)59 b(only)p 0 TeXcolorgray 0 TeXcolorgray
10164 6387 a Ft(T)-8 b(echniques)21 b(in)e(Ar)s(ti\002cial)g
(Intelligence)g(\226)h(p)n(.)f(7)p 0 TeXcolorgray 4544
6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 8/View [ /XYZ null null null ] /Title (Conjunctive Normal Form)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5917 2010 a Fx(Conjuncti)l(v)l(e)87 b(Normal)i(F)-9
b(orm)p 0 TeXcolorgray 0 TeXcolorgray 5180 2726 a Fs(A)94
b(f)-6 b(or)5 b(m)n(ula)93 b(is)g(in)h Fo(conjunctive)h(normal)f(f)l
(orm)f(\(CNF\))i Fs(if)f(it)g(is)g(a)5180 2970 y(conjunctions)58
b(of)i(disjunction)f(of)g(liter)n(als)m(,)h(i.e)m(.)74
b(if)60 b(it)g(is)g(of)f(the)h(f)-6 b(or)5 b(m:)7401
3400 y Fr(A)7553 3431 y Fe(1)7687 3400 y Fn(^)45 b Fr(:)34
b(:)g(:)48 b Fn(^)d Fr(A)8489 3431 y Fd(n)5180 3830 y
Fs(where)59 b(each)f Fr(A)6495 3861 y Fd(i)6558 3830
y Fs(,)i Fr(i)d Fc(=)h(1)p Fr(;)34 b(:)g(:)g(:)i(;)e(n)60
b Fs(is)g(of)f(the)g(f)-6 b(or)5 b(m)7496 4260 y Fr(l)7556
4291 y Fe(1)7691 4260 y Fn(_)46 b Fr(:)34 b(:)g(:)47
b Fn(_)f Fr(l)8402 4296 y Fd(k)5180 4690 y Fs(where)59
b(each)f Fr(l)6403 4721 y Fd(j)6486 4690 y Fs(,)i Fr(j)68
b Fc(=)58 b(1)p Fr(;)34 b(:)g(:)g(:)j(;)d(k)7 b Fs(,)60
b(is)g(a)f(liter)n(al)p 5121 2518 5752 7 v 5122 4806
7 2292 v 10866 4806 V 5121 4809 5752 7 v 5121 5210 a(Example:)6419
5640 y Fc(\()p Fr(P)74 b Fn(_)45 b Fr(Q)p Fc(\))h Fn(^)g
Fc(\()p Fr(R)h Fn(_)f Fr(S)58 b Fn(_)46 b Fr(T)28 b Fc(\))45
b Fn(^)h Fc(\()p Fn(:)p Fr(S)58 b Fn(_)45 b Fr(P)28 b
Fc(\))5121 6077 y Fs(Ev)-5 b(er)6 b(y)60 b(sentence)e(of)h
(propositional)g(logic)g(can)g(be)f(tr)n(ansf)-6 b(or)5
b(med)5121 6323 y(into)60 b(a)f(logically)h(equiv)-5
b(alent)58 b(sentence)g(in)h(CNF)p 0 TeXcolorgray 0 TeXcolorgray
10164 6387 a Ft(T)-8 b(echniques)21 b(in)e(Ar)s(ti\002cial)g
(Intelligence)g(\226)h(p)n(.)f(8)p 0 TeXcolorgray 4544
6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.9) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 9/View [ /XYZ null null null ] /Title (Converting to CNF)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 6483 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)i(CNF)p
0 TeXcolorgray 0 TeXcolorgray 5180 2725 a Fo(Pr)l(ocedure)60
b(f)l(or)g(con)-9 b(ver)t(ting)61 b(to)f(CNF)5180 2862
y
SDict begin H.S end
 5180 2862 a 5180 2862 a
SDict begin 14.15991 H.A end
 5180 2862 a 5180 2862 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 5180
2862 a 0 TeXcolorgray 5266 3059 a Fs(1.)p 0 TeXcolorgray
102 w(Use)89 b(equiv)-5 b(alence)86 b Fc(\()p Fr(A)105
b Fn($)g Fr(B)10 b Fc(\))105 b Fn(\021)g Fc(\()p Fr(A)g
Fn(!)f Fr(B)10 b Fc(\))65 b Fn(^)g Fc(\()p Fr(B)115 b
Fn(!)105 b Fr(A)p Fc(\))88 b Fs(to)5546 3304 y(eliminate)60
b Fn($)5180 3396 y
SDict begin H.S end
 5180 3396 a 5180 3396 a
SDict begin 14.15991 H.A end
 5180 3396
a 5180 3396 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 5180 3396 a 0 TeXcolorgray 5266 3638 a
Fs(2.)p 0 TeXcolorgray 102 w(User)f(equiv)-5 b(alence)58
b Fr(A)f Fn(!)g Fr(B)67 b Fn(\021)57 b(:)p Fr(A)46 b
Fn(_)f Fr(B)70 b Fs(to)59 b(eliminate)h Fn(!)5180 3772
y
SDict begin H.S end
 5180 3772 a 5180 3772 a
SDict begin 14.15991 H.A end
 5180 3772 a 5180 3772 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 5180
3772 a 0 TeXcolorgray 5266 3971 a Fs(3.)p 0 TeXcolorgray
102 w(Use)f(De)g(Morgan')-11 b(s)59 b(la)l(ws)5546 4215
y Fn(:)p Fc(\()p Fr(A)45 b Fn(^)h Fr(B)10 b Fc(\))57
b Fn(\021)g(:)p Fr(A)45 b Fn(_)h(:)p Fr(B)69 b Fs(and)5546
4463 y Fn(:)p Fc(\()p Fr(A)45 b Fn(_)h Fr(B)10 b Fc(\))57
b Fn(\021)g(:)p Fr(A)45 b Fn(^)h(:)p Fr(B)5546 4714 y
Fs(to)60 b(push)e Fn(:)h Fs(immediately)g(bef)-6 b(ore)58
b(propositions)5180 4848 y
SDict begin H.S end
 5180 4848 a 5180 4848 a
SDict begin 14.15991 H.A end
 5180
4848 a 5180 4848 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 5180 4848 a 0 TeXcolorgray 5266 5047
a Fs(4.)p 0 TeXcolorgray 102 w(Use)h(equiv)-5 b(alence)57
b Fn(::)p Fr(A)g Fn(\021)g Fr(A)i Fs(to)h(eliminate)f(doub)l(le)f
(negation)5180 5184 y
SDict begin H.S end
 5180 5184 a 5180 5184 a
SDict begin 14.15991 H.A end
 5180 5184
a 5180 5184 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 5180 5184 a 0 TeXcolorgray 5266 5381 a
Fs(5.)p 0 TeXcolorgray 102 w(Use)j(the)g(distr)s(ib)l(utiv)-5
b(e)61 b(la)l(w)h Fr(A)46 b Fn(_)h Fc(\()p Fr(B)57 b
Fn(^)47 b Fr(C)15 b Fc(\))60 b Fn(\021)g Fc(\()p Fr(A)47
b Fn(_)g Fr(B)10 b Fc(\))47 b Fn(^)g Fc(\()p Fr(A)f Fn(_)h
Fr(C)15 b Fc(\))5546 5631 y Fs(to)60 b(\002nalise)e(the)h(con)l(v)-5
b(ersion)p 5121 2518 5752 7 v 5122 5778 7 3264 v 10866
5778 V 5121 5781 5752 7 v 5121 5978 a Fp(Note:)79 b Fs(distr)s(ib)l
(utiv)-5 b(e)60 b(la)l(w)f Fr(A)46 b Fn(^)f Fc(\()p Fr(B)56
b Fn(_)46 b Fr(C)15 b Fc(\))56 b Fn(\021)h Fc(\()p Fr(A)46
b Fn(^)f Fr(B)10 b Fc(\))46 b Fn(_)g Fc(\()p Fr(A)f Fn(^)h
Fr(C)15 b Fc(\))58 b Fs(is)i(not)5121 6224 y(actually)g(needed)p
0 TeXcolorgray 0 TeXcolorgray 10164 6387 a Ft(T)-8 b(echniques)21
b(in)e(Ar)s(ti\002cial)g(Intelligence)g(\226)h(p)n(.)f(9)p
0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 10/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
10124 6387 a Ft(T)-8 b(echniques)21 b(in)f(Ar)s(ti\002cial)e
(Intelligence)i(\226)g(p)n(.)f(10)p 0 TeXcolorgray 4544
6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.11) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 11/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5552 3138 a Fb(\()p
Fh(:)p Fk(P)5845 3164 y Fj(1)5959 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6405 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6530
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6861 3164 y Fj(3)6938
3138 y Fb(\)\))47 b Fh(!)h Fk(P)7450 3164 y Fj(4)7527
3138 y Fb(\))38 b Fh(^)h Fb(\()p Fk(P)7964 3164 y Fj(4)8088
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8601 3164 y Fj(1)8716
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)9162 3164 y Fj(2)p
1 0 0 TeXcolorrgb 9286 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9617 3164 y Fj(3)9694 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
172 w Fa(S)48 b(1)p 0 TeXcolorgray 0 TeXcolorgray 10124
6387 a Ft(T)-8 b(echniques)21 b(in)f(Ar)s(ti\002cial)e(Intelligence)i
(\226)g(p)n(.)f(11)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544
6651 a eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.12) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 12/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5513 3138 a Fb(\()p
Fh(:)p Fk(P)5806 3164 y Fj(1)5921 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6367 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6492
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6823 3164 y Fj(3)6899
3138 y Fb(\)\))48 b Fh(!)g Fk(P)7412 3164 y Fj(4)7489
3138 y Fb(\))38 b Fh(^)g Fb(\()p Fk(P)7925 3164 y Fj(4)8050
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8563 3164 y Fj(1)8678
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)9124 3164 y Fj(2)p
1 0 0 TeXcolorrgb 9248 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9579 3164 y Fj(3)9656 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
248 w Fa(S)48 b(1)5513 3431 y Fb(\()p Fh(:)p Fk(P)5806
3457 y Fj(1)5921 3431 y Fh(^)38 b Fb(\()p 1 0 0 TeXcolorrgb
Fh(::)p 0 TeXcolorgray Fk(P)6482 3457 y Fj(2)6597 3431
y Fh(_)g Fk(P)6861 3457 y Fj(3)6938 3431 y Fb(\)\))47
b Fh(!)h Fk(P)7450 3457 y Fj(4)7527 3431 y Fb(\))38 b
Fh(^)h Fb(\()p Fk(P)7964 3457 y Fj(4)8088 3431 y Fh(!)48
b Fb(\()p Fh(:)p Fk(P)8601 3457 y Fj(1)8716 3431 y Fh(^)38
b Fb(\()p 1 0 0 TeXcolorrgb Fh(::)p 0 TeXcolorgray Fk(P)9277
3457 y Fj(2)9392 3431 y Fh(_)g Fk(P)9656 3457 y Fj(3)9732
3431 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 172 w Fa(S)48 b(2)p 0 TeXcolorgray
0 TeXcolorgray 10124 6387 a Ft(T)-8 b(echniques)21 b(in)f(Ar)s
(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f(12)p 0 TeXcolorgray
4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.13) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 13/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5513 3138 a Fb(\()p
Fh(:)p Fk(P)5806 3164 y Fj(1)5921 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6367 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6492
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6823 3164 y Fj(3)6899
3138 y Fb(\)\))48 b Fh(!)g Fk(P)7412 3164 y Fj(4)7489
3138 y Fb(\))38 b Fh(^)g Fb(\()p Fk(P)7925 3164 y Fj(4)8050
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8563 3164 y Fj(1)8678
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)9124 3164 y Fj(2)p
1 0 0 TeXcolorrgb 9248 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9579 3164 y Fj(3)9656 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
248 w Fa(S)48 b(1)5513 3431 y Fb(\()p Fh(:)p Fk(P)5806
3457 y Fj(1)5921 3431 y Fh(^)38 b Fb(\()p 1 0 0 TeXcolorrgb
Fh(::)p 0 TeXcolorgray Fk(P)6482 3457 y Fj(2)6597 3431
y Fh(_)g Fk(P)6861 3457 y Fj(3)6938 3431 y Fb(\)\))47
b Fh(!)h Fk(P)7450 3457 y Fj(4)7527 3431 y Fb(\))38 b
Fh(^)h Fb(\()p Fk(P)7964 3457 y Fj(4)8088 3431 y Fh(!)48
b Fb(\()p Fh(:)p Fk(P)8601 3457 y Fj(1)8716 3431 y Fh(^)38
b Fb(\()p 1 0 0 TeXcolorrgb Fh(::)p 0 TeXcolorgray Fk(P)9277
3457 y Fj(2)9392 3431 y Fh(_)g Fk(P)9656 3457 y Fj(3)9732
3431 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 172 w Fa(S)48 b(2)5513 3723
y Fb(\()p Fh(:)p Fk(P)5806 3749 y Fj(1)5921 3723 y Fh(^)38
b Fb(\()p Fk(P)6252 3749 y Fj(2)6367 3723 y Fh(_)g Fk(P)6631
3749 y Fj(3)6708 3723 y Fb(\)\))p 1 0 0 TeXcolorrgb 48
w Fh(!)p 0 TeXcolorgray 48 w Fk(P)7221 3749 y Fj(4)7298
3723 y Fb(\))g Fh(^)g Fb(\()p Fk(P)7734 3749 y Fj(4)p
1 0 0 TeXcolorrgb 7859 3723 a Fh(!)p 0 TeXcolorgray 48
w Fb(\()p Fh(:)p Fk(P)8372 3749 y Fj(1)8486 3723 y Fh(^)g
Fb(\()p Fk(P)8817 3749 y Fj(2)8932 3723 y Fh(_)g Fk(P)9196
3749 y Fj(3)9273 3723 y Fb(\)\)\))p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 631 w
Fa(S)48 b(4)p 0 TeXcolorgray 0 TeXcolorgray 10124 6387
a Ft(T)-8 b(echniques)21 b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g
(p)n(.)f(13)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a
eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 14/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5513 3138 a Fb(\()p
Fh(:)p Fk(P)5806 3164 y Fj(1)5921 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6367 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6492
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6823 3164 y Fj(3)6899
3138 y Fb(\)\))48 b Fh(!)g Fk(P)7412 3164 y Fj(4)7489
3138 y Fb(\))38 b Fh(^)g Fb(\()p Fk(P)7925 3164 y Fj(4)8050
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8563 3164 y Fj(1)8678
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)9124 3164 y Fj(2)p
1 0 0 TeXcolorrgb 9248 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9579 3164 y Fj(3)9656 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
248 w Fa(S)48 b(1)5513 3431 y Fb(\()p Fh(:)p Fk(P)5806
3457 y Fj(1)5921 3431 y Fh(^)38 b Fb(\()p 1 0 0 TeXcolorrgb
Fh(::)p 0 TeXcolorgray Fk(P)6482 3457 y Fj(2)6597 3431
y Fh(_)g Fk(P)6861 3457 y Fj(3)6938 3431 y Fb(\)\))47
b Fh(!)h Fk(P)7450 3457 y Fj(4)7527 3431 y Fb(\))38 b
Fh(^)h Fb(\()p Fk(P)7964 3457 y Fj(4)8088 3431 y Fh(!)48
b Fb(\()p Fh(:)p Fk(P)8601 3457 y Fj(1)8716 3431 y Fh(^)38
b Fb(\()p 1 0 0 TeXcolorrgb Fh(::)p 0 TeXcolorgray Fk(P)9277
3457 y Fj(2)9392 3431 y Fh(_)g Fk(P)9656 3457 y Fj(3)9732
3431 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 172 w Fa(S)48 b(2)5513 3723
y Fb(\()p Fh(:)p Fk(P)5806 3749 y Fj(1)5921 3723 y Fh(^)38
b Fb(\()p Fk(P)6252 3749 y Fj(2)6367 3723 y Fh(_)g Fk(P)6631
3749 y Fj(3)6708 3723 y Fb(\)\))p 1 0 0 TeXcolorrgb 48
w Fh(!)p 0 TeXcolorgray 48 w Fk(P)7221 3749 y Fj(4)7298
3723 y Fb(\))g Fh(^)g Fb(\()p Fk(P)7734 3749 y Fj(4)p
1 0 0 TeXcolorrgb 7859 3723 a Fh(!)p 0 TeXcolorgray 48
w Fb(\()p Fh(:)p Fk(P)8372 3749 y Fj(1)8486 3723 y Fh(^)g
Fb(\()p Fk(P)8817 3749 y Fj(2)8932 3723 y Fh(_)g Fk(P)9196
3749 y Fj(3)9273 3723 y Fb(\)\)\))p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 631 w
Fa(S)48 b(4)5513 4016 y Fb(\()p 1 0 0 TeXcolorrgb Fh(:)p
Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)5988 4042 y Fj(1)p
1 0 0 TeXcolorrgb 6103 4016 a Fh(^)p 0 TeXcolorgray 38
w Fb(\()p Fk(P)6434 4042 y Fj(2)6549 4016 y Fh(_)38 b
Fk(P)6813 4042 y Fj(3)6890 4016 y Fb(\))p 1 0 0 TeXcolorrgb(\))p
0 TeXcolorgray 38 w Fh(_)g Fk(P)7326 4042 y Fj(4)7403
4016 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)7954 4042 y
Fj(4)8069 4016 y Fh(_)g Fb(\()p Fh(:)p Fk(P)8515 4042
y Fj(1)8630 4016 y Fh(^)g Fb(\()p Fk(P)8961 4042 y Fj(2)9076
4016 y Fh(_)g Fk(P)9340 4042 y Fj(3)9417 4016 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 487 w Fa(S)48
b(2)p 0 TeXcolorgray 0 TeXcolorgray 10124 6387 a Ft(T)-8
b(echniques)21 b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f
(14)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.15) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 15/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5513 3138 a Fb(\()p
Fh(:)p Fk(P)5806 3164 y Fj(1)5921 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6367 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6492
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6823 3164 y Fj(3)6899
3138 y Fb(\)\))48 b Fh(!)g Fk(P)7412 3164 y Fj(4)7489
3138 y Fb(\))38 b Fh(^)g Fb(\()p Fk(P)7925 3164 y Fj(4)8050
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8563 3164 y Fj(1)8678
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)9124 3164 y Fj(2)p
1 0 0 TeXcolorrgb 9248 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9579 3164 y Fj(3)9656 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
248 w Fa(S)48 b(1)5513 3431 y Fb(\()p Fh(:)p Fk(P)5806
3457 y Fj(1)5921 3431 y Fh(^)38 b Fb(\()p 1 0 0 TeXcolorrgb
Fh(::)p 0 TeXcolorgray Fk(P)6482 3457 y Fj(2)6597 3431
y Fh(_)g Fk(P)6861 3457 y Fj(3)6938 3431 y Fb(\)\))47
b Fh(!)h Fk(P)7450 3457 y Fj(4)7527 3431 y Fb(\))38 b
Fh(^)h Fb(\()p Fk(P)7964 3457 y Fj(4)8088 3431 y Fh(!)48
b Fb(\()p Fh(:)p Fk(P)8601 3457 y Fj(1)8716 3431 y Fh(^)38
b Fb(\()p 1 0 0 TeXcolorrgb Fh(::)p 0 TeXcolorgray Fk(P)9277
3457 y Fj(2)9392 3431 y Fh(_)g Fk(P)9656 3457 y Fj(3)9732
3431 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 172 w Fa(S)48 b(2)5513 3723
y Fb(\()p Fh(:)p Fk(P)5806 3749 y Fj(1)5921 3723 y Fh(^)38
b Fb(\()p Fk(P)6252 3749 y Fj(2)6367 3723 y Fh(_)g Fk(P)6631
3749 y Fj(3)6708 3723 y Fb(\)\))p 1 0 0 TeXcolorrgb 48
w Fh(!)p 0 TeXcolorgray 48 w Fk(P)7221 3749 y Fj(4)7298
3723 y Fb(\))g Fh(^)g Fb(\()p Fk(P)7734 3749 y Fj(4)p
1 0 0 TeXcolorrgb 7859 3723 a Fh(!)p 0 TeXcolorgray 48
w Fb(\()p Fh(:)p Fk(P)8372 3749 y Fj(1)8486 3723 y Fh(^)g
Fb(\()p Fk(P)8817 3749 y Fj(2)8932 3723 y Fh(_)g Fk(P)9196
3749 y Fj(3)9273 3723 y Fb(\)\)\))p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 631 w
Fa(S)48 b(4)5513 4016 y Fb(\()p 1 0 0 TeXcolorrgb Fh(:)p
Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)5988 4042 y Fj(1)p
1 0 0 TeXcolorrgb 6103 4016 a Fh(^)p 0 TeXcolorgray 38
w Fb(\()p Fk(P)6434 4042 y Fj(2)6549 4016 y Fh(_)38 b
Fk(P)6813 4042 y Fj(3)6890 4016 y Fb(\))p 1 0 0 TeXcolorrgb(\))p
0 TeXcolorgray 38 w Fh(_)g Fk(P)7326 4042 y Fj(4)7403
4016 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)7954 4042 y
Fj(4)8069 4016 y Fh(_)g Fb(\()p Fh(:)p Fk(P)8515 4042
y Fj(1)8630 4016 y Fh(^)g Fb(\()p Fk(P)8961 4042 y Fj(2)9076
4016 y Fh(_)g Fk(P)9340 4042 y Fj(3)9417 4016 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 487 w Fa(S)48
b(2)5513 4309 y Fb(\(\()p 1 0 0 TeXcolorrgb Fh(::)p 0
TeXcolorgray Fk(P)5988 4334 y Fj(1)6103 4309 y Fh(_)p
1 0 0 TeXcolorrgb 38 w(:)p Fb(\()p 0 TeXcolorgray Fk(P)6549
4334 y Fj(2)p 1 0 0 TeXcolorrgb 6664 4309 a Fh(_)p 0
TeXcolorgray 38 w Fk(P)6928 4334 y Fj(3)p 1 0 0 TeXcolorrgb
7005 4309 a Fb(\))p 0 TeXcolorgray(\))38 b Fh(_)g Fk(P)7441
4334 y Fj(4)7518 4309 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)8069 4334 y Fj(4)8184 4309 y Fh(_)g Fb(\()p Fh(:)p
Fk(P)8630 4334 y Fj(1)8745 4309 y Fh(^)g Fb(\()p Fk(P)9076
4334 y Fj(2)9191 4309 y Fh(_)g Fk(P)9455 4334 y Fj(3)9532
4309 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 372 w Fa(S)48 b(3)p
0 TeXcolorgray 0 TeXcolorgray 10124 6387 a Ft(T)-8 b(echniques)21
b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f(15)p
0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.16) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 16/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5513 3138 a Fb(\()p
Fh(:)p Fk(P)5806 3164 y Fj(1)5921 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6367 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6492
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6823 3164 y Fj(3)6899
3138 y Fb(\)\))48 b Fh(!)g Fk(P)7412 3164 y Fj(4)7489
3138 y Fb(\))38 b Fh(^)g Fb(\()p Fk(P)7925 3164 y Fj(4)8050
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8563 3164 y Fj(1)8678
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)9124 3164 y Fj(2)p
1 0 0 TeXcolorrgb 9248 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9579 3164 y Fj(3)9656 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
248 w Fa(S)48 b(1)5513 3431 y Fb(\()p Fh(:)p Fk(P)5806
3457 y Fj(1)5921 3431 y Fh(^)38 b Fb(\()p 1 0 0 TeXcolorrgb
Fh(::)p 0 TeXcolorgray Fk(P)6482 3457 y Fj(2)6597 3431
y Fh(_)g Fk(P)6861 3457 y Fj(3)6938 3431 y Fb(\)\))47
b Fh(!)h Fk(P)7450 3457 y Fj(4)7527 3431 y Fb(\))38 b
Fh(^)h Fb(\()p Fk(P)7964 3457 y Fj(4)8088 3431 y Fh(!)48
b Fb(\()p Fh(:)p Fk(P)8601 3457 y Fj(1)8716 3431 y Fh(^)38
b Fb(\()p 1 0 0 TeXcolorrgb Fh(::)p 0 TeXcolorgray Fk(P)9277
3457 y Fj(2)9392 3431 y Fh(_)g Fk(P)9656 3457 y Fj(3)9732
3431 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 172 w Fa(S)48 b(2)5513 3723
y Fb(\()p Fh(:)p Fk(P)5806 3749 y Fj(1)5921 3723 y Fh(^)38
b Fb(\()p Fk(P)6252 3749 y Fj(2)6367 3723 y Fh(_)g Fk(P)6631
3749 y Fj(3)6708 3723 y Fb(\)\))p 1 0 0 TeXcolorrgb 48
w Fh(!)p 0 TeXcolorgray 48 w Fk(P)7221 3749 y Fj(4)7298
3723 y Fb(\))g Fh(^)g Fb(\()p Fk(P)7734 3749 y Fj(4)p
1 0 0 TeXcolorrgb 7859 3723 a Fh(!)p 0 TeXcolorgray 48
w Fb(\()p Fh(:)p Fk(P)8372 3749 y Fj(1)8486 3723 y Fh(^)g
Fb(\()p Fk(P)8817 3749 y Fj(2)8932 3723 y Fh(_)g Fk(P)9196
3749 y Fj(3)9273 3723 y Fb(\)\)\))p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 631 w
Fa(S)48 b(4)5513 4016 y Fb(\()p 1 0 0 TeXcolorrgb Fh(:)p
Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)5988 4042 y Fj(1)p
1 0 0 TeXcolorrgb 6103 4016 a Fh(^)p 0 TeXcolorgray 38
w Fb(\()p Fk(P)6434 4042 y Fj(2)6549 4016 y Fh(_)38 b
Fk(P)6813 4042 y Fj(3)6890 4016 y Fb(\))p 1 0 0 TeXcolorrgb(\))p
0 TeXcolorgray 38 w Fh(_)g Fk(P)7326 4042 y Fj(4)7403
4016 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)7954 4042 y
Fj(4)8069 4016 y Fh(_)g Fb(\()p Fh(:)p Fk(P)8515 4042
y Fj(1)8630 4016 y Fh(^)g Fb(\()p Fk(P)8961 4042 y Fj(2)9076
4016 y Fh(_)g Fk(P)9340 4042 y Fj(3)9417 4016 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 487 w Fa(S)48
b(2)5513 4309 y Fb(\(\()p 1 0 0 TeXcolorrgb Fh(::)p 0
TeXcolorgray Fk(P)5988 4334 y Fj(1)6103 4309 y Fh(_)p
1 0 0 TeXcolorrgb 38 w(:)p Fb(\()p 0 TeXcolorgray Fk(P)6549
4334 y Fj(2)p 1 0 0 TeXcolorrgb 6664 4309 a Fh(_)p 0
TeXcolorgray 38 w Fk(P)6928 4334 y Fj(3)p 1 0 0 TeXcolorrgb
7005 4309 a Fb(\))p 0 TeXcolorgray(\))38 b Fh(_)g Fk(P)7441
4334 y Fj(4)7518 4309 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)8069 4334 y Fj(4)8184 4309 y Fh(_)g Fb(\()p Fh(:)p
Fk(P)8630 4334 y Fj(1)8745 4309 y Fh(^)g Fb(\()p Fk(P)9076
4334 y Fj(2)9191 4309 y Fh(_)g Fk(P)9455 4334 y Fj(3)9532
4309 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 372 w Fa(S)48 b(3)5513
4601 y Fb(\(\()p Fk(P)5758 4627 y Fj(1)p 1 0 0 TeXcolorrgb
5873 4601 a Fh(_)38 b Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)6319
4627 y Fj(2)p 1 0 0 TeXcolorrgb 6434 4601 a Fh(^)p 0
TeXcolorgray 38 w(:)p Fk(P)6813 4627 y Fj(3)p 1 0 0 TeXcolorrgb
6890 4601 a Fb(\))p 0 TeXcolorgray(\))g Fh(_)g Fk(P)7326
4627 y Fj(4)7403 4601 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)7954 4627 y Fj(4)p 1 0 0 TeXcolorrgb 8069 4601 a
Fh(_)g Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)8515 4627 y
Fj(1)p 1 0 0 TeXcolorrgb 8630 4601 a Fh(^)p 0 TeXcolorgray
38 w Fb(\()p Fk(P)8961 4627 y Fj(2)9076 4601 y Fh(_)g
Fk(P)9340 4627 y Fj(3)p 1 0 0 TeXcolorrgb 9417 4601 a
Fb(\))p 0 TeXcolorgray(\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 487 w
Fa(S)48 b(3)p 0 TeXcolorgray 0 TeXcolorgray 10124 6387
a Ft(T)-8 b(echniques)21 b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g
(p)n(.)f(16)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a
eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.17) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 17/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5208 3138 a Fb(\()p
Fh(:)p Fk(P)5501 3164 y Fj(1)5616 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6062 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6186
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6517 3164 y Fj(3)6594
3138 y Fb(\)\))47 b Fh(!)i Fk(P)7107 3164 y Fj(4)7183
3138 y Fb(\))39 b Fh(^)f Fb(\()p Fk(P)7620 3164 y Fj(4)7744
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8257 3164 y Fj(1)8372
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)8818 3164 y Fj(2)p
1 0 0 TeXcolorrgb 8942 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9273 3164 y Fj(3)9350 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1074 w Fa(S)48 b(1)5208 3431 y Fb(\()p Fh(:)p Fk(P)5501
3457 y Fj(1)5616 3431 y Fh(^)38 b Fb(\()p 1 0 0 TeXcolorrgb
Fh(::)p 0 TeXcolorgray Fk(P)6177 3457 y Fj(2)6291 3431
y Fh(_)g Fk(P)6555 3457 y Fj(3)6632 3431 y Fb(\)\))48
b Fh(!)g Fk(P)7145 3457 y Fj(4)7222 3431 y Fb(\))38 b
Fh(^)g Fb(\()p Fk(P)7658 3457 y Fj(4)7782 3431 y Fh(!)48
b Fb(\()p Fh(:)p Fk(P)8295 3457 y Fj(1)8410 3431 y Fh(^)38
b Fb(\()p 1 0 0 TeXcolorrgb Fh(::)p 0 TeXcolorgray Fk(P)8971
3457 y Fj(2)9086 3431 y Fh(_)g Fk(P)9350 3457 y Fj(3)9427
3431 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 997 w Fa(S)48 b(2)5208 3723
y Fb(\()p Fh(:)p Fk(P)5501 3749 y Fj(1)5616 3723 y Fh(^)38
b Fb(\()p Fk(P)5947 3749 y Fj(2)6062 3723 y Fh(_)g Fk(P)6326
3749 y Fj(3)6402 3723 y Fb(\)\))p 1 0 0 TeXcolorrgb 48
w Fh(!)p 0 TeXcolorgray 48 w Fk(P)6915 3749 y Fj(4)6992
3723 y Fb(\))g Fh(^)g Fb(\()p Fk(P)7428 3749 y Fj(4)p
1 0 0 TeXcolorrgb 7553 3723 a Fh(!)p 0 TeXcolorgray 48
w Fb(\()p Fh(:)p Fk(P)8066 3749 y Fj(1)8181 3723 y Fh(^)g
Fb(\()p Fk(P)8512 3749 y Fj(2)8627 3723 y Fh(_)g Fk(P)8891
3749 y Fj(3)8968 3723 y Fb(\)\)\))p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1456
w Fa(S)48 b(4)5208 4016 y Fb(\()p 1 0 0 TeXcolorrgb Fh(:)p
Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)5683 4042 y Fj(1)p
1 0 0 TeXcolorrgb 5797 4016 a Fh(^)p 0 TeXcolorgray 38
w Fb(\()p Fk(P)6128 4042 y Fj(2)6243 4016 y Fh(_)38 b
Fk(P)6507 4042 y Fj(3)6584 4016 y Fb(\))p 1 0 0 TeXcolorrgb(\))p
0 TeXcolorgray 38 w Fh(_)g Fk(P)7020 4042 y Fj(4)7097
4016 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)7648 4042 y
Fj(4)7763 4016 y Fh(_)g Fb(\()p Fh(:)p Fk(P)8209 4042
y Fj(1)8324 4016 y Fh(^)g Fb(\()p Fk(P)8655 4042 y Fj(2)8770
4016 y Fh(_)g Fk(P)9034 4042 y Fj(3)9111 4016 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1313 w
Fa(S)48 b(2)5208 4309 y Fb(\(\()p 1 0 0 TeXcolorrgb Fh(::)p
0 TeXcolorgray Fk(P)5683 4334 y Fj(1)5797 4309 y Fh(_)p
1 0 0 TeXcolorrgb 38 w(:)p Fb(\()p 0 TeXcolorgray Fk(P)6243
4334 y Fj(2)p 1 0 0 TeXcolorrgb 6358 4309 a Fh(_)p 0
TeXcolorgray 38 w Fk(P)6622 4334 y Fj(3)p 1 0 0 TeXcolorrgb
6699 4309 a Fb(\))p 0 TeXcolorgray(\))38 b Fh(_)g Fk(P)7135
4334 y Fj(4)7212 4309 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)7763 4334 y Fj(4)7878 4309 y Fh(_)g Fb(\()p Fh(:)p
Fk(P)8324 4334 y Fj(1)8439 4309 y Fh(^)g Fb(\()p Fk(P)8770
4334 y Fj(2)8885 4309 y Fh(_)g Fk(P)9149 4334 y Fj(3)9226
4309 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1198 w Fa(S)48 b(3)5208
4601 y Fb(\(\()p Fk(P)5453 4627 y Fj(1)p 1 0 0 TeXcolorrgb
5568 4601 a Fh(_)38 b Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)6014
4627 y Fj(2)p 1 0 0 TeXcolorrgb 6129 4601 a Fh(^)p 0
TeXcolorgray 38 w(:)p Fk(P)6508 4627 y Fj(3)p 1 0 0 TeXcolorrgb
6584 4601 a Fb(\))p 0 TeXcolorgray(\))g Fh(_)g Fk(P)7020
4627 y Fj(4)7097 4601 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)7648 4627 y Fj(4)p 1 0 0 TeXcolorrgb 7763 4601 a
Fh(_)g Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)8209 4627 y
Fj(1)p 1 0 0 TeXcolorrgb 8324 4601 a Fh(^)p 0 TeXcolorgray
38 w Fb(\()p Fk(P)8655 4627 y Fj(2)8770 4601 y Fh(_)g
Fk(P)9034 4627 y Fj(3)p 1 0 0 TeXcolorrgb 9111 4601 a
Fb(\))p 0 TeXcolorgray(\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1313
w Fa(S)48 b(3)5208 4894 y Fb(\()p 1 0 0 TeXcolorrgb(\()p
0 TeXcolorgray(\()p Fk(P)5520 4920 y Fj(1)5635 4894 y
Fh(_)38 b(:)p Fk(P)6014 4920 y Fj(2)6090 4894 y Fb(\))p
1 0 0 TeXcolorrgb 39 w Fh(^)p 0 TeXcolorgray 38 w Fb(\()p
Fk(P)6527 4920 y Fj(1)6642 4894 y Fh(_)g(:)p Fk(P)7021
4920 y Fj(3)7097 4894 y Fb(\))p 1 0 0 TeXcolorrgb(\))g
Fh(_)p 0 TeXcolorgray 38 w Fk(P)7533 4920 y Fj(4)7610
4894 y Fb(\))g Fh(^)h Fb(\(\()p Fh(:)p Fk(P)8229 4920
y Fj(4)8343 4894 y Fh(_)f(:)p Fk(P)8722 4920 y Fj(1)8799
4894 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)9350 4920 y
Fj(4)9465 4894 y Fh(_)g Fb(\()p Fk(P)9796 4920 y Fj(2)9911
4894 y Fh(_)g Fk(P)10175 4920 y Fj(3)10252 4894 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 172 w Fa(S)48
b(5)p 0 TeXcolorgray 0 TeXcolorgray 10124 6387 a Ft(T)-8
b(echniques)21 b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f
(17)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.18) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 18/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5208 3138 a Fb(\()p
Fh(:)p Fk(P)5501 3164 y Fj(1)5616 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6062 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6186
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6517 3164 y Fj(3)6594
3138 y Fb(\)\))47 b Fh(!)i Fk(P)7107 3164 y Fj(4)7183
3138 y Fb(\))39 b Fh(^)f Fb(\()p Fk(P)7620 3164 y Fj(4)7744
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8257 3164 y Fj(1)8372
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)8818 3164 y Fj(2)p
1 0 0 TeXcolorrgb 8942 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9273 3164 y Fj(3)9350 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1074 w Fa(S)48 b(1)5208 3431 y Fb(\()p Fh(:)p Fk(P)5501
3457 y Fj(1)5616 3431 y Fh(^)38 b Fb(\()p 1 0 0 TeXcolorrgb
Fh(::)p 0 TeXcolorgray Fk(P)6177 3457 y Fj(2)6291 3431
y Fh(_)g Fk(P)6555 3457 y Fj(3)6632 3431 y Fb(\)\))48
b Fh(!)g Fk(P)7145 3457 y Fj(4)7222 3431 y Fb(\))38 b
Fh(^)g Fb(\()p Fk(P)7658 3457 y Fj(4)7782 3431 y Fh(!)48
b Fb(\()p Fh(:)p Fk(P)8295 3457 y Fj(1)8410 3431 y Fh(^)38
b Fb(\()p 1 0 0 TeXcolorrgb Fh(::)p 0 TeXcolorgray Fk(P)8971
3457 y Fj(2)9086 3431 y Fh(_)g Fk(P)9350 3457 y Fj(3)9427
3431 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 997 w Fa(S)48 b(2)5208 3723
y Fb(\()p Fh(:)p Fk(P)5501 3749 y Fj(1)5616 3723 y Fh(^)38
b Fb(\()p Fk(P)5947 3749 y Fj(2)6062 3723 y Fh(_)g Fk(P)6326
3749 y Fj(3)6402 3723 y Fb(\)\))p 1 0 0 TeXcolorrgb 48
w Fh(!)p 0 TeXcolorgray 48 w Fk(P)6915 3749 y Fj(4)6992
3723 y Fb(\))g Fh(^)g Fb(\()p Fk(P)7428 3749 y Fj(4)p
1 0 0 TeXcolorrgb 7553 3723 a Fh(!)p 0 TeXcolorgray 48
w Fb(\()p Fh(:)p Fk(P)8066 3749 y Fj(1)8181 3723 y Fh(^)g
Fb(\()p Fk(P)8512 3749 y Fj(2)8627 3723 y Fh(_)g Fk(P)8891
3749 y Fj(3)8968 3723 y Fb(\)\)\))p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1456
w Fa(S)48 b(4)5208 4016 y Fb(\()p 1 0 0 TeXcolorrgb Fh(:)p
Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)5683 4042 y Fj(1)p
1 0 0 TeXcolorrgb 5797 4016 a Fh(^)p 0 TeXcolorgray 38
w Fb(\()p Fk(P)6128 4042 y Fj(2)6243 4016 y Fh(_)38 b
Fk(P)6507 4042 y Fj(3)6584 4016 y Fb(\))p 1 0 0 TeXcolorrgb(\))p
0 TeXcolorgray 38 w Fh(_)g Fk(P)7020 4042 y Fj(4)7097
4016 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)7648 4042 y
Fj(4)7763 4016 y Fh(_)g Fb(\()p Fh(:)p Fk(P)8209 4042
y Fj(1)8324 4016 y Fh(^)g Fb(\()p Fk(P)8655 4042 y Fj(2)8770
4016 y Fh(_)g Fk(P)9034 4042 y Fj(3)9111 4016 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1313 w
Fa(S)48 b(2)5208 4309 y Fb(\(\()p 1 0 0 TeXcolorrgb Fh(::)p
0 TeXcolorgray Fk(P)5683 4334 y Fj(1)5797 4309 y Fh(_)p
1 0 0 TeXcolorrgb 38 w(:)p Fb(\()p 0 TeXcolorgray Fk(P)6243
4334 y Fj(2)p 1 0 0 TeXcolorrgb 6358 4309 a Fh(_)p 0
TeXcolorgray 38 w Fk(P)6622 4334 y Fj(3)p 1 0 0 TeXcolorrgb
6699 4309 a Fb(\))p 0 TeXcolorgray(\))38 b Fh(_)g Fk(P)7135
4334 y Fj(4)7212 4309 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)7763 4334 y Fj(4)7878 4309 y Fh(_)g Fb(\()p Fh(:)p
Fk(P)8324 4334 y Fj(1)8439 4309 y Fh(^)g Fb(\()p Fk(P)8770
4334 y Fj(2)8885 4309 y Fh(_)g Fk(P)9149 4334 y Fj(3)9226
4309 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1198 w Fa(S)48 b(3)5208
4601 y Fb(\(\()p Fk(P)5453 4627 y Fj(1)p 1 0 0 TeXcolorrgb
5568 4601 a Fh(_)38 b Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)6014
4627 y Fj(2)p 1 0 0 TeXcolorrgb 6129 4601 a Fh(^)p 0
TeXcolorgray 38 w(:)p Fk(P)6508 4627 y Fj(3)p 1 0 0 TeXcolorrgb
6584 4601 a Fb(\))p 0 TeXcolorgray(\))g Fh(_)g Fk(P)7020
4627 y Fj(4)7097 4601 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)7648 4627 y Fj(4)p 1 0 0 TeXcolorrgb 7763 4601 a
Fh(_)g Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)8209 4627 y
Fj(1)p 1 0 0 TeXcolorrgb 8324 4601 a Fh(^)p 0 TeXcolorgray
38 w Fb(\()p Fk(P)8655 4627 y Fj(2)8770 4601 y Fh(_)g
Fk(P)9034 4627 y Fj(3)p 1 0 0 TeXcolorrgb 9111 4601 a
Fb(\))p 0 TeXcolorgray(\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1313
w Fa(S)48 b(3)5208 4894 y Fb(\()p 1 0 0 TeXcolorrgb(\()p
0 TeXcolorgray(\()p Fk(P)5520 4920 y Fj(1)5635 4894 y
Fh(_)38 b(:)p Fk(P)6014 4920 y Fj(2)6090 4894 y Fb(\))p
1 0 0 TeXcolorrgb 39 w Fh(^)p 0 TeXcolorgray 38 w Fb(\()p
Fk(P)6527 4920 y Fj(1)6642 4894 y Fh(_)g(:)p Fk(P)7021
4920 y Fj(3)7097 4894 y Fb(\))p 1 0 0 TeXcolorrgb(\))g
Fh(_)p 0 TeXcolorgray 38 w Fk(P)7533 4920 y Fj(4)7610
4894 y Fb(\))g Fh(^)h Fb(\(\()p Fh(:)p Fk(P)8229 4920
y Fj(4)8343 4894 y Fh(_)f(:)p Fk(P)8722 4920 y Fj(1)8799
4894 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)9350 4920 y
Fj(4)9465 4894 y Fh(_)g Fb(\()p Fk(P)9796 4920 y Fj(2)9911
4894 y Fh(_)g Fk(P)10175 4920 y Fj(3)10252 4894 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 172 w Fa(S)48
b(5)5208 5186 y Fb(\(\(\()p Fk(P)5520 5212 y Fj(1)5635
5186 y Fh(_)38 b(:)p Fk(P)6014 5212 y Fj(2)6090 5186
y Fb(\))h Fh(_)f Fk(P)6460 5212 y Fj(4)6536 5186 y Fb(\))h
Fh(^)f Fb(\(\()p Fk(P)7040 5212 y Fj(1)7155 5186 y Fh(_)g(:)p
Fk(P)7534 5212 y Fj(3)7610 5186 y Fb(\))g Fh(_)h Fk(P)7980
5212 y Fj(4)8056 5186 y Fb(\)\))7618 5479 y Fh(^)p Fb(\(\()p
Fh(:)p Fk(P)8093 5505 y Fj(4)8208 5479 y Fh(_)f(:)p Fk(P)8587
5505 y Fj(1)8664 5479 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)9215 5505 y Fj(4)9330 5479 y Fh(_)g Fb(\()p Fk(P)9661
5505 y Fj(2)9776 5479 y Fh(_)g Fk(P)10040 5505 y Fj(3)10117
5479 y Fb(\)\)\))307 b Fa(S)48 b(5)p 0 TeXcolorgray 0
TeXcolorgray 10124 6387 a Ft(T)-8 b(echniques)21 b(in)f(Ar)s
(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f(18)p 0 TeXcolorgray
4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.19) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 19/View [ /XYZ null null null ] /Title (Converting to CNF (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5645 2010 a Fx(Con)-14 b(v)l(erting)87 b(to)h(CNF)i
(\(Example\))p 0 TeXcolorgray 0 TeXcolorgray 5121 2668
a Fp(Con)l(v)-5 b(er)9 b(t)58 b(this)i(sentence)e(to)h(CNF:)66
b Fc(\()p Fn(:)p Fr(P)8392 2699 y Fe(1)8526 2668 y Fn(^)45
b Fc(\()p Fn(:)p Fr(P)9056 2699 y Fe(2)9202 2668 y Fn(!)57
b Fr(P)9596 2699 y Fe(3)9684 2668 y Fc(\)\))p 1 0 0 TeXcolorrgb
57 w Fn($)p 0 TeXcolorgray 57 w Fr(P)10293 2699 y Fe(4)p
1 0 0 TeXcolorrgb 0 TeXcolorgray 5208 3138 a Fb(\()p
Fh(:)p Fk(P)5501 3164 y Fj(1)5616 3138 y Fh(^)38 b Fb(\()p
Fh(:)p Fk(P)6062 3164 y Fj(2)p 1 0 0 TeXcolorrgb 6186
3138 a Fh(!)p 0 TeXcolorgray 48 w Fk(P)6517 3164 y Fj(3)6594
3138 y Fb(\)\))47 b Fh(!)i Fk(P)7107 3164 y Fj(4)7183
3138 y Fb(\))39 b Fh(^)f Fb(\()p Fk(P)7620 3164 y Fj(4)7744
3138 y Fh(!)48 b Fb(\()p Fh(:)p Fk(P)8257 3164 y Fj(1)8372
3138 y Fh(^)38 b Fb(\()p Fh(:)p Fk(P)8818 3164 y Fj(2)p
1 0 0 TeXcolorrgb 8942 3138 a Fh(!)p 0 TeXcolorgray 48
w Fk(P)9273 3164 y Fj(3)9350 3138 y Fb(\)\)\))p 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1074 w Fa(S)48 b(1)5208 3431 y Fb(\()p Fh(:)p Fk(P)5501
3457 y Fj(1)5616 3431 y Fh(^)38 b Fb(\()p 1 0 0 TeXcolorrgb
Fh(::)p 0 TeXcolorgray Fk(P)6177 3457 y Fj(2)6291 3431
y Fh(_)g Fk(P)6555 3457 y Fj(3)6632 3431 y Fb(\)\))48
b Fh(!)g Fk(P)7145 3457 y Fj(4)7222 3431 y Fb(\))38 b
Fh(^)g Fb(\()p Fk(P)7658 3457 y Fj(4)7782 3431 y Fh(!)48
b Fb(\()p Fh(:)p Fk(P)8295 3457 y Fj(1)8410 3431 y Fh(^)38
b Fb(\()p 1 0 0 TeXcolorrgb Fh(::)p 0 TeXcolorgray Fk(P)8971
3457 y Fj(2)9086 3431 y Fh(_)g Fk(P)9350 3457 y Fj(3)9427
3431 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 997 w Fa(S)48 b(2)5208 3723
y Fb(\()p Fh(:)p Fk(P)5501 3749 y Fj(1)5616 3723 y Fh(^)38
b Fb(\()p Fk(P)5947 3749 y Fj(2)6062 3723 y Fh(_)g Fk(P)6326
3749 y Fj(3)6402 3723 y Fb(\)\))p 1 0 0 TeXcolorrgb 48
w Fh(!)p 0 TeXcolorgray 48 w Fk(P)6915 3749 y Fj(4)6992
3723 y Fb(\))g Fh(^)g Fb(\()p Fk(P)7428 3749 y Fj(4)p
1 0 0 TeXcolorrgb 7553 3723 a Fh(!)p 0 TeXcolorgray 48
w Fb(\()p Fh(:)p Fk(P)8066 3749 y Fj(1)8181 3723 y Fh(^)g
Fb(\()p Fk(P)8512 3749 y Fj(2)8627 3723 y Fh(_)g Fk(P)8891
3749 y Fj(3)8968 3723 y Fb(\)\)\))p 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1456
w Fa(S)48 b(4)5208 4016 y Fb(\()p 1 0 0 TeXcolorrgb Fh(:)p
Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)5683 4042 y Fj(1)p
1 0 0 TeXcolorrgb 5797 4016 a Fh(^)p 0 TeXcolorgray 38
w Fb(\()p Fk(P)6128 4042 y Fj(2)6243 4016 y Fh(_)38 b
Fk(P)6507 4042 y Fj(3)6584 4016 y Fb(\))p 1 0 0 TeXcolorrgb(\))p
0 TeXcolorgray 38 w Fh(_)g Fk(P)7020 4042 y Fj(4)7097
4016 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)7648 4042 y
Fj(4)7763 4016 y Fh(_)g Fb(\()p Fh(:)p Fk(P)8209 4042
y Fj(1)8324 4016 y Fh(^)g Fb(\()p Fk(P)8655 4042 y Fj(2)8770
4016 y Fh(_)g Fk(P)9034 4042 y Fj(3)9111 4016 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1313 w
Fa(S)48 b(2)5208 4309 y Fb(\(\()p 1 0 0 TeXcolorrgb Fh(::)p
0 TeXcolorgray Fk(P)5683 4334 y Fj(1)5797 4309 y Fh(_)p
1 0 0 TeXcolorrgb 38 w(:)p Fb(\()p 0 TeXcolorgray Fk(P)6243
4334 y Fj(2)p 1 0 0 TeXcolorrgb 6358 4309 a Fh(_)p 0
TeXcolorgray 38 w Fk(P)6622 4334 y Fj(3)p 1 0 0 TeXcolorrgb
6699 4309 a Fb(\))p 0 TeXcolorgray(\))38 b Fh(_)g Fk(P)7135
4334 y Fj(4)7212 4309 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)7763 4334 y Fj(4)7878 4309 y Fh(_)g Fb(\()p Fh(:)p
Fk(P)8324 4334 y Fj(1)8439 4309 y Fh(^)g Fb(\()p Fk(P)8770
4334 y Fj(2)8885 4309 y Fh(_)g Fk(P)9149 4334 y Fj(3)9226
4309 y Fb(\)\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0
TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1198 w Fa(S)48 b(3)5208
4601 y Fb(\(\()p Fk(P)5453 4627 y Fj(1)p 1 0 0 TeXcolorrgb
5568 4601 a Fh(_)38 b Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)6014
4627 y Fj(2)p 1 0 0 TeXcolorrgb 6129 4601 a Fh(^)p 0
TeXcolorgray 38 w(:)p Fk(P)6508 4627 y Fj(3)p 1 0 0 TeXcolorrgb
6584 4601 a Fb(\))p 0 TeXcolorgray(\))g Fh(_)g Fk(P)7020
4627 y Fj(4)7097 4601 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)7648 4627 y Fj(4)p 1 0 0 TeXcolorrgb 7763 4601 a
Fh(_)g Fb(\()p 0 TeXcolorgray Fh(:)p Fk(P)8209 4627 y
Fj(1)p 1 0 0 TeXcolorrgb 8324 4601 a Fh(^)p 0 TeXcolorgray
38 w Fb(\()p Fk(P)8655 4627 y Fj(2)8770 4601 y Fh(_)g
Fk(P)9034 4627 y Fj(3)p 1 0 0 TeXcolorrgb 9111 4601 a
Fb(\))p 0 TeXcolorgray(\)\))p 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 1313
w Fa(S)48 b(3)5208 4894 y Fb(\()p 1 0 0 TeXcolorrgb(\()p
0 TeXcolorgray(\()p Fk(P)5520 4920 y Fj(1)5635 4894 y
Fh(_)38 b(:)p Fk(P)6014 4920 y Fj(2)6090 4894 y Fb(\))p
1 0 0 TeXcolorrgb 39 w Fh(^)p 0 TeXcolorgray 38 w Fb(\()p
Fk(P)6527 4920 y Fj(1)6642 4894 y Fh(_)g(:)p Fk(P)7021
4920 y Fj(3)7097 4894 y Fb(\))p 1 0 0 TeXcolorrgb(\))g
Fh(_)p 0 TeXcolorgray 38 w Fk(P)7533 4920 y Fj(4)7610
4894 y Fb(\))g Fh(^)h Fb(\(\()p Fh(:)p Fk(P)8229 4920
y Fj(4)8343 4894 y Fh(_)f(:)p Fk(P)8722 4920 y Fj(1)8799
4894 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p Fk(P)9350 4920 y
Fj(4)9465 4894 y Fh(_)g Fb(\()p Fk(P)9796 4920 y Fj(2)9911
4894 y Fh(_)g Fk(P)10175 4920 y Fj(3)10252 4894 y Fb(\)\)\))p
1 0 0 TeXcolorrgb 0 TeXcolorgray 1 0 0 TeXcolorrgb 0
TeXcolorgray 1 0 0 TeXcolorrgb 0 TeXcolorgray 172 w Fa(S)48
b(5)5208 5186 y Fb(\(\(\()p Fk(P)5520 5212 y Fj(1)5635
5186 y Fh(_)38 b(:)p Fk(P)6014 5212 y Fj(2)6090 5186
y Fb(\))h Fh(_)f Fk(P)6460 5212 y Fj(4)6536 5186 y Fb(\))h
Fh(^)f Fb(\(\()p Fk(P)7040 5212 y Fj(1)7155 5186 y Fh(_)g(:)p
Fk(P)7534 5212 y Fj(3)7610 5186 y Fb(\))g Fh(_)h Fk(P)7980
5212 y Fj(4)8056 5186 y Fb(\)\))7618 5479 y Fh(^)p Fb(\(\()p
Fh(:)p Fk(P)8093 5505 y Fj(4)8208 5479 y Fh(_)f(:)p Fk(P)8587
5505 y Fj(1)8664 5479 y Fb(\))g Fh(^)g Fb(\()p Fh(:)p
Fk(P)9215 5505 y Fj(4)9330 5479 y Fh(_)g Fb(\()p Fk(P)9661
5505 y Fj(2)9776 5479 y Fh(_)g Fk(P)10040 5505 y Fj(3)10117
5479 y Fb(\)\)\))307 b Fa(S)48 b(5)5208 5772 y Fb(\()p
Fk(P)5386 5797 y Fj(1)5501 5772 y Fh(_)38 b(:)p Fk(P)5880
5797 y Fj(2)5995 5772 y Fh(_)g Fk(P)6259 5797 y Fj(4)6335
5772 y Fb(\))h Fh(^)f Fb(\()p Fk(P)6772 5797 y Fj(1)6887
5772 y Fh(_)g(:)p Fk(P)7266 5797 y Fj(3)7381 5772 y Fh(_)g
Fk(P)7645 5797 y Fj(4)7722 5772 y Fb(\))g Fh(^)g Fb(\()p
Fh(:)p Fk(P)8273 5797 y Fj(4)8388 5772 y Fh(_)g(:)p Fk(P)8767
5797 y Fj(1)8843 5772 y Fb(\))g Fh(^)h Fb(\()p Fh(:)p
Fk(P)9395 5797 y Fj(4)9509 5772 y Fh(_)f Fk(P)9773 5797
y Fj(2)9888 5772 y Fh(_)g Fk(P)10152 5797 y Fj(3)10229
5772 y Fb(\))p 0 TeXcolorgray 0 TeXcolorgray 10124 6387
a Ft(T)-8 b(echniques)21 b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g
(p)n(.)f(19)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a
eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.20) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 20/View [ /XYZ null null null ] /Title (A Closer Look at Resolution)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5780 2044 a Fx(A)89 b(Closer)f(Look)g(at)h(Resolution)p
0 TeXcolorgray 0 TeXcolorgray 5121 2668 a Fs(T)-26 b(ak)l(e)60
b(the)f(proof)g Fr(P)6 b(;)34 b(P)86 b Fn(!)57 b Fr(Q)h
Fn(`)g Fr(Q)5121 3118 y Fs(Let')-11 b(s)60 b(tr)6 b(y)60
b(to)g(do)e(it)i(using)f(the)g(resolution)g(r)s(ule)5121
3569 y(Recall)h(that)g Fc(\()p Fr(P)85 b Fn(!)57 b Fr(Q)p
Fc(\))g Fn(\021)h Fc(\()p Fn(:)p Fr(P)73 b Fn(_)46 b
Fr(Q)p Fc(\))5121 4026 y Fs(So)60 b(ha)l(v)-5 b(e)58
b(tw)n(o)h(clauses:)73 b Fr(P)88 b Fs(and)58 b Fn(:)p
Fr(P)74 b Fn(_)46 b Fr(Q)60 b Fs(that)f(can)g(be)f(resolv)-5
b(ed:)7269 4436 y Fr(P)6 b(;)461 b Fn(:)p Fr(P)75 b Fn(_)45
b Fr(Q)p 7269 4528 1340 9 v 7859 4717 a(Q)5121 5349 y
Fs(So)-9 b(,)61 b(resolution)e(is)g(a)g(disguised)g(f)-6
b(or)5 b(m)59 b(of)g Fp(modus)f(ponens)p 0 TeXcolorgray
0 TeXcolorgray 10124 6387 a Ft(T)-8 b(echniques)21 b(in)f(Ar)s
(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f(20)p 0 TeXcolorgray
4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.21) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 21/View [ /XYZ null null null ] /Title (Inference Using Resolution)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5882 2010 a Fx(Infer)-6 b(ence)86 b(Using)i(Resolution)p
0 TeXcolorgray 0 TeXcolorgray 5121 2668 a Fo(Question:)75
b Fq(KB)80 b Fn(j)-34 b Fc(=)58 b Fr( )66 b Fs(?)5121
3125 y Fo(Method:)75 b Fs(The)59 b(method)g(is)g(based)f(on)h
Fp(proof-b)l(y)f(contr)n(adiction)5121 3259 y
SDict begin H.S end
 5121 3259
a 5121 3259 a
SDict begin 14.15991 H.A end
 5121 3259 a 5121 3259 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 5121 3259 a 0 TeXcolorgray
5208 3458 a Fs(1.)p 0 TeXcolorgray 102 w(T)-26 b(ak)l(e)59
b Fr(K)15 b(B)56 b Fn(^)45 b(:)p Fr( )5121 3588 y
SDict begin H.S end
 5121
3588 a 5121 3588 a
SDict begin 14.15991 H.A end
 5121 3588 a 5121 3588 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 5121 3588
a 0 TeXcolorgray 5208 3791 a Fs(2.)p 0 TeXcolorgray 102
w(Con)l(v)-5 b(er)9 b(t)57 b Fr(K)15 b(B)56 b Fn(^)46
b(:)p Fr( )66 b Fs(to)60 b(CNF)5121 3921 y
SDict begin H.S end
 5121 3921
a 5121 3921 a
SDict begin 14.15991 H.A end
 5121 3921 a 5121 3921 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 5121 3921 a 0 TeXcolorgray
5208 4124 a Fs(3.)p 0 TeXcolorgray 102 w(Apply)f(the)g(resolution)g
(inf)-6 b(erence)58 b(r)s(ule)i(iter)n(ativ)-5 b(ely)59
b(to)h(the)5488 4368 y(resulting)f(clauses)f(\(whene)-6
b(v)h(er)57 b(there)i(are)g(complementar)6 b(y)5488 4615
y(liter)n(als\))60 b(until)g(either)6 b(:)p 0 TeXcolorgray
5552 4903 a(\226)p 0 TeXcolorgray 101 w(tw)n(o)60 b(clauses)e(are)h
(resolv)-5 b(ed)58 b(to)h(the)g(empty)g(clause)f(\(i.e)m(.)5772
5147 y(contr)n(adiction\),)h(theref)-6 b(ore)59 b(w)n(e)g(conclude)f
Fr( )7 b Fs(;)59 b(or)p 0 TeXcolorgray 5552 5435 a(\226)p
0 TeXcolorgray 101 w(cannot)g(apply)f(resolution)h(r)s(ule)h(an)m(y)e
(more)m(,)h(theref)-6 b(ore)5772 5679 y(conclude)58 b
Fn(:)p Fr( )p 0 TeXcolorgray 0 TeXcolorgray 10124 6387
a Ft(T)-8 b(echniques)21 b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g
(p)n(.)f(21)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a
eop end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.22) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 22/View [ /XYZ null null null ] /Title (Resolution (cont.))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 6593 2015 a Fx(Resolution)88 b(\(cont.\))p
0 TeXcolorgray 0 TeXcolorgray 5121 2668 a Fs(Wh)-6 b(y)59
b(is)g(resolving)g(to)g(the)g(empty)g(clause)f(a)h(contr)n(adiction?)
5121 3121 y(A)e(disjunction)f(is)h(tr)s(ue)f(only)g(if)h(at)g(least)f
(one)f(of)i(its)g(liter)n(als)g(are)e(tr)s(ue)m(.)5121
3365 y(So)60 b(if)g(w)n(e)f(get)g(the)h(empty)e(clause)m(,)h(none)f(of)
h(the)h(liter)n(als)g(is)f(tr)s(ue)5121 3818 y Fp(Resolution)h(is)f
(sound)f(and)h(complete)p Fs(,)f(\(and)h(someone)f(pro)m(v)-5
b(ed)57 b(it\))p 0 TeXcolorgray 0 TeXcolorgray 10124
6387 a Ft(T)-8 b(echniques)21 b(in)f(Ar)s(ti\002cial)e(Intelligence)i
(\226)g(p)n(.)f(22)p 0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544
6651 a eop end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.23) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 23/View [ /XYZ null null null ] /Title (Resolution (Example))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 6291 2010 a Fx(Resolution)87 b(\(Example\))p
0 TeXcolorgray 0 TeXcolorgray 5121 2666 a Fs(Let)60 b
Fq(KB)79 b Fc(=)58 b(\()p Fr(P)85 b Fn($)57 b Fc(\()p
Fr(Q)46 b Fn(_)g Fr(R)r Fc(\)\))f Fn(^)h(:)p Fr(P)5121
3121 y Fs(W)-9 b(ant)60 b(to)f(pro)m(v)-5 b(e)58 b(that)h
Fq(KB)80 b Fn(j)-34 b Fc(=)57 b Fr(\013)k Fs(where)e
Fr(\013)f Fc(=)g Fn(:)p Fr(Q)5121 3573 y Fs(I.e)m(.)75
b(w)n(e)59 b(should)f(pro)m(v)-5 b(e)58 b Fq(KB)68 b
Fn(^)45 b(:)p Fr(\013)q Fs(:)5121 4024 y(I.e)m(.)75 b(w)n(e)59
b(should)f(pro)m(v)-5 b(e)58 b Fc(\()p Fr(P)85 b Fn($)57
b Fc(\()p Fr(Q)46 b Fn(_)g Fr(R)r Fc(\)\))f Fn(^)h(:)p
Fr(P)74 b Fn(^)45 b(::)p Fr(Q)5121 4481 y Fs(Con)l(v)-5
b(er)9 b(ting)58 b(the)h(abo)m(v)-5 b(e)58 b(sentence)g(to)h(CNF)h(\(e)
-6 b(x)g(ercise\),)58 b(w)n(e)h(ha)l(v)-5 b(e:)5121 4932
y Fc(\()p Fn(:)p Fr(R)48 b Fn(_)d Fr(P)28 b Fc(\))46
b Fn(^)g Fc(\()p Fn(:)p Fr(P)74 b Fn(_)46 b Fr(Q)g Fn(_)f
Fr(R)r Fc(\))h Fn(^)f Fc(\()p Fn(:)p Fr(Q)h Fn(_)g Fr(P)28
b Fc(\))46 b Fn(^)f(:)p Fr(P)75 b Fn(^)45 b Fr(Q)p 0
TeXcolorgray 0 TeXcolorgray 10124 6387 a Ft(T)-8 b(echniques)21
b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f(23)p
0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.24) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 24/View [ /XYZ null null null ] /Title (Resolution (Example, continued))
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5447 2010 a Fx(Resolution)88 b(\(Example,)g(continued\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
5121 5082 a @beginspecial 0 @llx 0 @lly 344 @urx 157
@ury 3259 @rwi @setspecial
%%BeginDocument: figures/resolution.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: E:\Academic\2004_01dubai\Teaching\INF506\INF01506_2005sem2\slides\004_lecture03\resolution.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 344 157
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 344 157
%AI3_TileBox: 0 0 344 157
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
  Adobe_typography_AI5 begin
  Adobe_typography_AI5
  {
    dup xcheck
    {
      bind
    } if
    pop pop
  } forall
 end
 end
 end
  Adobe_typography_AI5 begin
} def
/terminate
{
  currentdict Adobe_typography_AI5 eq
  {
   end
  } if
} def
/modifyEncoding
{
  /_tempEncode exch ddef
  /_pntr 0 ddef
  {
    counttomark -1 roll
    dup type dup /marktype eq
    {
      pop pop exit
    }
    {
      /nametype eq
      {
        _tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
        put
      }
      {
        /_pntr exch ddef
      } ifelse
    } ifelse
  } loop
  _tempEncode
} def
/havefont
{
  systemdict /languagelevel known
    {
    /Font resourcestatus dup
      { exch pop exch pop }
    if
    }
    {
    systemdict /FontDirectory get 1 index known
      { pop true }
      {
      systemdict /fileposition known
        {
        dup length 6 add exch
        Ss 6 250 getinterval
        cvs pop
        Ss exch 0 exch getinterval
        status
          { pop pop pop pop true }
          { false }
        ifelse
        }
        {
        pop false
        }
      ifelse
      }
    ifelse
    }
  ifelse
} def
/TE
{
  StandardEncoding 256 array copy modifyEncoding
  /_nativeEncoding exch def
} def
/subststring {
  exch 2 index exch search
  {
    exch pop
    exch dup () eq
    {
      pop exch concatstring
    }
    {
      3 -1 roll
      exch concatstring
      concatstring
    } ifelse
    exch pop true
  }
  {
    pop pop false
  } ifelse
} def
/concatstring {
  1 index length 1 index length
  1 index add
  string
  dup 0 5 index putinterval
  dup 2 index 4 index putinterval
  4 1 roll pop pop pop
} def
%
/TZ
{
  dup type /arraytype eq
  {
    /_wv exch def
  }
  {
    /_wv 0 def
  } ifelse
  /_useNativeEncoding exch def
  2 index havefont
  {
    3 index
    255 string
    cvs

    dup
    (_Symbol_)
    eq
    {
      pop
      2 index
      findfont

    }
    {
      dup length 1 sub
      1 exch
      getinterval

      cvn
      findfont
    } ifelse
  }
  {
    dup 1 eq
    {
      2 index 64 string cvs
      dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
      {
        exch pop dup havefont
        {
          findfont false
        }
        {
          pop true
        } ifelse
      }
      {
        pop dup
        (-90ms-RKSJ-) (-Ext-RKSJ-) subststring
        {
          exch pop dup havefont
          {
            findfont false
          }
          {
            pop true
          } ifelse
        }
        {
          pop pop true
        } ifelse
      } ifelse
      {
        /Ryumin-Light-83pv-RKSJ-H havefont
          {/Ryumin-Light-83pv-RKSJ-H}
          {/Courier}
          ifelse
          findfont
          [1 0 0.5 1 0 0] makefont
      } if
    }
    {
      /Courier findfont
    } ifelse
  } ifelse
  _wv type /arraytype eq
  {
    _wv makeblendedfont
  } if
  dup length 10 add dict
 begin
  mark exch
  {
    1 index /FID ne
    {
      def
    } if
    cleartomark mark
  } forall
  pop
  /FontScript exch def
  /FontDirection exch def
  /FontRequest exch def
  /FontName exch def
  counttomark 0 eq
  {
    1 _useNativeEncoding eq
    {
      /Encoding _nativeEncoding def
    } if
    cleartomark
  }
  {
    /Encoding load 256 array copy
    modifyEncoding /Encoding exch def
  } ifelse
  FontName currentdict
 end
  definefont pop
} def
/tr
{
  _ax _ay 3 2 roll
} def
/trj
{
  _cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
  /Tx
  {
    dup
    currentpoint 3 2 roll
    tr _psf
    newpath moveto
    tr _ctm _pss
  } ddef
  /Tj
  {
    dup
    currentpoint 3 2 roll
    trj _pjsf
    newpath moveto
    trj _ctm _pjss
  } ddef
} def
/a1
{
W B
} def
/e0
{
  /Tx
  {
    tr _psf
  } ddef
  /Tj
  {
    trj _pjsf
  } ddef
} def
/e1
{
W F
} def
/i0
{
  /Tx
  {
    tr sp
  } ddef
  /Tj
  {
    trj jsp
  } ddef
} def
/i1
{
  W N
} def
/o0
{
  /Tx
  {
    tr sw rmoveto
  } ddef
  /Tj
  {
    trj swj rmoveto
  } ddef
} def
/r0
{
  /Tx
  {
    tr _ctm _pss
  } ddef
  /Tj
  {
    trj _ctm _pjss
  } ddef
} def
/r1
{
W S
} def
/To
{
  pop _ctm currentmatrix pop
} def
/TO
{
  iTe _ctm setmatrix newpath
} def
/Tp
{
  pop _tm astore pop _ctm setmatrix
  _tDict begin
  /W
  {
  } def
  /h
  {
  } def
} def
/TP
{
 end
  iTm 0 0 moveto
} def
/Tr
{
  _render 3 le
  {
    currentpoint newpath moveto
  } if
  dup 8 eq
  {
    pop 0
  }
  {
    dup 9 eq
    {
      pop 1
    } if
  } ifelse
  dup /_render exch ddef
  _renderStart exch get load exec
} def
/iTm
{
  _ctm setmatrix _tm concat
  _shift aload pop _lineorientation 1 eq { exch } if translate
  _scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
  _tm astore pop iTm 0 0 moveto
} def
/Td
{
  _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
  _render -1 eq
  {
  }
  {
    _renderEnd _render get dup null ne
    {
      load exec
    }
    {
      pop
    } ifelse
  } ifelse
  /_render -1 ddef
} def
/Ta
{
  pop
} def
/Tf
{
  1 index type /nametype eq
  {
    dup 0.75 mul 1 index 0.25 mul neg
  } if
  /_fontDescent exch ddef
  /_fontAscent exch ddef
  /_fontSize exch ddef
  /_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
  /_fontHeight _fontSize ddef
  findfont _fontSize scalefont setfont
} def
/Tl
{
  pop neg 0 exch
  _leading astore pop
} def
/Tt
{
  pop
} def
/TW
{
  3 npop
} def
/Tw
{
  /_cx exch ddef
} def
/TC
{
  3 npop
} def
/Tc
{
  /_ax exch ddef
} def
/Ts
{
  0 exch
  _shift astore pop
  currentpoint
  iTm
  moveto
} def
/Ti
{
  3 npop
} def
/Tz
{
  count 1 eq { 100 } if
  100 div exch 100 div exch
  _scale astore pop
  iTm
} def
/TA
{
  pop
} def
/Tq
{
  pop
} def
/Tg
{
  pop
} def
/TG
{
  pop
} def
/Tv
{
  /_lineorientation exch ddef
} def
/TV
{
  /_charorientation exch ddef
} def
/Ty
{
  dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
  pop
} def
/T~
{
  Tx
} def
/Th
{
  pop pop pop pop pop
} def
/TX
{
  pop
} def
/Tk
{
  _fontSize mul 1000 div
  _lineorientation 0 eq { neg 0 } { 0 exch } ifelse
  rmoveto
  pop
} def
/TK
{
  2 npop
} def
/T*
{
  _leading aload pop
  _lineorientation 0 ne { exch } if
  Td
} def
/T*-
{
  _leading aload pop
  _lineorientation 0 ne { exch } if
  exch neg exch neg
  Td
} def
/T-
{
  _ax neg 0 rmoveto
  _lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
  _ctm currentmatrix pop
  _tm astore pop
  iTm 0 0 moveto
} def
/TS
{
  currentfont 3 1 roll
  /_Symbol_ findfont _fontSize scalefont setfont

  0 eq
  {
    Tx
  }
  {
    Tj
  } ifelse
  setfont
} def
/Xb
{
  pop pop
} def
/Tb /Xb load def
/Xe
{
  pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
  currentfont 5 1 roll
  dup havefont
    {
    findfont _fontSize scalefont setfont
    }
    {
    pop
    exch
    } ifelse
  2 index 0 eq
  {
    Tx
  }
  {
    Tj
  } ifelse
  pop pop
  setfont
} def
/T^ /X^ load def
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
  Adobe_screens_AI5 begin
  /screenid
    deviceDPI 600 gt composite? not or
    {
    -1
    }
    {
      deviceDPI currentScreenFreq
      dup dup 60 ge exch 150 le and deviceDPI 300 le and
    {
      pop 60
    } if
    div 1.41421 div 0.5 add cvi
    } ifelse
  def

  2 screenid eq
  {
    /customsize 16 def
    /customdata /customdata2 def
    setcustomscreen
  } if

  3 screenid eq
  {
    /customsize 24 def
    /customdata /customdata3 def
    setcustomscreen
  } if

  4 screenid eq
  {
    /customsize 16 def
    /customdata /customdata4 def
    setcustomscreen
  } if

  5 screenid eq
  {
    /customsize 20 def
    /customdata /customdata5 def
    setcustomscreen
  } if

  6 screenid eq
  {
    /customsize 24 def
    /customdata /customdata6 def
    setcustomscreen
  } if

  7 screenid eq
  {
    /customsize 28 def
    /customdata /customdata7 def
    setcustomscreen
  } if

  8 screenid eq
  {
    /customsize 16 def
    /customdata /customdata8 def
    setcustomscreen
  } if
} def
/terminate
{
  currentdict Adobe_screens_AI5 eq
  {
   end
  } if
} def
/setcustomscreen
{
  deviceDPI customsize div 0
  {
    1 add 2 div customsize mul cvi exch
    1 add 2 div customsize mul cvi exch
    customsize mul add
    customdata load exch get 256 div
  } setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
  AGM_Gradient_Sep begin
  AGM_Gradient_Sep_private begin
  _compositeJob{
    initializeSinglePassSeps
  }{
    initializeMultiPassSeps
  }ifelse
  initializeSeps
  AGM_Gradient_private begin
    /_fillSD newSpotDict def
    /_rampSD newSpotDict def
    /_nCustomColorSD nd
 end
  AGM_Gradient_Sep_private
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
  AGM_Gradient_Sep
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
 end

  currentdict readonly pop
 end
}def
/terminate{
  currentdict AGM_Gradient_Sep eq{
   end
  }if
}def

AGM_Gradient_Sep_private begin
/initializeSeps{
  _noImage not _level2PS not and{
    /_whiteBytes 1 makeByte8 pt
    /knockOut{
      8 setImageParms _whiteBytes /_image load 5 execImage
    }def
    /linealFill{
      mySave
      8 setImageParms
      _color{
        _nCustomColorSD begin
          cyan magenta yellow black
          _spotColor{
            spot1 begin
              /tintImage tintValue 1 exch sub makeByte8 def
           end
            spot2 begin
              /tintImage tintValue 1 exch sub makeByte8 def
           end
          }if
       end
        4{
          makeByte8 4 1 roll
        }repeat
        true 4 _nCustomColorSD ncolorimage
      }{
        _nCustomColorSD/black get 1 exch sub makeByte8
        _nCustomColorSD bwImage
      }ifelse
      myRestore
    }def
  }{
     /knockOut{
      gsave
      false setoverprint
      1 setgray
      0 0 1 1 rectfill
      grestore
    }def
  }ifelse
  /newSpotDict{
    11 dict dup begin
      /nSpots 2 def
      /spot1 7 dict def
      /spot2 7 dict def
   end
  }def
  /initSpotData
  {
   begin
      /name nd
      /tintImage nd
      /tintValue nd
      /spot_C nd
      /spot_M nd
      /spot_Y nd
      /spot_K nd
   end
  }def
  /initSpotDict{
   begin
      /cyanInk false def
      /magentaInk false def
      /yellowInk false def
      /blackInk false def
      /cyan nd
      /magenta nd
      /yellow nd
      /black nd
      spot1 initSpotData
      spot2 initSpotData
   end
  }def
  /copySpotDict{
    /_dst xp
   begin
      cyanInk magentaInk yellowInk blackInk
      cyan magenta yellow black
      spot1 spot2
   end
    _dst begin
      /spot1 spot1 maxlength dict def
      /spot2 spot2 maxlength dict def
      spot2 copy pop
      spot1 copy pop
      /black xd
      /yellow xd
      /magenta xd
      /cyan xd
      /blackInk xd
      /yellowInk xd
      /magentaInk xd
      /cyanInk xd
   end
  }def
  /setCustomColor
  {
    1 index /Black eq{
      6 1 roll 5 npop
      1 exch sub
      setgray
    }{
      6 1 roll _ccAry1 astore exch
      dup null eq{
        pop 0
      }if
      setcustomcolor
    }ifelse
  }def
  /setCStop{
    /_colorStyle exch pt

    _colorStyle 0 eq{
      0 0 0
      4 -1 roll
      1 exch sub
      _spotColor{
        /_colorStyle 3 pt
        /Black
        1 index
        1 exch sub
      }if
    }if
    _colorStyle 2 eq{
      3 npop
    }if
    _rampSD _fillSD copySpotDict

    _colorStyle 4 eq{
      pop
      9 2 roll 3 npop 6 -2 roll
    } if

    _colorStyle 3 eq _colorStyle 4 eq or{

      _fillSD begin
        exch
        dup spot1/name get eq{
          spot1 spot2
        }{
          spot2 spot1
        }ifelse
       begin
         begin
            /name xd
            1 exch sub /tintValue xd
            4{
              tintValue mul 4 1 roll
            }repeat
            _spotColor not{
              /tintValue null def
            }if
         end
          /tintValue 0 def
       end
     end
    }if
    _fillSD nsetcustomcolor
  }def
  /renderCMYK{
    spot1/name get null eq
    spot2/name get null eq and
    dup not{
      pop
      spot1 spotConverted
    }if
    dup not{
      pop
      spot2 spotConverted
    }if
  }def
  /fill_ /fill load def
  /fillOvp{
    currentoverprint{
      _inRipSep{
        currentcolorspace 0 get
        dup /DeviceGray eq
        1 index /DeviceCMYK eq or{
          pop
          currentcmykcolor add add add 0 eq{
            newpath
          }if
        }{
          /Separation eq{
            currentcolor 0 eq{
              newpath
            }if
          }if
        }ifelse
      }{
        currentgray 1 eq{
          newpath
        }if
      }ifelse
    }if
    fill_
  }def
  /fill{
    _nCustomColorSD begin
      renderCMYK
      {
        fillOvp
      }{
        spot1 begin
          gsave
          name null ne{
            spot_C spot_M spot_Y spot_K name tintValue setCustomColor
          }{
            1 setgray
          }ifelse
          fillOvp
          grestore
       end
        spot2 begin
          name null ne{
            gsave
            true setoverprint
            spot_C spot_M spot_Y spot_K name tintValue setCustomColor
            fillOvp
            grestore
          }if
       end
        newpath
      }ifelse
   end
  }def
  /expandSpot{
    _spotColor{
      /_len xp
      _rampSD begin
        spot1 begin
          tintImage null ne{
            tintImage _len expandOne /tintImage xd
          }if
       end
        spot2 begin
          tintImage null ne{
            tintImage _len expandOne /tintImage xd
          }if
       end
     end
    }{
      pop
    }ifelse
  }def
  /rampImage{
    _rampSD begin
      _color{
        /cyanInk _cyanData 0 ne def
        /magentaInk _magentaData 0 ne def
        /yellowInk _yellowData 0 ne def
        /blackInk _blackData 0 ne def
        _nSamples setImageParms
        _nSamples expandSpot
        _cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
        true 4 _rampSD ncolorimage
      }{
        /cyanInk false def
        /magentaInk false def
        /yellowInk false def
        /blackInk true def
        _nSamples setImageParms
        _blackData _rampSD bwImage
      }ifelse
   end
  }def
  /nsetcustomcolor where{
    pop
  }{
    /nsetcustomcolor
    {
      /_nCustomColorSD xp
      _nCustomColorSD begin
        4 copy
        /black xd
        /yellow xd
        /magenta xd
        /cyan xd
        4 copy
        0 ne /blackInk xd
        0 ne /yellowInk xd
        0 ne /magentaInk xd
        0 ne /cyanInk xd
     end
      setcmykcolor
    }def
  }ifelse
  /nsetcustomcolorend where{
    pop
  }{
    /nsetcustomcolorend
    {
      /_nCustomColorSD null pt
    }def
  }ifelse
}def
/initializeSinglePassSeps{
  /_decodeNorm  [0 1] pt
  /_decodeInvert  [1 0] pt
  /spotConverted
  {
   begin
      name null eq{
        false
      }{
        tintValue null eq tintImage null eq and{
          true
        }{
          false
          currentpagedevice/SeparationOrder get{name eq or}forall
          not
        }ifelse
      }ifelse
   end
  }def
  /dictImage
  {
    20 dict dup begin
      /Dict xd
      /Decode xd
      /DataSource xd
      /ImageMatrix xd
      /BitsPerComponent xd
      /Height xd
      /Width xd
      /ImageType 1 def
      Dict
   end
    /_image load 1 execImage
  }def
  /bwImage{
   begin
      gsave
      currentoverprint{
        blackInk{
          [/Separation /Black /DeviceGray{}] setcolorspace
          _decodeInvert dictImage
        }{
          5 npop
        }ifelse
      }{
        /DeviceGray setcolorspace
        _decodeNorm dictImage
      }ifelse
      grestore
   end
  }def
  /ncolorimage where{
    pop
  }{
    /ncolorimage{
     begin
        renderCMYK
        {
          cyanInk
          magentaInk and
          yellowInk and
          blackInk and
          not
          currentoverprint
          and
          {
            pop pop
            gsave
            cyanInk{
              8 copy
              [/Separation /Cyan /DeviceGray{}] setcolorspace
              3 npop
              _decodeNorm dictImage
            }if
            magentaInk{
              8 copy
              [/Separation /Magenta /DeviceGray{}] setcolorspace
              4 -1 roll
              3 npop
              _decodeNorm dictImage
            }if
            yellowInk{
              8 copy
              [/Separation /Yellow /DeviceGray{}] setcolorspace
              4 -2 roll
              3 npop
              _decodeNorm dictImage
            }if
            blackInk{
              4 -3 roll
              [/Separation /Black /DeviceGray{}] setcolorspace
              3 npop
              _decodeNorm dictImage
            }{
              8 npop
            }ifelse
            grestore
          }{
            /_colorimage load 10 execImage
          }ifelse
        }{
          6 npop
          gsave
          spot1 begin
            name null ne tintImage null ne and{
              [/Separation name /DeviceGray{}] setcolorspace
              4 copy
              tintImage
              name /Black eq{
                _decodeNorm
              }{
                _decodeInvert
              }ifelse
              dictImage
            }{
              1 setgray fill
            }ifelse
         end
          spot2 begin
            true setoverprint
            name null ne tintImage null ne and{
              [/Separation name /DeviceGray{}] setcolorspace
              tintImage
              name /Black eq{
                _decodeNorm
              }{
                _decodeInvert
              }ifelse
              dictImage
            }{
              4 npop
              1 setgray fill
            }ifelse
         end
          grestore
        }ifelse
     end
    }def
  }ifelse
}def
/initializeMultiPassSeps{
  /_isCMYKSep
    _cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
  pt
  /invertXfer{
    [
    {
      1 exch sub
    }/exec load systemdict /currenttransfer get exec /exec load
    ] cvx systemdict /settransfer get exec
  }def
  /ccThrough{
    gsave
    1 setCustomColor
    currentcmykcolor
    grestore
    add add add 0 ne
  }def
  /spotConverted
  {
   begin
      _isCMYKSep not{
        false
      }{
        name null eq{
          false
        }{
          tintValue null eq tintImage null eq and{
            true
          }{
            spot_C spot_M spot_Y spot_K name ccThrough
          }ifelse
        }ifelse
      }ifelse
   end
  }def
  /spotChannel
  {
    _isCMYKSep{
      pop false
    }{
     begin
        name null eq{
          false
        }{
          spot_C spot_M spot_Y spot_K name ccThrough
        }ifelse
     end
    }ifelse
  }def
  /getChannelData
  {
    _isCMYKSep dup{
      pop renderCMYK
    }if
    {
      _blackPlate{
        4 1 roll 3 npop blackInk
      }{
        _yellowPlate{
          4 2 roll 3 npop yellowInk
        }{
          _magentaPlate{
            4 3 roll 3 npop magentaInk
          }{
            3 npop cyanInk
          }ifelse
        }ifelse
      }ifelse
      {
        true /nonZeroData
      }{
        true /zeroData
      }ifelse
    }{
      4 npop
      spot1/name get null ne
      spot1 spotChannel and{
        spot1/tintImage get dup null ne{
          false /nonZeroData
        }{
          pop false /noData
        }ifelse
      }{
        spot2/name get null ne
        spot2 spotChannel and{
          spot2/tintImage get dup null ne{
            false /nonZeroData
          }{
            pop false /noData
          }ifelse
        }{
          false /noData
        }ifelse
      }ifelse
    }ifelse
  }def
  /renderChannelData
  {
    /_tmp xp
    _tmp /nonZeroData ne currentoverprint and{
      pop
      _tmp /zeroData eq{pop}if
      4 npop
    }{
      _tmp /nonZeroData eq{
        {
          invertXfer
        }if
          systemdict/image
        get 5 execImage
      }{
        pop
        _tmp /zeroData eq{pop}if
        4 npop
        knockOut
      }ifelse
    }ifelse
  }def
  /bwImage{
   begin
      gsave
      dup dup dup
      getChannelData
      exch pop false exch
      renderChannelData
      grestore
   end
  }def
  /ncolorimage{
   begin
      pop pop
      gsave
      spot2/name get null ne spot2 spotChannel and{
        true setoverprint
      }if
      getChannelData
      renderChannelData
      grestore
   end
  }def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
  AGM_Gradient begin
  AGM_Gradient_private begin
  initializeVars

  /bd systemdict/mark get def
  /ed
    _level2PS
    {
      (>>)
    }{
      (counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
    } ifelse
  cvx def

  _level2PS{
    initializeLev2
  }{
    initializeLev1
  }ifelse

  queryDevice

  initializeShading
  initializeOps
  _producingSeps{
    AGM_Gradient_Sep/initialize get exec
  }{
    initializeComposite
  }ifelse
  _illustrator{
    /f{}def
    /F{}def
    /s{}def
    /S{}def
    /b{}def
    /B{}def
  }if
  /image where{
    /image get /_image xd
  }if
  /colorimage where{
    /colorimage get /_colorimage xd
  }if
  /rectfill where dup{
    exch pop not _producingSeps or
  }{
    not
  }ifelse
  {
    /rectfill{
      gsave
      newpath
      4 2 roll moveto
      1 index 0 rlineto
      0 1 index rlineto
      1 index neg 0 rlineto
      pop pop
      closepath
      fill
      grestore
    }def
  }if
  /linealImage _noImage{
    /rectImage load
  }{
    _producingSeps{
      AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
      /rampImage load
     end
    }{
      /rampImage load
    }ifelse
  }ifelse
  def
  AGM_Gradient_private
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
  AGM_Gradient
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
 end

  currentdict readonly pop
 end
}def
/initializeAI
{
  pop pop
  AGM_Gradient/AGM_Gradient_private get /_illustrator true put
  AGM_Gradient/initialize get exec
    AGM_Gradient begin
}def
/unload{
  systemdict/languagelevel known{
    systemdict/languagelevel get 2 ge{
      userdict/AGM_Gradient_Sep 2 copy known{
        undef
      }{
        pop pop
      }ifelse
      userdict/AGM_Gradient 2 copy known{
        undef
      }{
        pop pop
      }ifelse
    }if
  }if
}def
/terminate{
  currentdict AGM_Gradient eq{
   end
  }if
}def

AGM_Gradient_private begin
/initializeVars{
  /_d255 256 array def
  0 1 255{
    _d255 exch dup 255 div put
  }bind for
  /_d255- 256 array def
  0 1 255{
    _d255- exch 1 _d255 2 index get sub put
  }bind for
  /_sSave nd
  /_dUserSpace matrix defaultmatrix def
  /_bUMatrix matrix def
  /_imageMatrix matrix def
  /_saveMatrix matrix def
  /_xm matrix def
  /_ccAry1 5 array def
  /_level2PS
    systemdict/languagelevel known dup{
      pop systemdict/languagelevel get 2 ge
    }if
  def
  /_level3PS
    _level2PS systemdict/shfill known and
  def
  currentdict /_illustrator known not{
    /_illustrator false def
  }if

}def
/initializeOps
{
  AGM_Gradient begin
  currentdict/Bc known not{
    /Bc{

      _renderFlag 2 eq{
        6 npop
      }{
        pushBSpace
        _rampIndex 0 eq{
          pop pop
          setCStop
        }if
        linealFill
        popBSpace
      }ifelse

    }def
  }if

  currentdict/Bg known not{
    /Bg{
      10 npop
      /_gradName xp
      /_renderFlag xp

      _renderFlag 2 ne{

        _illustrator{
          _of setoverprint
        }if

        _illustrator _eo and _renderFlag 3 eq or{
          eoclip
        }{
          clip
        }ifelse

        _gradNames _gradName 2 copy known{
          get
          mark exch aload pop
          /_gradType xp
          1 sub dup /_rampIndex xp
          /_maxRampIndex xp
          mark exch aload pop
          0 0
        }if
        pop pop
        getRampData
      }{
        mark mark
      }ifelse
    }def
  }if

  currentdict/Bm known not{
    /Bm{
      _renderFlag 2 ne{
        _gradType 0 eq{
          linealRamp
        }{
          radialGrad
        }ifelse
      }{
        6 npop
      }ifelse
    }def
  }if

  currentdict/Bh known not{
    /Bh{
      2 npop
      /_yHi xp
      /_xHi xp
      /_radHilite _xHi 0 ne _yHi 0 ne or pt
    }def
  }if

  currentdict/Bn known not{
    /Bn{
      AGM_Gradient_private begin
        dict /_gradNames xp
     end
    }def
  }if

  currentdict/Bd known not{
    /Bd{
      AGM_Gradient begin
      AGM_Gradient_private begin
        /_nColorsBd xp
        /_gradType xp
        /_gradName xp
    }def
  }if

  currentdict/BD known not{
    /BD{
        currentdict/_gradNames known not{
          /_gradNames 20 dict def
        }if
        ] _nColorsBd _gradType
        ]  _gradName exch /_gradNames xput
     end
     end
    }def
  }if

  currentdict/Bb known not{
    /Bb{

      AGM_Gradient begin
      AGM_Gradient_private begin
      _producingSeps{
        AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
      }if
      mySave
    }def
  }if

  currentdict/BB known not{
    /BB{

      /_tmp xp
      cleartomark cleartomark

      _tmp dup
      _renderFlag

      myRestore

      _producingSeps{
       end
      }if

      _illustrator
     end
     end

      {
        2 ne exch 0 gt and{
          2 eq{
            s
          }{
            S
          }ifelse
        }{
          pop newpath
        }ifelse
      }{
        pop newpath
      }ifelse


    }def
  }if

  currentdict/Xm known not{
    /Xm{
      _xm astore pop
    }def
  }if

 end
}def
/queryDevice{
  /_inRipSep
    _level2PS{
      currentpagedevice/Separations 2 copy known{
        get
      }{
        pop pop false
      }ifelse
    }{
      false
    }ifelse
  def
  /_noImage /lv1Fix where{
    pop lv1Fix
  }{
    false
  }ifelse
  def
  /_useShells where{
    pop
  }{
    /_useShells true def
  }ifelse

  /_useSmoothShade where{
    pop
  }{
    /_useSmoothShade false def
  }ifelse
  /_cyanPlate 1 0 0 0 testCMYKColorThrough def
  /_magentaPlate 0 1 0 0 testCMYKColorThrough def
  /_yellowPlate 0 0 1 0 testCMYKColorThrough def
  /_blackPlate 0 0 0 1 testCMYKColorThrough def
  /_compositeJob
    _cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
  def
  /_compositeSpotDevice where{
    pop
  }{
    /_compositeSpotDevice _compositeJob not _inRipSep or{
      1
    }{
      0
    }ifelse
    def
  }ifelse
  /_producingSeps _compositeSpotDevice 0 ne def
  /_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
  /_dpiThreshold where{
    pop
  }{
    /_dpiThreshold 600 def
  }ifelse
  /_screenFreqThreshold where{
    pop
  }{
    /_screenFreqThreshold 150 def
  }ifelse
  /_contoneDevice where{
    pop
  }{
    /_contoneDevice false def
  }ifelse
  /_subSampleOK
    _deviceDPI _dpiThreshold le
    currentScreenFreq _screenFreqThreshold le and
    _contoneDevice not and
    _producingSeps not and
  def
}def
/initializeLev1{
  /makeByte8{
    /_tmp 0 pt
    255 mul cvi
    8 string 8{
      dup _tmp 3 index put
      /_tmp _tmp 1 add pt
    }repeat
    exch pop
  }def
  /currentScreenFreq{
    currentscreen pop pop
  }def
  /_byte 1 string def
  /colorimage where{
    pop
  }{
    /colorimage{
      pop pop
      /_blackTmp xp
      /_yellowTmp xp
      /_magentaTmp xp
      /_cyanTmp xp
      /_cnt 0 pt
      [
      _byte dup 0
      _cyanTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
      _magentaTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
      _yellowTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
      _blackTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx
      /add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
      /dup cvx 0 /lt cvx{
        pop 0
      }/if cvx
      /dup cvx 1 /gt cvx{
        pop 1
      }/if cvx
      255 /mul cvx /cvi cvx
      256 /mod cvx
      /dup cvx 0 /lt cvx{
        pop 0
      }/if cvx
      /put cvx
      /_cnt dup cvx 1 /add cvx /pt cvx
      ] cvx
      bind
      /_image load 5 execImage
    }def
  }ifelse
}def
/initializeLev2{
  /level2ScreenFreq{
   begin
    60
    HalftoneType 1 eq{
      pop Frequency
    }if
    HalftoneType 2 eq{
      pop GrayFrequency
    }if
    HalftoneType 5 eq{
      pop Default level2ScreenFreq
    }if
     end
  }def
  /currentScreenFreq{
    currenthalftone level2ScreenFreq
  }def
}def
/initializeShading{
  _useSmoothShade _level3PS and{
    /_usingSmoothShade true pt
    initializeLev3_Ops
  }{
    /_usingSmoothShade false pt
  }ifelse
}def
/initializeLev3_Ops
{
  /initShFill{
    /_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
    /_rampFuncsArray _maxRampIndex array pt
    /_boundsArray _maxRampIndex 1 sub array pt
    /_encodeArray _maxRampIndex 2 mul array pt
    /_beginCoord _rampPoint pt
    /_colorSpace null pt
    /_firstFill _rampIndex _maxRampIndex eq pt
    /_lastFill false pt
  }def
  /getRampColorSpace{
    _nSamples 1 gt{
      /_ndx 0 pt
      [blendColor] cvx exec
    }if
    /_C0 [currentcolor] pt
    /_C0_Space currentcolorspace pt

    _nSamples 1 gt{
      /_ndx _nSamples 1 sub pt
      [blendColor] cvx exec
    }if
    /_C1 [currentcolor] pt
    /_C1_Space currentcolorspace pt

    _C0_Space _C1_Space eq{
      /_rampColorSpace _C0_Space pt
    }{
      (colorspace conflict!) ==
      showpage
      stop
    }ifelse

    _spotColor{
      nsetcustomcolorend
    }if
  }def
  /linealShFill{
    popBSpace
    _xm aload pop pushBSpace

    /_size _index 1 add pt
    _size _maxRampIndex lt {
      /_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
      /_boundsArray _boundsArray 0 _size 1 sub getinterval pt
      /_encodeArray _encodeArray 0 _size 2 mul getinterval pt
    }if

    bd
      /ShadingType 2
      /ColorSpace _colorSpace
      /Function
        bd
          /FunctionType 3
          /Domain [0 1]
          /Functions _rampFuncsArray
          /Bounds _boundsArray
          /Encode _encodeArray
        ed
      /Extend [_firstFill _lastFill]
      /Domain [0 1]
      /Coords [_beginCoord 0 _endCoord 0]
    ed
    shfill
  }def

  /radialShFill{
    /_size _maxRampIndex _index sub pt
    _size _maxRampIndex lt {
      /_rampFuncsArray _rampFuncsArray _index _size getinterval pt
      /_boundsArray _boundsArray _index _size 1 sub getinterval pt
      /_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
    }if

    /_rampLen _beginCoord _endCoord sub pt
    bd
      /ShadingType 3
      /ColorSpace _colorSpace
      /Function
        bd
          /FunctionType 3
          /Domain [0 1]
          /Functions _rampFuncsArray
          /Bounds _boundsArray
          /Encode _encodeArray
        ed
      /Extend [_lastFill _firstFill]
      /Domain [0 1]
      /Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord]
    ed
    shfill

    _radHilite{
      _xHi _rampLen mul _yHi _rampLen mul translate
    }if
  }def

  /fillRamp{


    /_invert _midPoint 0.5 lt pt
    _rampIndex _maxRampIndex eq {
      initShFill
    }if

    getRampColorSpace

    _colorSpace null eq{
      /_colorSpace _rampColorSpace pt
    }{
      _colorSpace _rampColorSpace ne{
        /_index _index 1
        _gradType 0 eq{
          sub pt
          linealShFill
        }{
          add pt
          radialShFill
        }ifelse
        initShFill
        /_colorSpace _rampColorSpace pt
      } if
    }ifelse
    /_endCoord _endPoint pt
    _rampFuncsArray _index
    bd
      /FunctionType 2
      /Domain [0 1]
      /N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
      _gradType 0 eq{
        _invert{/C1}{/C0}ifelse _C0
        _invert{/C0}{/C1}ifelse _C1
      }{
        _invert{/C0}{/C1}ifelse _C1
        _invert{/C1}{/C0}ifelse _C0
      }ifelse
    ed
    put

    _rampIndex 1 ne{
      _boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
    } if

    0 1 _invert {exch}if
    _encodeArray _index 2 mul 1 add 3 -1 roll put
    _encodeArray _index 2 mul 3 -1 roll put
    _rampIndex 1 eq {
      /_lastFill true pt
      _gradType 0 eq{
        linealShFill
      }{
        radialShFill
      }ifelse
    }if
    /_index _index 1
    _gradType 0 eq{
      add pt
    }{
      sub pt
    }ifelse
  }def

  /radialRamp
    /fillRamp load def

  /rampImage
    /fillRamp load def

  AGM_Gradient begin
  /Bc{
    6 npop
  }def

 end


}def
/initializeComposite{
  /bwImage{
    pop /_image load 5 execImage
  }def
  currentdict/rampImage known not{
    /rampImage{
      _color{
        _nSamples setImageParms


        _rgbRamp{
          _redData _greenData _blueData _nSamples 3 expandColor
          true 3 null ncolorimage
        }{
          _cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
          true 4 null ncolorimage
        }ifelse
      }{
        _nSamples setImageParms _blackData null bwImage
      }ifelse
    }def
  }if
  /setCStop{
    /_colorStyle exch pt
    _colorStyle 0 eq{
      1 exch sub
      0 0 0
      4 -1 roll
    }if

    _colorStyle 2 eq{
      setrgbcolor 4 npop
    }if

    _colorStyle 3 eq{
      1 exch sub /_tmp xp
      pop
      4{
        _tmp mul 4 1 roll
      }repeat
    }if

    _colorStyle 4 eq{
      3 -1 roll pop pop
      1 exch sub /_tmp xp
      3{
        1 exch sub _tmp mul 1 exch sub 3 1 roll
      }repeat
      setrgbcolor
      4 npop
    }if
    _colorStyle 2 ne _colorStyle 4 ne and{
      null nsetcustomcolor
    }if
  }def
  /nsetcustomcolor
  {
    pop setcmykcolor
  }def
  /nsetcustomcolorend
  {
  }def
  /ncolorimage{
    pop
    /_colorimage load 10 execImage
  }def
  _noImage not _level2PS not and{
    /linealFill{
      8 setImageParms
      _color{
        currentcmykcolor
        4{
          makeByte8 4 1 roll
        }repeat
        true 4 null ncolorimage
      }{
        currentgray makeByte8 null bwImage
      }ifelse
    }def
  }if
}def
/npop{
  {pop}repeat
}def
/xd{
  exch def
}def
/nd{
  null def
}def
/pt{
  AGM_Gradient_private 3 1 roll put
}def
/xp{
  exch pt
}def
/xput{
  dup load dup length exch maxlength eq{
    dup dup load dup
    length 2 mul dict copy def
  }if
  load begin
    def
  end
}def
/mySave{
  save /_sSave xp
}def
/myRestore{
  _sSave type /savetype eq{
    _sSave restore
  }if
}def
/gMark{
  counttomark 2 add -1 roll
}def
/execImage{
  /_tmp xp
  {
    exec
  }stopped{
    $error /errorname get /undefinedresult ne{
      stop
    }{
      _tmp npop
    }ifelse
  }if
}def
/pushBSpace{
  newpath gsave
  _bUMatrix astore concat
}def
/popBSpace{
  grestore
}def
/setImageParms{
  1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
  0 0 1 1 rectfill
}def
/testCMYKColorThrough{
  gsave
  setcmykcolor currentcmykcolor
  grestore
  add add add 0 ne
}def
/expandOne  {
  /_tmp xp
  dup type /stringtype ne{
    _tmp string
    exch
    dup 0 ne{
      255 mul cvi
      0 1 _tmp 1 sub{
        3 copy
        exch put pop
      }for
    }if
    pop
  }if
}def
/expandColor{
  /_channels xp
  /_len xp
  _channels{
    _len expandOne _channels 1 roll
  }repeat
}def
/blendColor{

  _color{
    _rgbRamp _producingSeps not and{
      _redData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _greenData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _blueData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      /setrgbcolor cvx
    }{
      _cyanData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _magentaData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _yellowData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _blackData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if

      _spotColor{
        _rampSD begin
          /_rampSD cvx /begin cvx

          spot1 begin
            tintImage dup type /stringtype eq{
              /_ndx cvx /get cvx _d255- /exch cvx /get cvx
            }{
              dup null ne{
                name type /nametype ne{
                  1 exch sub
                }if
              }if
            }ifelse
         end
          /spot1 cvx /tintValue 3 -1 /roll cvx /put cvx

          spot2 begin
            tintImage dup type /stringtype eq{
              /_ndx cvx /get cvx _d255- /exch cvx /get cvx
            }{
              dup null ne{
                name type /nametype ne{
                  1 exch sub
                }if
              }if
            }ifelse
         end
          /spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
          /end cvx
       end
        /_rampSD cvx
        /nsetcustomcolor cvx
      }{
        /setcmykcolor cvx
      }ifelse
    }ifelse
  }{
    _blackData /_ndx cvx /get cvx
    _d255 /exch cvx /get cvx

    _usingSmoothShade{
      1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
    }{
       /setgray cvx
    }ifelse
  }ifelse
}def
/linealRamp{
  pushBSpace
  _ramp{
    linealImage
  }{
    linealFill
  }ifelse
  popBSpace
  /_rampIndex _rampIndex 1 sub pt
  _rampIndex 0 gt{
    getRampData
  }if
}def
/radialGrad{
  /_firstShell true pt
  _usingSmoothShade not{
    fill
  }if
  pushBSpace

  _radHilite{
    _xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
    _rampPoint 1 lt{
      1 _rampPoint sub dup _xHi mul exch _yHi mul translate
    }if
  }if
  _rampIndex{
      radialRamp
    /_rampIndex _rampIndex 1 sub pt
    _rampIndex 0 gt{
      getRampData
    }if
  }repeat

  popBSpace

}def
/getNSamples{
  0 exch
  {
    dup type /stringtype eq{
      length exch pop exit
    }if
    pop
  }forall
  dup 0 eq{
    pop 1
  }if
}def
/getRampData{
  /_rampType gMark pt
  /_color _rampType 0 gt pt
  /_ccRGB _rampType 5 eq _rampType 6 eq or pt
  /_rgbRamp _rampType 4 eq _ccRGB or pt
  /_ccProcess _rampType 2 eq _rampType 3 eq or pt
  _producingSeps{
    _rampSD initSpotDict
    /_spotColor _ccProcess _ccRGB or pt
  }{
    /_spotColor false pt
  }ifelse
  /_ramp true pt
  100 div /_rampPoint xp
  100 div /_midPoint xp

  dup /_colorStyle xp
  _colorStyle 0 eq{
    2
  }{
    _colorStyle 1 eq{
      5
    }{
      _colorStyle 2 eq{
        8
      }{
        _colorStyle 3 eq{
          _producingSeps{
            _rampSD begin
              spot1 begin
                /name 3 index def
                /spot_K 4 index def
                /spot_Y 5 index def
                /spot_M 6 index def
                /spot_C 7 index def
             end
           end
          }if
          7
        }{
          _producingSeps{
            _rampSD begin
              spot1 begin
                /name 4 index def
                /spot_K 8 index def
                /spot_Y 9 index def
                /spot_M 10 index def
                /spot_C 11 index def
             end
           end
          }if
          11
        } ifelse
      }ifelse
    }ifelse
  }ifelse
  /_tmp xp
  _tmp index 100 div /_endPoint xp

  _gradType 1 eq{
    _tmp 1 add index 100 div /_midPoint xp
  }if

  _producingSeps{
    _tmp 2 add index /_nextColorStyle xp
    _nextColorStyle 3 eq{
      /_tmp _tmp 4 add pt
      _tmp index dup
      _rampSD begin
        spot1 /name get ne{
          spot2 begin
            /name xd
            /spot_K _tmp 2 add index def
            /spot_Y _tmp 3 add index def
            /spot_M _tmp 4 add index def
            /spot_C _tmp 5 add index def
         end
        }{
          pop
        }ifelse
     end
    }if
    _nextColorStyle 4 eq{
      /_tmp _tmp 5 add pt
      _tmp index dup
      _rampSD begin
        spot1 /name get ne{
          spot2 begin
            /name xd
            /spot_K _tmp 5 add index def
            /spot_Y _tmp 6 add index def
            /spot_M _tmp 7 add index def
            /spot_C _tmp 8 add index def
         end
        }{
          pop
        }ifelse
     end
    }if
  }if
  _rampType 3 eq _rampType 6 eq or{
    /_tint2Data gMark pt
  }if
  _ccProcess _ccRGB or{
    /_tint1Data gMark pt
  }if
  _rgbRamp{
    /_blueData gMark pt
    /_greenData gMark pt
    /_redData gMark pt
  }if

  _producingSeps{
    _rampSD begin
      _ccProcess _ccRGB or{
        _rampType 3 eq _rampType 6 eq or{
          spot2 begin
            /tintImage _gradType 0 eq{
              _tint2Data
            }{
              _tint1Data
            }ifelse
            def
            name null eq{
              /name /Black def
            }if
         end
        }if
        spot1 begin
          /tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
            _tint1Data
          }{
            _tint2Data
          }ifelse
          def
          _rampType 2 eq _rampType 5 eq or{
            name null eq{
              /name spot2 /name get def
              spot2 /name null put
            }if
          }{
            name null eq{
              /name /Black def
            }if
          }ifelse
       end
      }if
   end
  }if
  /_blackData gMark pt
  _rampType 0 gt{
    counttomark 4 add -3 roll
    /_yellowData xp
    /_magentaData xp
    /_cyanData xp
  }if
  _ramp{
    /_nSamples
      [
      _rampType 0 eq {_blackData}if
      _rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
      _rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
      _rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
      _rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
      _rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
      _rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
      ] getNSamples pt
    _usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
  } if

  setCStop
}def
/rectImage{
  gsave
  /_sInc 1 pt
  /_bInc 1 _nSamples div pt
  /_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
  /_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
  0
  _nSamples
  [
  /dup cvx
  /_ndx /exch cvx /pt cvx
  blendColor
  0 0 _bInc 1 /rectfill cvx
  _bInc 0 /translate cvx
  _sInc /add cvx
  ] cvx
  bind
  repeat
  pop
  _spotColor{
    nsetcustomcolorend
  }if
  grestore
}def
/radialInit{
  /_nRadSamples _nSamples dup 0 eq{pop 1}if pt
  /_sInc -1 pt
  /_rampLen _rampPoint _endPoint sub pt
  /_bInc _rampLen _nSamples div neg pt
  /_optimize false pt
  _subSampleOK{
    /_uRampLen
      _rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
      0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
      2 copy lt{
        exch
      }if pop
    pt
    /_pChange
      _uRampLen 0 eq{
        0
      }{
        _nSamples _uRampLen div
      }ifelse
    pt
    _pChange .5 gt dup /_optimize xp{
      /_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
      /_bInc _rampLen _nRadSamples div neg pt
      /_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
    }if
  }if
  _radHilite{
    /_xBCInc _xHi _rampLen mul _nRadSamples div pt
    /_yBCInc _yHi _rampLen mul _nRadSamples div pt
  }if
}def
currentdict/radialRamp known not{
  /radialRamp{

    /_saveMatrix _saveMatrix currentmatrix def

    radialInit

    _rampPoint

    _nSamples 1 sub

    _nRadSamples
    [
      /dup cvx

      _optimize{
        /round cvx /cvi cvx
      }if

      /_ndx /exch cvx /pt cvx

      _useShells{
        /_firstShell cvx{
          /_firstShell false pt
        }{
          0 0 3 index 360 0 arcn fill
        }/ifelse cvx
      }if

      blendColor

      _useShells{
        0 0 3 /index cvx 0 360 /arc cvx
      }{
        0 0 3 /index cvx 0 360 /arc cvx /fill cvx
      }ifelse

      /exch cvx _bInc /add cvx /exch cvx

      _sInc /add cvx

      _radHilite{
        _xBCInc _yBCInc /translate cvx
      }if
    ] cvx bind
    repeat

    pop pop

    _saveMatrix setmatrix

    _radHilite{
      _xHi _rampLen mul _yHi _rampLen mul translate
    }if

    _useShells _rampIndex 1 eq and{
      fill
    }if
    _spotColor{
      nsetcustomcolorend
    }if


  }def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
  userdict /Adobe_ColorImage_AI6 24 dict put
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{
  Adobe_ColorImage_AI6 begin
  Adobe_ColorImage_AI6
  {
    dup type /arraytype eq
    {
      dup xcheck
      {
        bind
      } if
    } if
    pop pop
  } forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
  /Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
  /channelcount 0 def
  /sourcecount 0 def
  /sourcearray 4 array def
  /plateindex -1 def
  /XIMask 0 def
  /XIBinary 0 def
  /XIChannelCount 0 def
  /XIBitsPerPixel 0 def
  /XIImageHeight 0 def
  /XIImageWidth 0 def
  /XIImageMatrix null def
  /XIBuffer null def
  /XIDataProc null def
  /XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
  /colorimage where
  {
    /colorimage get /_colorimage exch def
  }
  {
    /_colorimage null def
  } ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
  0 3 index
  dup length 1 sub 0 3 3 -1 roll
  {
    3 getinterval { } forall
    5 index exec
    3 index
  } for

   5 { pop } repeat
} def
/WalkCMYKString
{
  0 3 index
  dup length 1 sub 0 4 3 -1 roll
  {
    4 getinterval { } forall

    6 index exec

    3 index

  } for

  5 { pop } repeat

} def
/StuffRGBIntoGrayString
{
  .11 mul exch

  .59 mul add exch

  .3 mul add

  cvi 3 copy put

  pop 1 add
} def
/RGBToGrayImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcearray 0 get exec
    dup length 3 idiv string
    dup 3 1 roll

    /StuffRGBIntoGrayString load exch
    WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
  exch .11 mul add

  exch .59 mul add

  exch .3 mul add

  dup 255 gt { pop 255 } if

  255 exch sub cvi 3 copy put

  pop 1 add
} def
/CMYKToGrayImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcearray 0 get exec
    dup length 4 idiv string
    dup 3 1 roll

    /StuffCMYKIntoGrayString load exch
    WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
  pop true eq
  {
    Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
  }
  {
    Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
    {
      Adobe_ColorImage_AI6_Vars begin
        sourcearray 0 3 -1 roll put

        channelcount 3 eq
        {
          /RGBToGrayImageProc
        }
        {
          /CMYKToGrayImageProc
        } ifelse
        load
     end
    } if
    image
  } ifelse
} def
/SeparateCMYKImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcecount 0 ne
    {
      sourcearray plateindex get exec
    }
    {
      sourcearray 0 get exec

      dup length 4 idiv string

      0 2 index

      plateindex 4 2 index length 1 sub
      {
        get 255 exch sub

        3 copy put pop 1 add

        2 index
      } for
      pop pop exch pop
    } ifelse
 end
} def

/FourEqual
{
  4 index ne
  {
    pop pop pop false
  }
  {
    4 index ne
    {
      pop pop false
    }
    {
      4 index ne
      {
        pop false
      }
      {
        4 index eq
      } ifelse
    } ifelse
  } ifelse
} def
/TestPlateIndex
{
  Adobe_ColorImage_AI6_Vars begin
    /plateindex -1 def
    /setcmykcolor where
    {
      pop
      gsave
      1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
      grestore
      1 0 0 0 FourEqual
      {
        /plateindex 0 def
      }
      {
        0 1 0 0 FourEqual
        {
          /plateindex 1 def
        }
        {
          0 0 1 0 FourEqual
          {
            /plateindex 2 def
          }
          {
            0 0 0 1 FourEqual
            {
              /plateindex 3 def
            }
            {
              0 0 0 0 FourEqual
              {
                /plateindex 5 def
              } if
            } ifelse
          } ifelse
        } ifelse
      } ifelse
      pop pop pop pop
    } if
    plateindex
 end
} def
/colorimage
{
  Adobe_ColorImage_AI6_Vars begin
    /channelcount 1 index def
    /sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
    4 sourcecount add index dup
    8 eq exch 1 eq or not
 end

  {
    /_colorimage load null ne
    {
      _colorimage
    }
    {
      Adobe_ColorImage_AI6_Vars /sourcecount get
      7 add { pop } repeat
    } ifelse
  }
  {
    dup 3 eq
    TestPlateIndex
    dup -1 eq exch 5 eq or or
    {
      /_colorimage load null eq
      {
        ColorImageCompositeEmulator
      }
      {
        dup 1 eq
        {
          pop pop image
        }
        {
          Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
          {
            gsave

            0 _currenttransfer exec
            1 _currenttransfer exec
            eq
            { 0 _currenttransfer exec 0.5 lt }
            { 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse

            { { pop 0 } } { { pop 1 } } ifelse
            systemdict /settransfer get exec
          } if

          _colorimage

          Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
          {
            grestore
          } if
        } ifelse
      } ifelse
    }
    {
      dup 1 eq
      {
        pop pop
        image
      }
      {
        pop pop
        Adobe_ColorImage_AI6_Vars begin
          sourcecount -1 0
          {
            exch sourcearray 3 1 roll put
          } for
          /SeparateCMYKImageProc load
       end
        systemdict /image get exec
      } ifelse
    } ifelse
  } ifelse
} def
/XG
{
  pop pop
} def
/XF
{
  13 {pop} repeat
} def
/Xh
{
  Adobe_ColorImage_AI6_Vars begin
    gsave
    /XIMask exch 0 ne def
    /XIImageHeight exch def
    /XIImageWidth exch def
    /XIImageMatrix exch def
    0 0 moveto
    XIImageMatrix concat
    XIImageWidth XIImageHeight scale

    XIMask
    {
      /_lp /null ddef
      _fc
      /_lp /imagemask ddef
    }
    if
    /XIVersion 7 def
 end
} def
/XH
{
  Adobe_ColorImage_AI6_Vars begin
    /XIVersion 6 def
    grestore
 end
} def
/XI
{
  Adobe_ColorImage_AI6_Vars begin
    gsave
    /XIMask exch 0 ne def
    /XIBinary exch 0 ne def
    pop
    pop
    /XIChannelCount exch def
    /XIBitsPerPixel exch def
    /XIImageHeight exch def
    /XIImageWidth exch def
    pop pop pop pop
    /XIImageMatrix exch def
    XIBitsPerPixel 1 eq
    {
      XIImageWidth 8 div ceiling cvi
    }
    {
      XIImageWidth XIChannelCount mul
    } ifelse
    /XIBuffer exch string def
    XIBinary
    {
      /XIDataProc { currentfile XIBuffer readstring pop } def
      XIVersion 6 le
      {
        currentfile 128 string readline pop pop
      }
      if
    }
    {
      /XIDataProc { currentfile XIBuffer readhexstring pop } def
    } ifelse

    XIVersion 6 le
    {
      0 0 moveto
      XIImageMatrix concat
      XIImageWidth XIImageHeight scale
      XIMask
      {
        /_lp /null ddef
        _fc
        /_lp /imagemask ddef
      } if
    } if

    XIMask
    {
      XIImageWidth XIImageHeight
      false
      [ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
      /XIDataProc load
      imagemask
    }
    {
      XIImageWidth XIImageHeight
      XIBitsPerPixel
      [ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
      /XIDataProc load

      XIChannelCount 1 eq
      {
        gsave
        0 setgray
        image
        grestore
      }
      {
        false
        XIChannelCount
        colorimage
      } ifelse
    } ifelse
    grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
  userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
  Adobe_Illustrator_AI5 dup begin
  Adobe_Illustrator_AI5_vars begin
  discardDict
  {
    bind pop pop
  } forall
  dup /nc get begin
  {
    dup xcheck 1 index type /operatortype ne and
    {
      bind
    } if
    pop pop
  } forall
 end
  newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
  Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
  dup load dup length exch maxlength eq
  {
    dup dup load dup
    length 2 mul dict copy def
  } if
  load begin
  def
 end
} def
/npop
{
  {
    pop
  } repeat
} def
/hswj
{
  dup stringwidth 3 2 roll
  {
    _hvwb eq { exch _hvcx add exch _hvcy add } if
    exch _hvax add exch _hvay add
  } cforall
} def
/vswj
{
  0 0 3 -1 roll
  {
    dup 255 le
    _charorientation 1 eq
    and
    {
      dup cstring stringwidth 5 2 roll
      _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      exch _hvay sub exch _hvax sub
      4 -1 roll sub exch
      3 -1 roll sub exch
    }
    {
      _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      exch _hvay sub exch _hvax sub
      _fontHeight sub
    } ifelse
  } cforall
} def
/swj
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  _lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
  0 0 0 6 3 roll swj
} def
/vjss
{
  4 1 roll
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      5 index setmatrix stroke
      grestore
      _fontRotateAdjust sub
      moveto
      _sp eq
      {
        5 index 5 index rmoveto
      } if
      2 copy rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      5 index sub
      3 index _sp eq
      {
        9 index sub
      } if

      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto

      gsave
      2 index false charpath
      6 index setmatrix stroke
      grestore

      moveto pop pop
    } ifelse
  } cforall
  6 npop
} def
/hjss
{
  4 1 roll
  {
    dup cstring
    gsave
    false charpath currentpoint
    5 index setmatrix stroke
    grestore
    moveto
    _sp eq
    {
      5 index 5 index rmoveto
    } if
    2 copy rmoveto
  } cforall
  6 npop
} def
/jss
{
  _lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
  0 0 0 7 3 roll jss
} def
/vjsp
{
  4 1 roll
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      false charpath
            currentpoint
      _fontRotateAdjust sub
      moveto
      _sp eq
      {
        5 index 5 index rmoveto
      } if
      2 copy rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      5 index sub
      3 index _sp eq
      {
        9 index sub
      } if

      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto

      2 index false charpath

      moveto pop pop
    } ifelse
  } cforall
  6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
  matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
  transform
  0.25 sub round 0.25 add exch
  0.25 sub round 0.25 add exch
  itransform
} def
/setstrokeadjust where
{
  pop true setstrokeadjust
  /c
  {
    curveto
  } def
  /C
  /c load def
  /v
  {
    currentpoint 6 2 roll curveto
  } def
  /V
  /v load def
  /y
  {
    2 copy curveto
  } def
  /Y
  /y load def
  /l
  {
    lineto
  } def
  /L
  /l load def
  /m
  {
    moveto
  } def
}
{
  /c
  {
    pl curveto
  } def
  /C
  /c load def
  /v
  {
    currentpoint 6 2 roll pl curveto
  } def
  /V
  /v load def
  /y
  {
    pl 2 copy curveto
  } def
  /Y
  /y load def
  /l
  {
    pl lineto
  } def
  /L
  /l load def
  /m
  {
    pl moveto
  } def
} ifelse
/d
{
  setdash
} def
/cf
{
} def
/i
{
  dup 0 eq
  {
    pop cf
  } if
  setflat
} def
/j
{
  setlinejoin
} def
/J
{
  setlinecap
} def
/M
{
  setmiterlimit
} def
/w
{
  setlinewidth
} def
/XR
{
  0 ne
  /_eo exch ddef
} def
/H
{
} def
/h
{
  closepath
} def
/N
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      _eo {eoclip} {clip} ifelse /_doClip 0 ddef
    } if
    newpath
  }
  {
    /CRender
    {
      N
    } ddef
  } ifelse
} def
/n
{
  N
} def
/F
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
      /_doClip 0 ddef
    }
    {
      _pf
    } ifelse
  }
  {
    /CRender
    {
      F
    } ddef
  } ifelse
} def
/f
{
  closepath
  F
} def
/S
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
      /_doClip 0 ddef
    }
    {
      _ps
    } ifelse
  }
  {
    /CRender
    {
      S
    } ddef
  } ifelse
} def
/s
{
  closepath
  S
} def
/B
{
  _pola 0 eq
  {
    _doClip 1 eq
    gsave F grestore
    {
      gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
      /_doClip 0 ddef
    }
    {
      S
    } ifelse
  }
  {
    /CRender
    {
      B
    } ddef
  } ifelse
} def
/b
{
  closepath
  B
} def
/W
{
  /_doClip 1 ddef
} def
/*
{
  count 0 ne
  {
    dup type /stringtype eq
    {
      pop
    } if
  } if
  newpath
} def
/u
{
} def
/U
{
} def
/q
{
  _pola 0 eq
  {
    gsave
  } if
} def
/Q
{
  _pola 0 eq
  {
    grestore
  } if
} def
/*u
{
  _pola 1 add /_pola exch ddef
} def
/*U
{
  _pola 1 sub /_pola exch ddef
  _pola 0 eq
  {
    CRender
  } if
} def
/D
{
  pop
} def
/*w
{
} def
/*W
{
} def
/`
{
  /_i save ddef
  clipForward?
  {
    nulldevice
  } if
  6 1 roll 4 npop
  concat pop
  userdict begin
  /showpage
  {
  } def
  0 setgray
  0 setlinecap
  1 setlinewidth
  0 setlinejoin
  10 setmiterlimit
  [] 0 setdash
  /setstrokeadjust where {pop false setstrokeadjust} if
  newpath
  0 setgray
  false setoverprint
} def
/~
{
 end
  _i restore
} def
/O
{
  0 ne
  /_of exch ddef
  /_lp /none ddef
} def
/R
{
  0 ne
  /_os exch ddef
  /_lp /none ddef
} def
/g
{
  /_gf exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _gf setgray
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/G
{
  /_gs exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _gs setgray
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/k
{
  _cf astore pop
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _cf aload pop setcmykcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/K
{
  _cs astore pop
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _cs aload pop setcmykcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/Xa
{
  _rgbf astore pop
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _rgbf aload pop setrgbcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/XA
{
  _rgbs astore pop
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _rgbs aload pop setrgbcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/_rgbtocmyk
{
3
  {
  1 exch sub 3 1 roll
  } repeat
3 copy 1 4 1 roll
3
  {
  3 index 2 copy gt
    {
    exch
    } if
  pop 4 1 roll
  } repeat
pop pop pop
4 1 roll
3
  {
  3 index sub
  3 1 roll
  } repeat
4 -1 roll
} def
/Xx
{
  exch
  /_gf exch ddef
  0 eq
  {
    findcmykcustomcolor
  }
  {
    /findrgbcustomcolor where not {
      4 1 roll _rgbtocmyk
      5 -1 roll
      findcmykcustomcolor
    }
    {
      pop
      findrgbcustomcolor
    } ifelse
  } ifelse
  /_if exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _if _gf 1 exch sub setcustomcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/XX
{
  exch
  /_gs exch ddef
  0 eq
  {
    findcmykcustomcolor
  }
  {
    /findrgbcustomcolor where not {
      4 1 roll _rgbtocmyk
      5 -1 roll
      findcmykcustomcolor
    }
    {
      pop
      findrgbcustomcolor
    } ifelse
  } ifelse
  /_is exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _is _gs 1 exch sub setcustomcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/x
{
  /_gf exch ddef
  findcmykcustomcolor
  /_if exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _if _gf 1 exch sub setcustomcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/X
{
  /_gs exch ddef
  findcmykcustomcolor
  /_is exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _is _gs 1 exch sub setcustomcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/A
{
  pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
  pop pop
} def
/discard
{
  save /discardSave exch store
  discardDict begin
  /endString exch store
  gt38?
  {
    2 add
  } if
  load
  stopped
  pop
 end
  discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
  /endStringLength endString length store
  /newBuff buffer 0 endStringLength getinterval store
  /newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
  /newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
  newBuff 0 newBuffButFirst putinterval
  newBuffLast 0
  currentfile read not
  {
  stop
  } if
  put
} def
0
{
  pre38Initialize
  mark
  currentfile newBuff readstring exch pop
  {
    {
      newBuff endString eq
      {
        cleartomark stop
      } if
      shiftBuffer
    } loop
  }
  {
  stop
  } ifelse
} def
1
{
  pre38Initialize
  /beginString exch store
  mark
  currentfile newBuff readstring exch pop
  {
    {
      newBuff beginString eq
      {
        /layerCount dup load 1 add store
      }
      {
        newBuff endString eq
        {
          /layerCount dup load 1 sub store
          layerCount 0 eq
          {
            cleartomark stop
          } if
        } if
      } ifelse
      shiftBuffer
    } loop
  } if
} def
2
{
  mark
  {
    currentfile buffer readline not
    {
    stop
    } if
    endString eq
    {
      cleartomark stop
    } if
  } loop
} def
3
{
  /beginString exch store
  /layerCnt 1 store
  mark
  {
    currentfile buffer readline not
    {
    stop
    } if
    dup beginString eq
    {
      pop /layerCnt dup load 1 add store
    }
    {
      endString eq
      {
        layerCnt 1 eq
        {
          cleartomark stop
        }
        {
          /layerCnt dup load 1 sub store
        } ifelse
      } if
    } ifelse
  } loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
  /n /N /s /S /f /F /b /B
}
{
  {
    _doClip 1 eq
    {
      /_doClip 0 ddef _eo {eoclip} {clip} ifelse
    } if
    newpath
  } def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
  4 npop
  6 1 roll
  pop
  4 1 roll
  pop pop pop
  0 eq
  {
    0 eq
    {
      (%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
    }
    {

      /clipForward? true def

      /Tx /pop load def
      /Tj /pop load def

      currentdict end clipRenderOff begin begin
    } ifelse
  }
  {
    0 eq
    {
      save /discardSave exch store
    } if
  } ifelse
} bind def
/LB
{
  discardSave dup null ne
  {
    restore
  }
  {
    pop
    clipForward?
    {
      currentdict
     end
     end
     begin

      /clipForward? false ddef
    } if
  } ifelse
} bind def
/Pb
{
  pop pop
  0 (%AI5_EndPalette) discard
} bind def
/Np
{
  0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
  72 exch div
  0 dtransform dup mul exch dup mul add sqrt
  dup 1 lt
  {
    pop 1
  } if
  setflat
} def
/Mb
{
  q
} def
/Md
{
} def
/MB
{
  Q
} def
/nc 4 dict def
nc begin
/setgray
{
  pop
} bind def
/setcmykcolor
{
  4 npop
} bind def
/setrgbcolor
{
  3 npop
} bind def
/setcustomcolor
{
  2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
  Adobe_cshow begin
  Adobe_cshow
  {
    dup xcheck
    {
      bind
    } if
    pop pop
  } forall
 end
  Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
  {
 end
  } if
} def
/cforall
{
  /_lobyte 0 ddef
  /_hibyte 0 ddef
  /_cproc exch ddef
  /_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
  {
    /_lobyte exch ddef
    _hibyte 0 eq
    _cscript 1 eq
    _lobyte 129 ge _lobyte 159 le and
    _lobyte 224 ge _lobyte 252 le and or and
    _cscript 2 eq
    _lobyte 161 ge _lobyte 254 le and and
    _cscript 3 eq
    _lobyte 161 ge _lobyte 254 le and and
      _cscript 25 eq
    _lobyte 161 ge _lobyte 254 le and and
      _cscript -1 eq
    or or or or and
    {
      /_hibyte _lobyte ddef
    }
    {
      _hibyte 256 mul _lobyte add
      _cproc
      /_hibyte 0 ddef
    } ifelse
  } forall
} def
/cstring
{
  dup 256 lt
  {
    (s) dup 0 4 3 roll put
  }
  {
    dup 256 idiv exch 256 mod
    (hl) dup dup 0 6 5 roll put 1 4 3 roll put
  } ifelse
} def
/clength
{
  0 exch
  { 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
  {
    dup cstring
    show
    _hvax _hvay rmoveto
    _hvwb eq { _hvcx _hvcy rmoveto } if
  } cforall
} def
/vawidthshow
{
  {
    dup 255 le
    _charorientation 1 eq
    and
    {
      -90 rotate
      0 _fontRotateAdjust rmoveto
      cstring
      _hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
      0 _fontRotateAdjust neg rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      exch _hvay sub exch _hvax sub
      2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      3 2 roll
      cstring
      dup stringwidth pop 2 div neg _fontAscent neg rmoveto
      show
      moveto
    } ifelse
  } cforall
} def
/hvawidthshow
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  _lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
  0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
  0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
  0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
  bind def
} bind def
/xs
{
  exch store
} bd
/nullProc
{
  {
  }
} def
/initialize
{
  pop pop
  Adobe_blend_AI5 begin
    Adobe_blend_AI5_vars begin
      /_contoneDevice where
      {
        pop
      }
      {
        /_contoneDevice false def
      } ifelse

      /_dpiThreshold where
      {
        pop
      }
      {
        /_dpiThreshold 600 def
      } ifelse

      /_screenFreqThreshold where
      {
        pop
      }
      {
        /_screenFreqThreshold 150 def
      } ifelse

      /tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
  /invertXfer
  {
    [
    {
      1 exch sub
        } /exec load systemdict/currenttransfer get exec /exec load
        ] cvx systemdict/settransfer get exec
      } bd
      /spotDict 3 dict dup begin
        /nSpots 2 def
        /spot1 7 dict def
        /spot2 7 dict def
     end
      def
      composite?
      {
        /_setgray_ /setgray load def
        /_fill_ /fill load def
        /_image_ /image load def
      }
      {
        /_setgray_ systemdict/setgray get def
        /_fill_ systemdict/fill get def
        /_image_ systemdict/image get def
      } ifelse
    } bd
    /terminate
    {
      currentdict Adobe_blend_AI5_vars eq
      {
     end
      currentdict Adobe_blend_AI5 eq
      {
     end
    } if
  } if
} bd
/_compositeSpotDevice where
{
 begin
    _compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
  /_compositeSpotDevice 0 def
} ifelse

/nullString () def
/d255 256 array def
0 1 255
{
  d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
  d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
  /f /F /s /S /b /B
}
{
  null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
  save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
  pop lv1Fix
}
{
  false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
  null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
  0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
  counttomark 2 add -1 roll
} bd
/setCustomColor
{
  dup /ccTint exch store
  1 exch sub 6 1 roll
  ccAry1 astore
  exch setcustomcolor
} bd
/currentCustomColor
{
  ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where
{
  pop
}
{
  /nsetcustomcolor
  {
    pop setcmykcolor
  } bd
} ifelse
/nsetcustomcolorend where
{
  pop
}
{
  /nsetcustomcolorend
  {
  } bd
} ifelse
/setBSpace
{
  newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
  dup 0 eq
  {
    pop

    spotColor?
      {
      dup 1 exch sub /ccTint exch def
      ccAry1 4 /Black put
      } if
    setgray
  }
  {
    1 eq
    {
      setcmykcolor
    }
    {
      composite? not colorType 2 lt and
      {
        forceCMYK
      }
      {
        setCustomColor
      } ifelse
    } ifelse
  } ifelse
} bd
/makeByte
{
  /tmp 0 store
  255 mul cvi
  8 string 8
  {
    dup tmp 3 index put /tmp tmp 1 add store
  } repeat
  exch pop
} bd
/setImgSpace
{
  cDataLen 1 8
  2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
  setImgSpace cData /_image_ load
  {
    exec
  } stopped
  {
    $error /errorname get /undefinedresult ne
    {
      stop
    }
    {
      pop pop pop pop pop
    } ifelse
  } if
} bd
level2?
{
  /bFill
  {
    _fill
  } def
  /bCImg
  {
    /cDataLen bDataLen store
    setImgSpace
    setSSave
    expandSpot
    cyData mgData yeData cData
    expandCMYK
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
} if
/expandOne
{
      dup type /stringtype ne
      {
        cDataLen string
        exch
        dup 0 ne
        {
          255 mul cvi
          0 1 cDataLen 1 sub
          {
            3 copy
            exch put pop
          } for
        } if
        pop
      } if
} bd
/expandSpot
{
  spotColor?
  {
    spotDict begin
      spot1 begin
        tintImage type /nulltype ne
        {
          tintImage expandOne /tintImage exch def
        } if
      end
      spot2 begin
        tintImage type /nulltype ne
        {
          tintImage expandOne /tintImage exch def
        } if
      end
   end
  } if
} bd
/expandCMYK
{
  4
  {
    expandOne 4 1 roll
  } repeat
} bd
/colorimage where dup
{
  exch pop

  /ncolorimage where
  {
    pop
  }
  {
    /ncolorimage {pop colorimage} bd
  } ifelse
} if
not
{
  /ncolorimage where
  {
    pop
  }
  {
    /colorimage? false store
    /ncolorimage
    {
      pop pop pop

    setSSave
    /blackData xs
    /yeData xs
    /mgData xs
    /cyData xs
    /cnt1 0 store
    [
    byte dup 0
    cyData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
    }
    {
      .3 mul
    } ifelse
    mgData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
    }
    {
      .59 mul
    } ifelse
    yeData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
    }
    {
      .11 mul
    } ifelse
    blackData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx
    } if
    /add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
    /dup cvx 0 /lt cvx
    {
      pop 0
    } /if cvx
    /dup cvx 1 /gt cvx
    {
      pop 1
    } /if cvx
    255 /mul cvx /cvi cvx
    256 /mod cvx
    /dup cvx 0 /lt cvx
    {
      pop 0
    } /if cvx
    /put cvx
    /cnt1 dup cvx 1 /add cvx /store cvx
    ] cvx
    bind
      _image_
    sSave restore
  } bd
  } ifelse
} if
level2? not
{
  /bCImg
  {
    /cDataLen bDataLen store
    setImgSpace
    setSSave
    expandSpot
    cyData mgData yeData cData
    colorimage?
    {
      expandCMYK
    } if
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
  /bwFill
  {
    setSSave
    /cDataLen 8 store
    /cData currentgray makeByte store
    bwImage
    sSave restore
  } bd
  /c1ImgFill
  {
    setSSave
    /cDataLen 8 store
    setImgSpace
    spotColor?
    {
      spotDict begin
        spot1 begin
          currentCustomColor makeByte /tintImage exch def
          /name exch def
          /spot_K exch def
          /spot_Y exch def
          /spot_M exch def
          /spot_C exch def
       end
        spot2 initSpotData
     end
    } if
    currentcmykcolor
    4
    {
      makeByte 4 1 roll
    } repeat
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
  /bFill
  noImg
  {
    {
      _fill
    }
  }
  {
    {
      color?
      {
        c1ImgFill
      }
      {
        bwFill
      } ifelse
    }
  } ifelse
  bd
} if
composite?
{
  /bCFun
  {
    color?
    {
      cyData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      mgData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      yeData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      cData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      spotColor?
      {
        spotDict begin
          /spotDict cvx /begin cvx
          spot1 begin
            tintImage dup type /stringtype eq
            {
              /ndx cvx /get cvx d255- /exch cvx /get cvx
            }
            {
              dup type /nulltype ne
              {
                name type /nametype ne {1 exch sub} if
              } if
            } ifelse
         end
          /spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
          spot2 begin
            tintImage dup type /stringtype eq
            {
              /ndx cvx /get cvx d255- /exch cvx /get cvx
            }
            {
              dup type /nulltype ne
              {
                name type /nametype ne {1 exch sub} if
              } if
            } ifelse
         end
          /spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
          /end cvx
       end
        /spotDict cvx
        /nsetcustomcolor cvx
      }
      {
        /setcmykcolor cvx
      } ifelse
    }
    {
      cData /ndx cvx /get cvx
      d255 /exch cvx /get cvx
      /setgray cvx
    } ifelse
  } bd
  /Bc
  {
    newpath
    gsave
    setBSpace
    nColors 1 eq
    {
      pop pop
      setCStop
    } if
    bFill
    grestore
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      linImg
    }
    {
      bFill
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /rdBm
  {
    /nColors dup load 1 sub store
    _fill
    gsave
    bUMatrix astore concat
    bHi?
    {
      xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
      rampPoint 1 lt
      {
        1 rampPoint sub dup xHi mul exch yHi mul translate
      } if
    } if
    nColors
    {
      0 0 rampPoint 0 360 arc
      _fill
      blend? bHi? or
      {
        rdBlend
      } if
      nColors 1 gt
      {
        getRData
      } if
      /nColors dup load 1 sub store
    } repeat
    /nColors 1 store
    grestore
  } bd
  /cGetRData
  {
    setCStop
    /blend?
    cData type /stringtype eq
    dup not color? and
    {
      pop
      cyData type /stringtype eq
      mgData type /stringtype eq
      yeData type /stringtype eq
      or or
    } if
    store
  } def
  /cGetRData
} if
/eCStop
{
  mark
  1 index 3 mul 3 add dup 8 gt
  {
    pop 8
  } if
  1 roll
  cleartomark
} bd
composite? not
{
  /knockOut
  level2?
  {
    {
      0 0 0 0 setcmykcolor _fill
    }
  }
  {
    /bFill noImg
    {
      {
        _fill
      }
    }
    {
      {
        _of true eq
        {
          currentgray 1 ne
          {
            bwFill
          } if
        }
        {
          bwFill
        } ifelse
      }
    } ifelse
    def
    /whiteByte 1 makeByte def
    noImg
    {
      {
        0 0 0 0 setcmykcolor _fill
      }
    }
    {
      {
        cBType 0 eq
        {
          setSSave
          /cData whiteByte store
          /cDataLen 8 store
          bwImage
          sSave restore
        }
        {
          _fill
        } ifelse
      }
    } ifelse
  } ifelse
  bd
  /bCFun
  {
    cData dup type /stringtype ne
    {
      color?
      {
        1 exch sub
      } if
    }
    {
      /ndx cvx /get cvx
      color? customColor? not and
      {
        d255-
      }
      {
        d255
      } ifelse
      /exch cvx /get cvx
    } ifelse
    /_setgray_ cvx
  } bd
  /eCCBlend
  {
    dup 3 eq
    {
      pop
      mark 7 1 roll
      6 copy ccThrough? dup /blend? xs
      {
        /startC? true store
        setCustomColor
        customColor?
        {
          /cData tint1Data store
          setCDataLen
        } if
        /endC?
        3 index 3 eq
        {
          4 index 1 ne
        }
        {
          false
        } ifelse
        store
      } if
      cleartomark
      stop
    } if
    1 eq
    {
      pop pop pop
    } if
    pop
    /startC? false store
    6
    {
      8 index
    } repeat
    ccThrough? dup /blend? xs
    {
      /endC? true store
      blend? not
      {
        stop
      } if
      customColor?
      {
        /cData tint1Data store
        setCDataLen
      } if
    } if
  } bd
  /handleOP
  {
    _of not
    {
      knockOut
    } if
  } bd
  /handleROP
  {
    _of not
    {
      0 0 0 0 setcmykcolor _fill
    }
    {
      newpath
    } ifelse
  } bd
  /rdBm
  {
    /nColors dup load 1 sub store
    blend?
    {
      _fill
    }
    {
      handleROP
    } ifelse
    gsave
    bUMatrix astore concat
    bHi?
    {
      xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
      rampPoint 1 lt
      {
        1 rampPoint sub dup xHi mul exch yHi mul translate
      } if
    } if
    nColors
    {
      0 0 rampPoint 0 360 arc
      blend?
      {
        cData type /stringtype ne bHi? not and
        {
          cData color?
          {
            1 exch sub
          } if
          _setgray_
          _fill_
        }
        {
          cData type /stringtype ne
          {
            /cDataLen 1 store
            /bDataLen 1 store
          } if
          rdBlend
        } ifelse
      }
      {

        handleROP

        pTState?
        {
          /bAxis rampPoint endPoint sub store
          xHi bAxis mul yHi bAxis mul translate
        } if
      } ifelse

      nColors 1 gt
      {
        getRData
      } if
      /nColors dup load 1 sub store
    } repeat
    /nColors 1 store
    grestore
  } bd
  /ccThrough?
  {
    gsave
    pop 0 setCustomColor
    currentcmykcolor
    grestore
    anyColor?
  } bd
  /forceCMYK
  {
    exch pop
    1 exch sub 5 1 roll
    4
    {
      4 index mul 4 1 roll
    } repeat
    0
    cCMYKData dup /cData ne
    {
      dup /yeData eq
      {
        pop 1 add
      }
      {
        /mgData eq
        {
          2
        }
        {
          3
        } ifelse
        add
      } ifelse
      0
    } if
    pop
    index
    0 eq
    {
      pop pop pop pop 0 0 0 0
    } if
    setcmykcolor
    pop
    /fCMYK? true store
  } bd
  /endCapSepBc
  {
    pop pop
    dup 0 eq
    {
      pop
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        colorType 1 eq
        {
          forceCMYK
        }
        {
          fCMYK?
          {
            forceCMYK
          }
          {
            setCustomColor
          } ifelse
        } ifelse
      } ifelse
    } ifelse
    currentcmykcolor anyColor?
    blend? and
    {
      bFill
    }
    {
      handleOP
    } ifelse

  } bd
} if
/cCMYKData 0 def
composite? dup not
{
  pop customColor?
} if
not
{
  /cCMYKData
  /cyData /mgData /yeData /cData
  black? not
  {
    yellow?
    {
      exch
    }
    {
      magenta?
      {
        3
      }
      {
        4
      } ifelse
      -1 roll
    } ifelse
  } if
  4 1 roll pop pop pop
  store
  /Bc
  {
    gsave
    setBSpace
    nColors 1 gt
    {

      blend? currentcmykcolor anyColor? and
      {
        bFill
      }
      {
        handleOP
      } ifelse
    }
    {
      endCapSepBc
    } ifelse
    grestore
    newpath
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      cCMYKData load dup type /stringtype eq
      {
        dup length /cDataLen xs
        /cData xs
        gsave
        colorType 0 ne noImg not and
        {
          invertXfer
        } if
        linImg
        grestore
      }
      {
        pop bFill
      } ifelse
    }
    {
      handleOP
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /cmykGetRData
  {
    /fCMYK? false store
    blend?
    {
      {
        cmykDataProcs colorType get exec
      } stopped
      pop
      blend?
      {
        /cData cCMYKData load store
        setCDataLen
      } if
    } if
  } def
  /cmykDataProcs
  [
  {
    pop
    black? dup /blend? xs
    {
      setgray
      0
    } if
    pop
  }
  {
    cCMYKData load dup type /stringtype ne
    {
      0 0 0
      cyan? not
      {
        4 magenta?
        {
          1
        }
        {
          yellow?
          {
            2
          }
          {
            3
          } ifelse
        } ifelse
        roll
      } if
      4 copy add add add 0 eq
      {
        /blend? false store
      } if

      setcmykcolor
      /startC? true store
      /endC? true store
      eCStop
      stop
    } if
    pop
    dup 0 eq
    {
      pop
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        forceCMYK
      } ifelse
    } ifelse
  } bind
  /eCCBlend load
  {
    cBType 1 eq
    {
      tint1Data tint2Data
      /tint1Data xs
      /tint2Data xs
    } if
    0 eq
    {
      black?
      {
        setgray
      }
      {
        0 0 0 4 -1 roll 1 exch sub setcmykcolor
      } ifelse
      black?
      {
        /blend? true store
      } if
      6
      {
        8 index
      } repeat
      ccThrough?
      {
        /blend? true store
      }
      {
        black?
        {
          /cData tint1Data store
          setCDataLen
        }
        {
          /blend? false store
        } ifelse
      } ifelse
    }
    {
      mark 7 1 roll
      6 copy ccThrough?
      {
        forceCMYK
        pop
        stop
      } if
      9 index 0 eq
      {
        black? dup /blend? xs
        {
          pop 1 setgray
          /cData tint2Data store
          setCDataLen
          0
        } if
        pop
      }
      {
        /blend?
        6
        {
          16 index
        } repeat
        ccThrough?
        store
        blend?
        {
          forceCMYK
        } if
      } ifelse
      cleartomark
    } ifelse
  } bind
  ] def
  /cmykGetRData
} if
composite? dup not
{
  pop isCMYKSep?
} if
not
{
  /endCapSepBc
  {
    /white? false store
    pop pop
    dup 0 eq
    {
      pop
      /white? 1 index 1 eq store
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        setCustomColor
      } ifelse
    } ifelse
%
    currentcmykcolor anyColor?
    endC? or
    blend? and
    {
      bFill
    }
    {
      handleOP
    } ifelse
  } bd
  /Bc
  {
    gsave
    setBSpace
    nColors 1 gt
    {
      blend? startC? and
      {
        bFill
      }
      {
        handleOP
      } ifelse
    }
    {
      endCapSepBc
    } ifelse
    grestore
    newpath
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      cData type /stringtype eq
      {
        linImg
      }
      {
        bFill
      } ifelse
    }
    {
      handleOP
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /discardCMY
  {
    counttomark 4 add -3 roll pop pop pop
  } bd
  /testTopCC
  {
    6 copy ccThrough?
  } bd
  /getCRamp
  {
    {
      ccDataProcs colorType 2 sub get exec
    } stopped pop
    blend? cDataLen 0 eq and
    {
      /cDataLen bDataLen store
    } if
  } bd
  /ccGetRData
  {
    /fCMYK? false store
    /startC? false store
    /endC? false store
    colorType 2 lt
    {
      /blend? false def
    } if
    blend?
    {
      getCRamp
    }
    {
      setCStop
    } ifelse
    blend?
    {
      /blend? cData 1 ne store
      blend?
      {
        cData dup type /stringtype ne
        {
          1 exch sub /cData xs 0
        } if
        pop
      } if
    } if
  } def
  /ccDataProcs
  [
  /eCCBlend load
  {
    cBType 1 eq
    {
      tint1Data tint2Data
      /tint1Data xs
      /tint2Data xs
    } if
    0 eq
    {
      /blend? false store
      pop
    }
    {
      mark 7 1 roll
      testTopCC
      {
        /blend? 1 index 1 ne store
        /startC? blend? store
        /endC? false store
        blend? not
        {
          cleartomark stop
        } if
        /cData tint1Data store
        setCDataLen
        setCustomColor
        pop
        stop
      } if
      cleartomark
    } ifelse
    2 index 0 eq
    {
      /blend? false store
    }
    {
      mark 6
      {
        9 index
      } repeat
      testTopCC dup /blend? xs
      {
        /blend? 1 index 1 ne store
        /endC? blend? store
        /startC? false store
        blend? not
        {
          cleartomark stop
        } if
        /cData tint2Data store
        setCDataLen
      } if
      cleartomark
    } ifelse
  } bind
  ] def
  /ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
  /cDataLen 0 cData dup type /stringtype eq
  {
    length exch
  } if
  pop store
} bd
/initSpotData
{
 begin
    /name null def
    /tintImage null def
    /tintValue null def
    /spot_C  null def
    /spot_M  null def
    /spot_Y  null def
    /spot_K  null def
 end
} bd
/getRData
{
  /colorType gMark store
  _compositeSpotDevice 0 ne
  {
    spotDict begin
      spot1 initSpotData
      spot2 initSpotData
   end
    /spotColor? colorType 2 eq colorType 3 eq or def
  }
  {
    /spotColor? false store
  } ifelse
  /blend? true store
  0 0 0 0 setcmykcolor
  100 div /rampPoint xs
% (between 13 and 87%)
  100 div /midPoint xs
  dup 0 eq
  {
    2
  }
  {
    dup 1 eq
    {
      5
    }
    {
      _compositeSpotDevice 0 ne
      {
        spotDict begin
          spot1 begin
            /name 3 index def
            /spot_K 4 index def
            /spot_Y 5 index def
            /spot_M 6 index def
            /spot_C 7 index def
         end
       end
      } if
      7
    } ifelse
  } ifelse
  /tmp exch def
  tmp index 100 div /endPoint xs
  _compositeSpotDevice 0 ne
  {
    tmp 2 add index 3 eq
    {
      /tmp tmp 4 add def
      tmp index dup
      spotDict begin
        spot1/name get ne
        {
          spot2 begin
            /name exch def
            /spot_K tmp 2 add index def
            /spot_Y tmp 3 add index def
            /spot_M tmp 4 add index def
            /spot_C tmp 5 add index def
         end
        }
        {
          pop
        } ifelse
     end
    } if
  } if
  /color? colorType 0 gt store

  colorType 3 eq
  {
    /tint2Data gMark store
  } if

  colorType 2 ge
  {
    /tint1Data gMark store
  } if
  _compositeSpotDevice 0 ne
  {
    spotDict begin

      colorType 2 ge
      {
        colorType 3 eq
        {
          spot2 begin
            /tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
            name null eq {/name /Black def} if
         end
        } if
        spot1 begin
          /tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
          colorType 2 eq
          {
            name null eq
            {
              /name spot2/name get def
              spot2/name null put
            } if
          }
          {
            name null eq {/name /Black def} if
          } ifelse
       end
      } if
   end
  } if

  /cData gMark store
  setCDataLen
  colorType 0 gt
  {
    counttomark 4 add -3 roll
    /yeData xs
    /mgData xs
    /cyData xs
  } if
  blend?
  {
    /bDataLen
    cDataLen dup 0 eq color? and
    {
      [
      cyData mgData yeData
      ]
      {
        dup type /stringtype eq
        {
          length exch pop exit
        } if
        pop
      } forall
    } if
    store
    bDataLen 0 eq
    {
      /bDataLen 1 store
    } if
    getData
    blend?
    {
      composite? cDataLen 0 eq and
      {
        /cDataLen bDataLen store
      } if
    } if
  }
  {
    setCStop
  } ifelse
} bd
/Bg
{
  0 0 0 0 setcmykcolor
  6
  {
    pop
  } repeat
  /blendLength xs
  pop pop pop
  /cBName xs
  /bRender xs
  bRender 2 ne
  {
    composite? not
    {
      _of setoverprint
    } if
    _eo {eoclip} {clip} ifelse
    _bn cBName 2 copy known
    {
      get
      mark exch aload pop
      /cBType xs
      /nColors xs
      mark exch aload pop
      0 0
    } if
    pop pop
    getRData
    cBType 0 eq
    {
      /linealBm
    }
    {
      bHi?
      {
        /pTState? nColors 2 gt store
      } if
      /doBlend /rdBlend load store
      /rdBm
    } ifelse
  }
  {
    inLine? not
    {
      mark mark
    } if
    /Bc dup
    {
      cleartomark mark
    } bd
    /nullProc
  } ifelse
  load /Bm xs
} bd
/linImg
noImg
{
  {
    newpath doRctBlend
  }
}
{
  {
    /doBlend
    color? composite? and
    {
      /bCImg
    }
    {
      /bwImage
    } ifelse
    load
    store

    0 0 moveto
    tRectOK? composite? and
    {
      {
        mark
        0 1 dtransform atan cvi 90 mod 0 eq
        1 0 dtransform atan cvi 90 mod 0 eq
      } stopped
      {
        cleartomark
      }
      {
        and exch pop
        {
          newpath
          doRctBlend
        }
        {
          doBlend
        } ifelse
      } ifelse
    }
    {
      doBlend
    } ifelse
  }
} ifelse
bd
/doRctBlend
{
  gsave
  /sInc 1 store
  /nSamples bDataLen store
  /bInc 1 bDataLen div store
  /ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
  /pChange ubAxis 0 eq
  {
    0
  }
  {
    bDataLen ubAxis div
  } ifelse
  store
  pChange .5 gt noImg not and dup /optimize? xs
  {
    /nSamples ubAxis 2 div round cvi dup 1 le
    {
      pop 2
    } if
    store
    /bInc 1 nSamples div store
    /sInc bDataLen 1 sub nSamples 1 sub div store
  } if
  0
  nSamples
  [
  /dup cvx
  optimize?
  {
    /round cvx /cvi cvx
  } if
  /ndx /exch cvx /store cvx
  bCFun
  /rectfill where dup
  {
    exch pop _compositeSpotDevice 1 ne and
  } if
  {
    0 0 bInc 1 /rectfill cvx
  }
  {
    0 0 /moveto cvx
    bInc 0 /lineto cvx
    bInc 1 /lineto cvx
    0 1 /lineto cvx
    /closepath cvx
    /_fill_ cvx
  } ifelse
  bInc 0 /translate cvx
  sInc /add cvx
  ] cvx
  bind
  repeat
  pop
  spotColor? {nsetcustomcolorend} if

  grestore
} bd
/rdPrep
{
  /nSamples bDataLen dup 0 eq
  {
    pop 1
  } if
  store
  /sInc -1 store
  /bAxis rampPoint endPoint sub store
  /bInc bAxis bDataLen div neg store
  /optimize? false store
  tRectOK?
  {
    /ubAxis
    bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
    0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
    2 copy lt
    {
      exch
    } if
    pop store
    /pChange ubAxis 0 eq
    {
      0
    }
    {
      bDataLen ubAxis div
    } ifelse
    store
    pChange .5 gt noImg not and dup /optimize? xs
    {
      /nSamples ubAxis 2 div round cvi dup 1 le
      {
        pop 2
      } if
      store
      /bInc bAxis nSamples div neg store
      /sInc bDataLen 1 sub nSamples 1 sub div neg store
    } if
  } if
  bHi?
  {
    /xBCInc xHi bAxis mul nSamples div store
    /yBCInc yHi bAxis mul nSamples div store
  } if
} bd
/rdBlend
{
  newpath
  gsave
  rdPrep
  rampPoint
  bDataLen 1 sub
  nSamples
  [
  /dup cvx
  optimize?
  {
    /round cvx /cvi cvx
  } if
  /ndx /exch cvx /store cvx
  bCFun
  0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
  /exch cvx bInc /add cvx /exch cvx
  sInc /add cvx
  bHi?
  {
    xBCInc yBCInc /translate cvx
  } if
  ] cvx
  bind
  repeat
  pop pop
  spotColor? {nsetcustomcolorend} if
  grestore
  pTState?
  {
    xHi bAxis mul yHi bAxis mul translate
  } if
} bd
/Bh
{
  pop pop
  /pTState? false store
  2 copy 0 ne exch 0 ne or dup /bHi? xs
  {
    /yHi xs
    /xHi xs
    0 0
  } if
  pop pop
} bd
/BD
{
  inLine? not
  {
    ] nColors cBType
    ] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
  3 -1 roll dup nullString eq dup
  {
    setSSave
  } if
  /inLine? exch def
  /cBName exch def
  /nColors exch def
  /cBType exch def
} bd
/Bb
{
  sSave null eq
  {
    Adobe_blend_AI5_vars begin
    setSSave
  } if
  composite?
  {
    /_fill /fill load store
  }
  {
    /__fill /fill load store
      /_fill
      {
        _of true eq
        {
          currentgray 1 ne
          {
            __fill
          } if
        }
        {
          __fill
        } ifelse
      } def
  } ifelse
  /fill
  {
  } def
  } bd
  /BB
  {
  /cBType xs
  cleartomark cleartomark
  cBType dup
  bRender
  sSave dup type /savetype eq
  {
    restore 0
  } if
  pop
  currentdict Adobe_blend_AI5_vars eq
  {
   end
  } if
  2 ne exch 0 gt and
  {
    2 eq
    {
      s
    }
    {
      S
    } ifelse
  }
  {
    pop newpath
  } ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
  userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
  dup null eq
  {
    pop
    _dp 0 ne
    {
      0 1 _dp 1 sub _dl mod
      {
        _da exch get 3 get
      } for
      _dp 1 sub _dl mod 1 add packedarray
      _da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
      definepattern pop
    } if
  }
  {
    _dp 0 ne _dp _dl mod 0 eq and
    {
      null dp
    } if
    7 packedarray _da exch _dp _dl mod exch put
    _dp _dl mod _da 0 get 4 get 2 packedarray
    /_dp _dp 1 add def
  } ifelse
} def
/E
{
  _ed begin
  dup 0 get type /arraytype ne
  {
    0
    {
      dup 1 add index type /arraytype eq
      {
        1 add
      }
      {
        exit
      } ifelse
    } loop
    array astore
  } if
  /_dd exch def
  /_ury exch def
  /_urx exch def
  /_lly exch def
  /_llx exch def
  /_n exch def
  /_y 0 def
  /_dl 4 def
  /_dp 0 def
  /_da _dl array def
  0 1 _dd length 1 sub
  {
    /_d exch _dd exch get def
    0 2 _d length 2 sub
    {
      /_x exch def
      /_c _d _x get _ ne def
      /_r _d _x 1 add get cvlit def
      _r _ ne
      {
        _urx _llx sub _ury _lly sub
        [
        1 0 0 1 0 0
        ]
        [
        /save cvx
        _llx neg _lly neg /translate cvx
        _c
        {
          nc /begin cvx
        } if
        _r dup type /stringtype eq
        {
          cvx
        }
        {
          {
            exec
          } /forall cvx
        } ifelse
        _c
        {
          /end cvx
        } if
        /restore cvx
        ] cvx
        /_fn 12 _n length add string def
        _y _fn cvs pop
        /_y _y 1 add def
        _fn 12 _n putinterval
        _fn _c false dp
        _d exch _x 1 add exch put
      } if
    } for
  } for
  null dp
  _n _dd /_pd
 end
  xput
} def
/fc
{
  _fm dup concatmatrix pop
} def
/p
{
  /_fm exch ddef
  9 -2 roll _pm translate fc
  7 -2 roll _pm scale fc
  5 -1 roll _pm rotate fc
  4 -2 roll exch 0 ne
  {
    dup _pm rotate fc
    1 -1 _pm scale fc
    neg _pm rotate fc
  }
  {
    pop
  } ifelse
  dup _pm rotate fc
  exch dup sin exch cos div 1 0 0 1 0 6 2 roll
  _pm astore fc
  neg _pm rotate fc
  _pd exch get /_fdd exch ddef
  /_pf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          patternfill
        }
        {
          pop
          fill
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    newpath
  } ddef
  /_psf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          9 copy 6 npop patternashow
        }
        {
          pop
          6 copy 3 npop hvashow
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    sw rmoveto
  } ddef
  /_pjsf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          12 copy 6 npop patternawidthshow
        }
        {
          pop 9 copy 3 npop hvawidthshow
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    swj rmoveto
  } ddef
  /_lp /none ddef
} def
/sc
{
  _sm dup concatmatrix pop
} def
/P
{
  /_sm exch ddef
  9 -2 roll _pm translate sc
  7 -2 roll _pm scale sc
  5 -1 roll _pm rotate sc
  4 -2 roll exch 0 ne
  {
    dup _pm rotate sc
    1 -1 _pm scale sc
    neg _pm rotate sc
  }
  {
    pop
  } ifelse
  dup _pm rotate sc
  exch dup sin exch cos div 1 0 0 1 0 6 2 roll
  _pm astore sc
  neg _pm rotate sc
  _pd exch get /_sdd exch ddef
  /_ps
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          patternstroke
        }
        {
          pop stroke
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    newpath
  } ddef
  /_pss
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          10 copy 6 npop patternashowstroke
        }
        {
          pop 7 copy 3 npop ss
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    pop sw rmoveto
  } ddef
  /_pjss
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          13 copy 6 npop patternawidthshowstroke
        }
        {
          pop 10 copy 3 npop jss
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    pop swj rmoveto
  } ddef
  /_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
  /definepattern where
  {
    pop
  }
  {
   begin
   begin
    Adobe_pattern_AI5 begin
    Adobe_pattern_AI5
    {
      dup xcheck
      {
        bind
      } if
      pop pop
    } forall
    mark
    cachestatus 7 1 roll pop pop pop pop exch pop exch
    {
      {
        10000 add
        dup 2 index gt
        {
          exit
        } if
        dup setcachelimit
      } loop
    } stopped
    cleartomark
   end

   end
   end

    Adobe_pattern_AI5 begin
  } ifelse
} def
/terminate
{
  currentdict Adobe_pattern_AI5 eq
  {
   end
  } if
} def
errordict
/nocurrentpoint
{
  pop
  stop
} put
errordict
/invalidaccess
{
  pop
  stop
} put
/patternencoding
256 array def
0 1 255
{
  patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
  17 dict begin
  /uniform exch def
  /cache exch def
  /key exch def
  /procarray exch def
  /mtx exch matrix invertmatrix def
  /height exch def
  /width exch def
  /ctm matrix currentmatrix def
  /ptm matrix def
  /str 32 string def
  /slice 9 dict def
  slice /s 1 put
  slice /q 256 procarray length div sqrt floor cvi put
  slice /b 0 put
  /FontBBox
  [
  0 0 0 0
  ] def
  /FontMatrix mtx matrix copy def
  /Encoding patternencoding def
  /FontType 3 def
  /BuildChar
  {
    exch
   begin
    /setstrokeadjust where {pop true setstrokeadjust} if
    slice begin
    dup q dup mul mod s idiv /i exch def
    dup q dup mul mod s mod /j exch def
    q dup mul idiv procarray exch get
    /xl j width s div mul def
    /xg j 1 add width s div mul def
    /yl i height s div mul def
    /yg i 1 add height s div mul def
    uniform
    {
      1 1
    }
    {
      width 0 dtransform
      dup mul exch dup mul add sqrt dup 1 add exch div
      0 height dtransform
      dup mul exch dup mul add sqrt dup 1 add exch div
    } ifelse
    width 0 cache
    {
      xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
      setcachedevice
    }
    {
      setcharwidth
    } ifelse
    gsave
    scale
    newpath
    xl yl moveto
    xg yl lineto
    xg yg lineto
    xl yg lineto
    closepath
    clip
    newpath
   end
   end
    exec
    grestore
  } def
  key currentdict definefont
 end
} def
/patterncachesize
{
  gsave
  newpath
  0 0 moveto
  width 0 lineto
  width height lineto
  0 height lineto
  closepath
  patternmatrix setmatrix
  pathbbox
  exch ceiling 4 -1 roll floor sub 3 1 roll
  ceiling exch floor sub
  mul 1 add
  grestore
} def
/patterncachelimit
{
  cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
  exch dup begin
  setfont
  ctm setmatrix
  concat
  slice exch /b exch slice /q get dup mul mul put
  FontMatrix concat
  uniform
  {
    width 0 dtransform round width div exch round width div exch
    0 height dtransform round height div exch height div exch
    0 0 transform round exch round exch
    ptm astore setmatrix
  }
  {
    ptm currentmatrix pop
  } ifelse
  {
    currentpoint
  } stopped not
  {
    2 npop
    pathbbox
    true
    4 index 3 index eq
    4 index 3 index eq
    and
    {
      pop false
      {
        {
          2 npop
        }
        {
          3 npop true
        }
        {
          7 npop true
        }
        {
          pop true
        } pathforall
      } stopped
      {
        5 npop true
      } if
    } if
    {
      height div ceiling height mul 4 1 roll
      width div ceiling width mul 4 1 roll
      height div floor height mul 4 1 roll
      width div floor width mul 4 1 roll
      2 index sub height div ceiling cvi exch
      3 index sub width div ceiling cvi exch
      4 2 roll moveto
      FontMatrix mtx invertmatrix
      dup dup 4 get exch 5 get rmoveto
      ptm ptm concatmatrix pop
      slice /s
      patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
      dup slice /q get gt
      {
        pop slice /q get
      } if
      put
      0 1 slice /s get dup mul 1 sub
      {
        slice /b get add
        gsave
        0 1 str length 1 sub
        {
          str exch 2 index put
        } for
        pop
        dup
        {
          gsave
          ptm setmatrix
          1 index str length idiv
          {
            str show
          } repeat
          1 index str length mod str exch 0 exch getinterval show
          grestore
          0 height rmoveto
        } repeat
        grestore
      } for
      2 npop
    }
    {
      4 npop
    } ifelse
  } if
 end
} def
/patternclip
{
  _eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
  strokepath
} def
/patternmatrix
matrix def
/patternfill
{
  dup type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get
  } if
  gsave
  patternclip
  Adobe_pattern_AI5 /patternpath get exec
  grestore
  newpath
} def
/patternstroke
{
  dup type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get
  } if
  gsave
  patternstrokepath
  true
  {
    {
      {
        newpath
        moveto
      }
      {
        lineto
      }
      {
        curveto
      }
      {
        closepath
        3 copy
        Adobe_pattern_AI5 /patternfill get exec
      } pathforall
      3 npop
    } stopped
    {
      5 npop
      patternclip
      Adobe_pattern_AI5 /patternfill get exec
    } if
  }
  {
    patternclip
    Adobe_pattern_AI5 /patternfill get exec
  } ifelse
  grestore
  newpath
} def
/vpatternawidthshow
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef

  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
      grestore
      _fontRotateAdjust sub
      moveto
      _hvwb eq { _hvcx _hvcy rmoveto } if
      _hvax _hvay rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      _hvax sub
      3 index _hvwb eq { _hvcx sub } if
      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto
      gsave
      2 index false charpath
      6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
      grestore
      newpath moveto pop pop
    } ifelse
  } cforall
  3 npop
} def
/hpatternawidthshow
{
  {
    dup cstring exch
    gsave
    3 index eq { 5 index 5 index rmoveto } if
    false charpath currentpoint
    9 index 9 index 9 index
    Adobe_pattern_AI5 /patternfill get exec
    grestore
    newpath moveto
    2 copy rmoveto
  } cforall
  8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
  6 index type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get 7 1 roll
  } if
  _lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
  7 1 roll
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      3 index setmatrix
      6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
      grestore
      _fontRotateAdjust sub
      moveto
      _hvwb eq { _hvcx _hvcy rmoveto } if
      _hvax _hvay rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      _hvax sub
      3 index _hvwb eq { _hvcx sub } if
      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto
      gsave
      2 index false charpath
      4 index setmatrix
      7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
      grestore
      newpath moveto pop pop
    } ifelse
  } cforall
  4 npop
} def
/hpatternawidthshowstroke
{
  7 1 roll
  {
    dup cstring exch
    gsave
    3 index eq { 5 index 5 index rmoveto } if
    false charpath currentpoint
    7 index setmatrix
    10 index 10 index 10 index
    Adobe_pattern_AI5 /patternstroke get exec
    grestore
    newpath moveto
    2 copy rmoveto
  } cforall
  9 npop
} def
/patternashowstroke
{
  0 0 0 7 3 roll
  patternawidthshowstroke
} def
/patternawidthshowstroke
{
  7 index type /dicttype eq
  {
    patternmatrix /patternmatrix get 8 1 roll
  } if
  _lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

  0.000 0.000 0.000 1.000 k
 [] 0 d
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  28.9200 135.0000 m
  67.0800 135.0000 L
  67.0800 153.0000 L
  28.9200 153.0000 L
  28.9200 135.0000 L
s
  48.0000 144.0000 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 36.8400 141.1200 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(\254R\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 48.3600 141.1200 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(v P\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.7500 w
1 j
u
  109.4400 134.6400 m
  154.8000 134.6400 L
  154.8000 152.6400 L
  109.4400 152.6400 L
  109.4400 134.6400 L
s
  132.1200 143.6400 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 113.7600 140.7600 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\254P\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 124.5600 140.7600 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(v\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 131.0400 140.7600 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Q\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 138.9600 140.7600 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(v R\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.7500 w
1 j
u
  187.9200 134.6400 m
  233.2800 134.6400 L
  233.2800 151.9200 L
  187.9200 151.9200 L
  187.9200 134.6400 L
s
  210.6000 143.2800 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 199.0800 140.4000 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\254\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 203.4000 140.4000 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Q\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 209.1600 140.4000 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( v\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 215.6400 140.4000 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( P\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.7500 w
1 j
u
  251.2800 134.0400 m
  275.7600 134.0400 L
  275.7600 152.7600 L
  251.2800 152.7600 L
  251.2800 134.0400 L
s
  263.5200 143.4000 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 259.2000 140.5200 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\254\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 263.5200 140.5200 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(P\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.7500 w
1 j
u
  314.5200 133.9200 m
  339.0000 133.9200 L
  339.0000 152.6400 L
  314.5200 152.6400 L
  314.5200 133.9200 L
s
  326.7600 143.2800 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 323.8800 140.4000 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Q\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
0.7500 w
1 j
u
  3.6000 49.3200 m
  48.9600 49.3200 L
  48.9600 67.3200 L
  3.6000 67.3200 L
  3.6000 49.3200 L
s
  26.2800 58.3200 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 8.2800 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\254P\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 19.0800 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(v\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 25.5600 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Q\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 33.4800 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(v P\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
1 J
1 j
  26.2800 67.4400 m
  48.0000 135.0000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  36.2400 98.5200 m
  35.8800 104.1600 L
  39.8400 102.8400 L
  36.2400 98.5200 L
B
U
u
0.7500 w
  37.6800 67.4400 m
  132.1200 134.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  82.5600 99.3600 m
  85.5600 104.1600 L
  88.0800 100.6800 L
  82.5600 99.3600 L
B
U
  0.000 0.000 0.000 1.000 k
0.7500 w
u
  60.0000 48.6000 m
  110.4000 48.6000 L
  110.4000 68.0400 L
  60.0000 68.0400 L
  60.0000 48.6000 L
s
  85.2000 58.3200 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 66.4800 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Q\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 74.4000 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(v R\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 88.0800 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(v\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 94.5600 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(\254R\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
1 j
  48.0000 135.0000 m
  85.2000 68.1600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  67.9200 99.1200 m
  63.4800 102.7200 L
  67.3200 104.7600 L
  67.9200 99.1200 L
B
U
u
0.7500 w
  85.3200 68.1600 m
  132.1200 134.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  107.0400 99.0000 m
  108.2400 104.5200 L
  111.8400 102.1200 L
  107.0400 99.0000 L
B
U
  0.000 0.000 0.000 1.000 k
0.7500 w
u
  122.7600 48.6000 m
  173.1600 48.6000 L
  173.1600 68.0400 L
  122.7600 68.0400 L
  122.7600 48.6000 L
s
  147.9600 58.3200 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 130.3200 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\254P v R v P\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
1 j
  132.1200 134.6400 m
  147.9600 68.1600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  140.6400 98.5200 m
  137.4000 103.2000 L
  141.4800 104.1600 L
  140.6400 98.5200 L
B
U
u
0.7500 w
  148.0800 68.1600 m
  210.6000 134.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  177.3600 99.2400 m
  179.4000 104.5200 L
  182.5200 101.6400 L
  177.3600 99.2400 L
B
U
  0.000 0.000 0.000 1.000 k
0.7500 w
u
  186.1200 48.6000 m
  236.5200 48.6000 L
  236.5200 68.0400 L
  186.1200 68.0400 L
  186.1200 48.6000 L
s
  211.3200 58.3200 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 192.2400 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(Q\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 198.0000 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( v R v \254\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 224.6400 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Q\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
1 j
  132.1200 134.6400 m
  211.2000 68.1600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  173.8800 99.4800 m
  168.4800 101.1600 L
  171.2400 104.5200 L
  173.8800 99.4800 L
B
U
u
0.7500 w
  210.6000 134.6400 m
  211.3200 68.1600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  210.9600 98.5200 m
  208.8000 103.8000 L
  213.0000 103.8000 L
  210.9600 98.5200 L
B
U
  0.000 0.000 0.000 1.000 k
0.7500 w
u
  249.4800 48.9600 m
  273.9600 48.9600 L
  273.9600 67.6800 L
  249.4800 67.6800 L
  249.4800 48.9600 L
s
  261.7200 58.3200 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 257.0400 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\254R\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
1 j
  261.7200 67.8000 m
  263.5200 134.0400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  262.5600 98.0400 m
  260.6400 103.3200 L
  264.8400 103.2000 L
  262.5600 98.0400 L
B
U
u
0.7500 w
  48.0000 135.0000 m
  261.6000 67.6800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  157.5600 100.4400 m
  151.9200 100.0800 L
  153.1200 104.0400 L
  157.5600 100.4400 L
B
U
  0.000 0.000 0.000 1.000 k
0.7500 w
u
  286.2000 48.9600 m
  310.6800 48.9600 L
  310.6800 67.6800 L
  286.2000 67.6800 L
  286.2000 48.9600 L
s
  298.4400 58.3200 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 293.4000 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(\254\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 297.7200 55.4400 0 Tp
TP
93.548387 Tz
/_Helvetica 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(Q\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
1 j
  263.5200 134.0400 m
  298.4400 67.8000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  282.3600 98.2800 m
  278.0400 101.8800 L
  281.8800 103.9200 L
  282.3600 98.2800 L
B
U
u
0.7500 w
  210.6000 134.6400 m
  298.3200 67.8000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  256.8000 99.4800 m
  251.2800 100.9200 L
  253.9200 104.4000 L
  256.8000 99.4800 L
B
U
  0.000 0.000 0.000 1.000 k
0.7500 w
u
  315.0000 3.6000 m
  339.4800 3.6000 L
  339.4800 22.3200 L
  315.0000 22.3200 L
  315.0000 3.6000 L
s
  327.2400 12.9600 m
B
U
u
  326.7600 133.9200 m
  326.7600 22.2000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  326.7600 75.2400 m
  324.6000 80.5200 L
  328.9200 80.5200 L
  326.7600 75.2400 L
B
U
u
0.7500 w
  298.4400 48.9600 m
  327.1200 22.4400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  314.8800 33.7200 m
  309.6000 35.7600 L
  312.4800 38.8800 L
  314.8800 33.7200 L
B
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 276 x Fs(Note)60 b(that)f(man)m(y)g(resolutions)f(w)n(ere)
h(pointless)m(.)73 b(E.g.)i(clause)5121 5602 y Fn(:)p
Fr(P)g Fn(_)45 b Fr(Q)i Fn(_)e Fr(P)88 b Fs(is)60 b(equiv)-5
b(alent)58 b(to)h Fo(T)-17 b(rue)47 b Fn(_)e Fr(Q)p Fs(,)60
b(which)f(is)h(equiv)-5 b(alent)58 b(to)5121 5846 y Fo(T)-17
b(rue)q Fs(.)74 b(This)60 b(is)f(not)g(v)-5 b(er)6 b(y)59
b(helpful,)h(so)f(an)m(y)f(clause)g(with)i(tw)n(o)5121
6089 y(complementar)6 b(y)59 b(liter)n(als)h(can)e(be)h(discarded)p
0 TeXcolorgray 0 TeXcolorgray 10124 6387 a Ft(T)-8 b(echniques)21
b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f(24)p
0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 25 25
TeXDict begin 25 24 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.25) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 25/View [ /XYZ null null null ] /Title (Resolution Always Terminates)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 5628 2010 a Fx(Resolution)87 b(Always)h(T)-33
b(erminates)p 0 TeXcolorgray 0 TeXcolorgray 5121 2875
a Fo(Resolution)62 b(Closure)e Fs(of)g(a)f(set)g(of)g(clauses)g
Fr(S)12 b Fs(,)60 b(wr)s(itten)g Fq(R)-5 b(C)30 b Fc(\()p
Fr(S)12 b Fc(\))p Fs(,)60 b(is)5121 3125 y(the)g(set)f(of)g(all)h
(clauses)e(der)s(iv)-5 b(ab)l(le)59 b(b)l(y)f(repeated)g(application)h
(of)5121 3369 y(the)h(resolution)f(r)s(ule)g(to)h(clauses)e(in)h
Fr(S)12 b Fs(.)5121 3819 y Fq(R)-5 b(C)31 b Fc(\()p Fr(S)12
b Fc(\))59 b Fs(is)g(\002nite)m(,)h(because)d(w)n(e)i(can)g(only)g
(gener)n(ate)f(a)h(\002nite)g(set)g(of)5121 4070 y(distinct)h(clauses)f
(from)g(the)g(propositions)f(in)i Fr(S)12 b Fs(.)74 b(Hence)m(,)5121
4314 y(resolution)60 b(alw)m(a)-6 b(ys)58 b(ter)5 b(minates)p
0 TeXcolorgray 0 TeXcolorgray 10124 6387 a Ft(T)-8 b(echniques)21
b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f(25)p
0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Page: 26 26
TeXDict begin 26 25 bop 0 TeXcolorgray -600 -600 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 -600
-600 a -1211 -1893 a
SDict begin H.S end
 -1211 -1893 a -1211 -1893 a
SDict begin H.R end
 -1211
-1893 a -1211 -1893 a
SDict begin [/View [/XYZ H.V]/Dest (page.26) cvn /DEST pdfmark end
 -1211 -1893 a -600 -600 a
SDict begin [ {ThisPage}<</Trans << /S /R >> >> /PUT pdfmark end
 -600
-600 a 4544 6651 a
tx@Dict begin 90 Rot  end
 4544 6651 a 5370 5850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
-17.07181 -28.45274 -17.07181 -28.45274 0.0    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 330.05199
0.0 330.05199 -17.07181 312.98018 -17.07181    /Lineto /lineto load
def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.38092
207.70511 -28.45274 207.70511 -28.45274 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5 SLW 0.5  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 312.98018
207.70511 330.05199 207.70511 330.05199 190.63329    /Lineto /lineto
load def 0  setlinejoin false Line  gsave 0.5 SLW 0.5  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 5370 4079 a
SDict begin [ /Page 26/View [ /XYZ null null null ] /Title (Summary)
/OUT pdfmark end
 5370 4079 a 0 0 1
TeXcolorrgb 7189 2010 a Fx(Summary)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 5190 2663 a @beginspecial
276 @llx 376 @lly 336 @urx 416 @ury 113 @rwi @setspecial
%%BeginDocument: red-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/red-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 735 string def


% load up the colormap
currentfile cmap readhexstring
140a09 748284 8c050b 3c4244 540408 bcc4c4 8c4a44 c40507 542220 242422 
740404 dce2e4 9c2a24 ac0506 340204 bc8e8c ecf3f0 541517 5c6264 9ca3a1 
e40306 741311 341312 9c0508 f4c2c4 640304 f4f4ec ac1314 6c4244 343533 
d40307 4c534f ac0a04 f4fdfb 740b0b fce4e2 ccd2cc 240a0c 949393 641412 
6c7370 9c0b08 d44a54 44020c acb4b4 441211 840b0b 540c0a 4c261c bc0506 
c4aaa4 741c24 640d0b dcc2c4 9c6264 242a24 d40a04 f4eae4 c40e04 f4f5f4 
4c5a54 241011 8c0a0a 544d4c bccacc a4aba8 443e3c 7c0b0b 5c0d0b 6c0c0b 
8c8e84 b40606 746a6c f40204 341a16 a40508 e4d6d4 fcfcf3 641c1c cc0406 
340b0b 541a1c e40a04 343a3c dc0208 949c98 747e7c 444a4c 342321 e4eae7 
ec0404 841516 bc0b05 6c1311 a40a06 440e0f c46664 f4eef4 2c1111 3c0c0b 
140e0c 848584 842e34 e4fef4 3c1313 2c1e1e d4dedc 441a14 fcf6f7 940a09 
f4d6d4 5c1416 aca6ac 9c1418 5c5254 740d14 b4bebc 841b1e 5c5d5b cccdcb 
5c0c14 ecbab4 6c0d14 fcfefc a49e9c cc6a6c b44644 dca2a4 fc7e84 947674 
dcbabc 64363c ac3634 b47878 bcbdbc a47e7c 7c4a4c fcaaac cc5a64 ac1a1c 
6c6c6c dc7674 843e3c 84625c fcdedf fcb6b4 8c1e1c dccecc 9c4a54 ccc2bc 
840509 342c2c bc1e24 442e2c 9c1a24 a43e44 ac6264 fccac4 848a8c 644a44 
8c9690 94060c 7c141c b40c05 d4d4d4 dc0a0c fcece0 7c6868 9c9c9e 4c0d0b 
843634 fcbeb4 1c0808 7c8381 444443 5c0207 2c2624 7c060c e4e4e3 a4a4a4 
fcc6cc fcf5ec 2c1717 3c3534 545453 2c0907 747574 b4b4b2 4c1212 7c1a1f 
2c2b2c 5c4a54 c4cbce acabac 3c3b3b 7c7d7b 4c4c4a ececec 1c110e ecfef9 
4c1e1c fcd5cf a41214 bc424c c4bec4 c4c5c4 54262c ac0214 646464 34161c 
9c0614 6c0204 b41614 fce5ec ccd6dc 64161c 840a14 540e14 640c14 d40c14 
c40a14 7c0b14 ecaeac b40414 a40614 cc0614 340e14 5c1c1c 34222c ec0614 
6c121c 3c0e14 dcdddc 940e14 fcecec 7c6a74 4c0e14 4c0204 545a57 3c1a1c 
fceef5 ac7e84 ac0a14 4c3e3c 8c8a8c 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

0f7b824d7b6c816c4d824d6c7b817b218421c721c721822167c782c7214d844d6c4d6c7b
117b
107b816c4d864df06c4d6c3b2181217b017b814d218821c7217b4d6cf06c4d814d7b027b
814d7b0b7b
0f7b814d7b897bd5f06c4d6c7b4d6c4d814d6c016c85ea4d6c4d6c7b817b4d024d037b81
4d7b0a7b
0f7b81217b017b834d6cd56c016c82f06cf081f0ea01ea84a6d5b54d7b027b014d107b
0f7b8221c77b827bf06c906cd590de858e33e6a2759b7d8990ea6cb581b57b127b
0f7b01218b7bb54d6c18f14e6f34a25be982e971e987e92e92609da6b54d844d217b214d
814d7b0b7b
107b8d216c4d6cf1112f3445435b6d294b834bca291b861b17718d23b54d814d2182214d
6c816c7b0a7b
0f7b9d3b7b6c3588a92f5d15432e6d4b0d475ca32047dc07cfd47ec9a64d217b4d824d6c
7b0a7b
0c7b914d3b7bb56c82ce2b4e4415432e6d294b473181315c835c4f1e548654071b0cabb5
4d824d614d014d0a7b
0a7b814d7b817b6c016c8d8283116faf5b22433e6d4b0d470701078e4f1e145a14544fd4
8491b56c7b4d7b0b7b
0e7b924d6c880ed9277ad3432e6d294b0d31074f1e548354145a14851454db172a908490
4d10217b0a7b
087b014d017b8b3b7b4d875fed6fda73d32e3e833e295e478447074f54140214025a88e5
1edf80d56c10217b0a7b
0b7b816c7b897b935011edd77a195b2e852e6d295e203182314f140314035a871407e0b4
d57bc77b0a7b
077b816c7b817b4d894d7b4deb5051ec047a2282222e3e883e295e0d475c1e5414011401
528a5a495a54e1d28af07b217b0a7b
077b814d7b017b8b4d7be8b0305fe3ed34bdd32e892e6d295e0d31074f5414011481525a
025a861407985bf0d57b0b7b
097b974d7b4db5cc3db95fa9275d19a22e963e6d4b0d4731071e5481541481145a015a87
54a507cf9a89ea7b0b7b
087b024d8b6c4deb62685fbc443445222e822e6d298529204731071e821e541482145a54
8954384f1ee1f28ab54d7b0a7b
087b834d7b4d6c946cbf62632dbc2f44450ab12e026d295e0d5c314f1e821e54148b1454
383a071e4fdfcb6c4d7b0a7b
097b014d016c96e4b9685fecd9dad37343963e6d294b0d473107e14f1e5481544f894f5c
314f07cf0cb54d7b0a7b
097b034d9225d11668a9d944da0a43b12e3ea1294b47a3318431074f1e4f894f5ca35c07
31e05b6c7b0b7b
097b944d7b4d6c25b6e2685f2f78197a22b12e026d174b0d830da34731813107820731a3
01a38647cfd2bd6c4d7b0a7b
0b7b016c94e43d16632dec2f784522b1432e3ea1174b0d5e0d478147318231472087205e
0d4b02666c7b0b7b
0b7b8c6c4d3f2562162dec2f78197a228b222e023ea1174b295e4b0d4782470d5e875e17
4b17d894b57b0b7b
087b814d7b817b4d874d483d6216685f2f852fda7a452243834302a16d816d2985295e4b
cf0d5e885eca1729e9dd9c6c7b0b7b
097b826c7b6c8d6ccc003dd1e2e711d904277a452281222e862e026d3e6d294b8c4b1729
6d028b96b1337f6c4d7b0a7b
077b944d7b6c4d6c4da469c6b6e2505fbc2f7844da457a4381432e012e823ea1178c17a1
6d3ea16d2e5b27ead54d7b0a7b
047b864d6c4d3b6c103b843b4dc58cc687c66216635fd9ec788178348134738173438143
2e832e3ea13e8b3ed82e3e0a5baf366cf04d7b0a7b
017b814d6c826c3bc501c501b281c5b201b28c8669643dd150e7bceca911783482344522
01228143968196d881d84386432e0a456f9d6c826c4d7b0a7b
964d3b61c559b20be8a477cd77cc8677cd7609006216505f875feca92f1134da4586455d
2243962273017388dd152f0f4d7b6c4d7b0a7b
886c10b2e8a477cc86bb83bb70a8b38bb313a846ae00acd168e7635f855fec2f78443402
340122877a452734450406b583b57b4d7b0b7b
8cc5b29305bb70a826659ec3bac381c3288928adee69c6d11650635f015f93a92f784434
4434450a34446f4434aa794d21c77b0c7b
9ae877bbb32665ba8cd076eeb8765703d01feec2693d25b9efe2635f835fa9d92f022f81
af448144118911bc4edeb54d21c7217b0b7b
8ca486a89ebad072c4ae42c2531d031d85c2b797693d628262d168016881635f815fbc01
bc8aa911bc63081cc9ea6c4d7b0e7b
8a77bba8bad0b8aec2531dbe86beb0be37be37be84be1de4b03d853dac25621668016882
2d08638263c868856881eaf06c4d014d0e7b
8977bb26bad0c4aeb71dbe81be0902098137098209be1d841db79758b601b6831662b916
8216b96b866b168f6e4db54d014d827b4d7b0d7b
8fa4867c6548d0eec4ae0353b7531dc21d811d53015301ae913fb8723ff39958694ab69f
a732a64db5f04d824d7b4d814d7b0e7b
88e87786b32665ba8cd082d072b801b891c41f3c1f3c1fee1228c346267cbb954c39b581
b54d824db54d844d7b6c7b4d814d7b0f7b
87c5b2d6cdbbb3a8f483f465c3ba02ba01288e5601ad019ea055b3bbcd4cb210b54d014d
027b826c4d7b017b81217b817b2181217b0b7b
863bc5b2e8a477868286bbc181c1b383b37ca81301130141012c877486c0246a59101a85
1a4d7b213b7b017b81217b057b81217b0b7b
864d3b61c559b2e882e8a4778677cdc0cdc0cd408740054024d66a0b598559c5101a217b
867b217b217b217b067b81217b0c7b

%
% Compression made this file 26.46% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 298 w Fs(Propositional)59
b(Logic)g(Reasoning)f(Using)h(Resolution)p 0 TeXcolorgray
5524 2951 a @beginspecial 276 @llx 376 @lly 336 @urx
416 @ury 85 @rwi @setspecial
%%BeginDocument: green-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/green-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 723 string def


% load up the colormap
currentfile cmap readhexstring
041808 049008 8c948c 045204 4c544c 04c804 84e284 449644 c4cbc4 0c380e 
04ac07 cce6cc 345e2c e4e7e4 046604 2c3a2c 347234 e4fee2 048208 64cc60 
34922c 24b224 04e404 044604 647264 242623 049f07 8cae8c 04bc06 24c61c 
f4f8f3 1c541c 04d804 1c621c 1c7220 0c280d 14910f 045e04 047c04 ccdcd0 
14ac18 1c481c 747473 04d105 0c6c0b 24852a 1c381c f4f1f3 acafac f4fef5 
0c310c acc6ac 049708 a4a4a3 3c4a44 148314 144812 9cea94 04b405 149e14 
1cbc1c 044004 e4fef4 dcdddd 748274 5c5959 4cba54 145b11 145413 147412 
c4fec4 e4f1e7 146411 088a0a 243028 09c207 fcf8f3 147c13 14c80e acceac 
3c3939 04f405 044e07 07a608 14d00f 0c1f10 0c900b d4d3d4 ecfee3 1c291d 
0c6e14 bcbfbd d4f6d4 909a94 4c5a50 0cac08 24ba24 547e54 0cbc0a 0c5c16 
0c7c0b fcf1fb acb8ac 1c311c aca7a9 e2e2e2 a4e2a4 0cc80a 6c9a6c 143715 
0c650a 0c840b 07de06 14970c 0c980a 0cb40a 848583 ecf0f0 c3c6c3 0c540d 
0c740c cccccc 74ce6c 30a02c 04ec05 54aa5c 6cb66c 9cfa9c 2c862c 5c926c 
6ca674 b4deac 9cda9c 34aa2c 6c7e6c acfeac 448244 34d22c 7d7d7c 6c6d6c 
445644 4c4d4c 1c7a19 1c3e1c 3c3f3c 2c422c 7c9a84 54c254 dceadc 144014 
343231 bccebc bcbabc 447244 6c6664 9c9d9c 7caa7c 349a38 6c7a74 84b69c 
1c4e18 898a89 ccfadc 1c6c2c b8e2c0 1c8a24 a1aaa1 3c4e3c 5f5e5c d8fed8 
24be24 78d670 688668 148a14 14a618 145624 0c480e 2c292b 142916 1c921c 
d4dad9 243828 143017 b4d2bc b4b7b5 1c961c 8c868c 247e24 144e13 04fa04 
246224 fcfefc 0c4e0c ace2b4 3caa3c 244e24 0c180c 949394 545454 ece9ec 
343634 2cb127 6c736c 0ca00c 0cda08 0c5c0b 0ccf06 146a0c b4b2b4 646464 
b4c2b4 0c3f0c ecfdf9 e4dedc ccfdcc 2c2f2b 142214 146b16 c4c2c2 545b54 
2cb62c 74ba74 346634 b4fcb0 244224 444242 246a24 e4feec 0ce204 f4f9fc 
f4eefc 444744 54b654 fcf9fc 0c9114 dcd6d4 ecfeec 0c7b14 0cc614 0c6314 
0c8414 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

10bf8131bf05bf03e98165e902e9046587bf3158ec31bfe9658265e9bf09bf
10bf8131bf04bf81e9bf01bf02e98265bfe982e965e901e981bf318131ec82ecbfe982e9
65bf0abf
12bf82751ebf83bf1ebf318231ec3102318111318131bf81bfe901e981bf318131bf01bf
01e90bbf
0fbf02e901bf023101ec021101a981d6a981a9118111318131bf14bf
0fbf8165e901e988e5bfd4ecd66add07808c80149dc2137f46a911d431bfe981e9bf0fbf

0fbf01e982bfe9318331a49ce28fe2454d37562456dc71567bab87a9d4bf81bfe981e9bf
81bf318131bf0abf
10bf8ac775bf311bde43224d37568656cb535f1a733c893cae8506a91131bfe9bf01bf81
58bf0abf
0fbf911ebf31b761a0442245ed56721a530a3a4e3a813a4e864e73c94246e3bf10bf
07bf81e9bf82bfe9bf92bf1ebf31ec4f0c38e2ef8e4d49561a530a3a6283624b052b8a2b
ce4e60c2dfe331bf4cbf0cbf
0abf81e9bf82bfe9ec8eec83de1f21778e786f01341a0a3a1c851c4b052b20168b162054
aa93df11312fe965bf0abf
0ebf8d3111883d77cdcf78646f0134530a810a1c911c4ece20167c517c16542893a9ec31
e965bf0abf
08bf01e999bfe91ebf316cc07743cd45786f49561a530a3a624b6b2b707c510151877c70
4edcaba9bfe981e9bf0abf
0bbf01e985bf27d34352cf90cf0e4d2656011a530a1c62ee2b20167c5102518816cc1db9
d611bfe9bf0abf
07bf81e9bf01bf90e9bf4c86d3445277d92c786f49721a0a3a853a4b0520167c827c51bd
88bd5116e44b157a11bf0cbf
0dbf8d3f0fc33d4403cfbb0e3756011a0a860a624b2b20167c817c5102510116854b897b
a911bf0bbf
08bf82e9e5bf97bf75dab209bcc021ef254d2649561a533a1c4b052b70167c037c811620
85203a853911bf0bbf
0bbf0131869eb6d3b0bc7748884845646f561acb0a7382734b2b812b1683167c16cc01cc
012b844b2813d4bf0bbf
0abf0231955e236db0c04463cf45646f5634cb533a73624b2b2016821670548854ce2b20
4b28e831bf0bbf
0abf023183b5b6d3b089b044436e45786f49341a871a0a733a626b2b200120896b4e6b05
2b1c5f9decbf0bbf
09bf8131bf97bf31d82e09d3b044cd485a786f1201cb1a530a73621c052b852b054e4b1c
0585053a282d58bf0bbf
0bbf9431bf556709b03844cd482c7864125634cb1a5f0a7382734b0501050162011c854b
0aae2d58bf0bbf
0bbf0131934a236dd3b0bc7743485a786f1201341acb535f3a813a1c011c0173023a8453
3b1458bf0bbf
0bbf8431bf0455098309d338778277ef2c852c266f1201348134cb83cb530a3a013a810a
5f815f0a850a1ab37d58bf0bbf
08bf81e9bf93bf31bf18d83209d338c044cd6e0e2c64126f0172837271cb5382530a5383
53ae531a851a01a57e58bf0bbf
0bbf01e5837600230901098138c082c0482c862c7864126f49568156728272341a811a72
0272864912bb841131bf0abf
03bf94e9bfe9bfe9bf1ebf1ebf275923b632099538c044ef81ef7881786481646f816fad
84adea01ea560156882449ad2da3115831bf0abf
04bf02e992654ce61e75bf0d185523b66d0995bcc043cd2c812c7881786483646f64f001
f08b6f496f49642d6382e3314cbf0abf
01bf85e9e5e9652fc784c7693fc7698a69c7d2b200232eb60929bc84bc6343ef2c862c78
45784d78ed82ed6f6489644d45a3afa2114c31bf0abf
01e58175c783c769d5eb8ceb797679dab87908db67c4b66d876d9538b0447743ef84ef6e
2c78458e455a457864788ecfbe9fd4315831bf0abf
88e5750d3f5779da98d083d0689b3501358d5d0236c45567b6320995b04477cd92cdef6e
2c6e5ad95acf782c4517813e31bf2fbf0bbf
887569575bd0689bc5ba83ba8a2a8a878aca2a74db5955b284b23209d3b081b077017701
cd016e02ef876e2c6e4810a4d4bf01bf814cbf0abf
873f79b835c5ba2a9a829aa8410141868de1d104c690d881d85583552e6d958b9538b0c0
77cd03cd6377afcd84cd4321c1d483d4e9654c814cbf0abf
88575b9b742ad1418de181e15081509603968450c8d759d881d8b283b2326d0981099585
9538bcb0381f871f95c3995ca931bf81bfe981e9bf0bbf
8779b8c58ad1c6e750855096d7b119b104b184d7b119d855845523b2b66d016d83952995
2987296de09211d431bf01bf01e90cbf
8979d0c52aa88de15096b181b119041901b18796c80fd74a59b2b602b6016d86326d328f
ac0b318331bf31bf01bf81e9bf0cbf
88575b9b742ad1c68de186e1c850c850c850865096c850e1e70487045e8ca7912e672e85
2e8cac33473101318158bf02bf82e9bfe981e9bf0abf
8b3f799835c5742a8bd1a8dbc683c68dc68d818dc601c68cdbd1ca40a15da66697274711
31863158bf31bf31bf82bf4ce985e9bfe9bfe9bf0abf
8bc76957dab8359bc5a1748a2a052a018a01748b029ba6665b279447ec311ebf83bf581e
bf82bf4cbf02bf82e9bfe981e9bf0abf
881e75693f57795bb8d082d068350135029b0135013088b8985b7608b40d751e811ebf83
bf1e75bf81bf4c814cbf05bf81e9bf0bbf
83e9e52fc782c7693f823f5779817976027681da760276827957b482b4c7750175822fe5
bf82bf4cbf01bf814cbf81bfe981e9bf01bf01e90dbf

%
% Compression made this file 26.36% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 248 w(Resolution)g(Rule)p
0 TeXcolorgray 5524 3240 a @beginspecial 276 @llx 376
@lly 336 @urx 416 @ury 85 @rwi @setspecial
%%BeginDocument: green-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/green-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 723 string def


% load up the colormap
currentfile cmap readhexstring
041808 049008 8c948c 045204 4c544c 04c804 84e284 449644 c4cbc4 0c380e 
04ac07 cce6cc 345e2c e4e7e4 046604 2c3a2c 347234 e4fee2 048208 64cc60 
34922c 24b224 04e404 044604 647264 242623 049f07 8cae8c 04bc06 24c61c 
f4f8f3 1c541c 04d804 1c621c 1c7220 0c280d 14910f 045e04 047c04 ccdcd0 
14ac18 1c481c 747473 04d105 0c6c0b 24852a 1c381c f4f1f3 acafac f4fef5 
0c310c acc6ac 049708 a4a4a3 3c4a44 148314 144812 9cea94 04b405 149e14 
1cbc1c 044004 e4fef4 dcdddd 748274 5c5959 4cba54 145b11 145413 147412 
c4fec4 e4f1e7 146411 088a0a 243028 09c207 fcf8f3 147c13 14c80e acceac 
3c3939 04f405 044e07 07a608 14d00f 0c1f10 0c900b d4d3d4 ecfee3 1c291d 
0c6e14 bcbfbd d4f6d4 909a94 4c5a50 0cac08 24ba24 547e54 0cbc0a 0c5c16 
0c7c0b fcf1fb acb8ac 1c311c aca7a9 e2e2e2 a4e2a4 0cc80a 6c9a6c 143715 
0c650a 0c840b 07de06 14970c 0c980a 0cb40a 848583 ecf0f0 c3c6c3 0c540d 
0c740c cccccc 74ce6c 30a02c 04ec05 54aa5c 6cb66c 9cfa9c 2c862c 5c926c 
6ca674 b4deac 9cda9c 34aa2c 6c7e6c acfeac 448244 34d22c 7d7d7c 6c6d6c 
445644 4c4d4c 1c7a19 1c3e1c 3c3f3c 2c422c 7c9a84 54c254 dceadc 144014 
343231 bccebc bcbabc 447244 6c6664 9c9d9c 7caa7c 349a38 6c7a74 84b69c 
1c4e18 898a89 ccfadc 1c6c2c b8e2c0 1c8a24 a1aaa1 3c4e3c 5f5e5c d8fed8 
24be24 78d670 688668 148a14 14a618 145624 0c480e 2c292b 142916 1c921c 
d4dad9 243828 143017 b4d2bc b4b7b5 1c961c 8c868c 247e24 144e13 04fa04 
246224 fcfefc 0c4e0c ace2b4 3caa3c 244e24 0c180c 949394 545454 ece9ec 
343634 2cb127 6c736c 0ca00c 0cda08 0c5c0b 0ccf06 146a0c b4b2b4 646464 
b4c2b4 0c3f0c ecfdf9 e4dedc ccfdcc 2c2f2b 142214 146b16 c4c2c2 545b54 
2cb62c 74ba74 346634 b4fcb0 244224 444242 246a24 e4feec 0ce204 f4f9fc 
f4eefc 444744 54b654 fcf9fc 0c9114 dcd6d4 ecfeec 0c7b14 0cc614 0c6314 
0c8414 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

10bf8131bf05bf03e98165e902e9046587bf3158ec31bfe9658265e9bf09bf
10bf8131bf04bf81e9bf01bf02e98265bfe982e965e901e981bf318131ec82ecbfe982e9
65bf0abf
12bf82751ebf83bf1ebf318231ec3102318111318131bf81bfe901e981bf318131bf01bf
01e90bbf
0fbf02e901bf023101ec021101a981d6a981a9118111318131bf14bf
0fbf8165e901e988e5bfd4ecd66add07808c80149dc2137f46a911d431bfe981e9bf0fbf

0fbf01e982bfe9318331a49ce28fe2454d37562456dc71567bab87a9d4bf81bfe981e9bf
81bf318131bf0abf
10bf8ac775bf311bde43224d37568656cb535f1a733c893cae8506a91131bfe9bf01bf81
58bf0abf
0fbf911ebf31b761a0442245ed56721a530a3a4e3a813a4e864e73c94246e3bf10bf
07bf81e9bf82bfe9bf92bf1ebf31ec4f0c38e2ef8e4d49561a530a3a6283624b052b8a2b
ce4e60c2dfe331bf4cbf0cbf
0abf81e9bf82bfe9ec8eec83de1f21778e786f01341a0a3a1c851c4b052b20168b162054
aa93df11312fe965bf0abf
0ebf8d3111883d77cdcf78646f0134530a810a1c911c4ece20167c517c16542893a9ec31
e965bf0abf
08bf01e999bfe91ebf316cc07743cd45786f49561a530a3a624b6b2b707c510151877c70
4edcaba9bfe981e9bf0abf
0bbf01e985bf27d34352cf90cf0e4d2656011a530a1c62ee2b20167c5102518816cc1db9
d611bfe9bf0abf
07bf81e9bf01bf90e9bf4c86d3445277d92c786f49721a0a3a853a4b0520167c827c51bd
88bd5116e44b157a11bf0cbf
0dbf8d3f0fc33d4403cfbb0e3756011a0a860a624b2b20167c817c5102510116854b897b
a911bf0bbf
08bf82e9e5bf97bf75dab209bcc021ef254d2649561a533a1c4b052b70167c037c811620
85203a853911bf0bbf
0bbf0131869eb6d3b0bc7748884845646f561acb0a7382734b2b812b1683167c16cc01cc
012b844b2813d4bf0bbf
0abf0231955e236db0c04463cf45646f5634cb533a73624b2b2016821670548854ce2b20
4b28e831bf0bbf
0abf023183b5b6d3b089b044436e45786f49341a871a0a733a626b2b200120896b4e6b05
2b1c5f9decbf0bbf
09bf8131bf97bf31d82e09d3b044cd485a786f1201cb1a530a73621c052b852b054e4b1c
0585053a282d58bf0bbf
0bbf9431bf556709b03844cd482c7864125634cb1a5f0a7382734b0501050162011c854b
0aae2d58bf0bbf
0bbf0131934a236dd3b0bc7743485a786f1201341acb535f3a813a1c011c0173023a8453
3b1458bf0bbf
0bbf8431bf0455098309d338778277ef2c852c266f1201348134cb83cb530a3a013a810a
5f815f0a850a1ab37d58bf0bbf
08bf81e9bf93bf31bf18d83209d338c044cd6e0e2c64126f0172837271cb5382530a5383
53ae531a851a01a57e58bf0bbf
0bbf01e5837600230901098138c082c0482c862c7864126f49568156728272341a811a72
0272864912bb841131bf0abf
03bf94e9bfe9bfe9bf1ebf1ebf275923b632099538c044ef81ef7881786481646f816fad
84adea01ea560156882449ad2da3115831bf0abf
04bf02e992654ce61e75bf0d185523b66d0995bcc043cd2c812c7881786483646f64f001
f08b6f496f49642d6382e3314cbf0abf
01bf85e9e5e9652fc784c7693fc7698a69c7d2b200232eb60929bc84bc6343ef2c862c78
45784d78ed82ed6f6489644d45a3afa2114c31bf0abf
01e58175c783c769d5eb8ceb797679dab87908db67c4b66d876d9538b0447743ef84ef6e
2c78458e455a457864788ecfbe9fd4315831bf0abf
88e5750d3f5779da98d083d0689b3501358d5d0236c45567b6320995b04477cd92cdef6e
2c6e5ad95acf782c4517813e31bf2fbf0bbf
887569575bd0689bc5ba83ba8a2a8a878aca2a74db5955b284b23209d3b081b077017701
cd016e02ef876e2c6e4810a4d4bf01bf814cbf0abf
873f79b835c5ba2a9a829aa8410141868de1d104c690d881d85583552e6d958b9538b0c0
77cd03cd6377afcd84cd4321c1d483d4e9654c814cbf0abf
88575b9b742ad1418de181e15081509603968450c8d759d881d8b283b2326d0981099585
9538bcb0381f871f95c3995ca931bf81bfe981e9bf0bbf
8779b8c58ad1c6e750855096d7b119b104b184d7b119d855845523b2b66d016d83952995
2987296de09211d431bf01bf01e90cbf
8979d0c52aa88de15096b181b119041901b18796c80fd74a59b2b602b6016d86326d328f
ac0b318331bf31bf01bf81e9bf0cbf
88575b9b742ad1c68de186e1c850c850c850865096c850e1e70487045e8ca7912e672e85
2e8cac33473101318158bf02bf82e9bfe981e9bf0abf
8b3f799835c5742a8bd1a8dbc683c68dc68d818dc601c68cdbd1ca40a15da66697274711
31863158bf31bf31bf82bf4ce985e9bfe9bfe9bf0abf
8bc76957dab8359bc5a1748a2a052a018a01748b029ba6665b279447ec311ebf83bf581e
bf82bf4cbf02bf82e9bfe981e9bf0abf
881e75693f57795bb8d082d068350135029b0135013088b8985b7608b40d751e811ebf83
bf1e75bf81bf4c814cbf05bf81e9bf0bbf
83e9e52fc782c7693f823f5779817976027681da760276827957b482b4c7750175822fe5
bf82bf4cbf01bf814cbf81bfe981e9bf01bf01e90dbf

%
% Compression made this file 26.36% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 248 w(Conjunctiv)-5 b(e)59
b(Nor)5 b(mal)59 b(F)-6 b(or)5 b(m)p 0 TeXcolorgray 5524
3528 a @beginspecial 276 @llx 376 @lly 336 @urx 416 @ury
85 @rwi @setspecial
%%BeginDocument: green-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/green-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 723 string def


% load up the colormap
currentfile cmap readhexstring
041808 049008 8c948c 045204 4c544c 04c804 84e284 449644 c4cbc4 0c380e 
04ac07 cce6cc 345e2c e4e7e4 046604 2c3a2c 347234 e4fee2 048208 64cc60 
34922c 24b224 04e404 044604 647264 242623 049f07 8cae8c 04bc06 24c61c 
f4f8f3 1c541c 04d804 1c621c 1c7220 0c280d 14910f 045e04 047c04 ccdcd0 
14ac18 1c481c 747473 04d105 0c6c0b 24852a 1c381c f4f1f3 acafac f4fef5 
0c310c acc6ac 049708 a4a4a3 3c4a44 148314 144812 9cea94 04b405 149e14 
1cbc1c 044004 e4fef4 dcdddd 748274 5c5959 4cba54 145b11 145413 147412 
c4fec4 e4f1e7 146411 088a0a 243028 09c207 fcf8f3 147c13 14c80e acceac 
3c3939 04f405 044e07 07a608 14d00f 0c1f10 0c900b d4d3d4 ecfee3 1c291d 
0c6e14 bcbfbd d4f6d4 909a94 4c5a50 0cac08 24ba24 547e54 0cbc0a 0c5c16 
0c7c0b fcf1fb acb8ac 1c311c aca7a9 e2e2e2 a4e2a4 0cc80a 6c9a6c 143715 
0c650a 0c840b 07de06 14970c 0c980a 0cb40a 848583 ecf0f0 c3c6c3 0c540d 
0c740c cccccc 74ce6c 30a02c 04ec05 54aa5c 6cb66c 9cfa9c 2c862c 5c926c 
6ca674 b4deac 9cda9c 34aa2c 6c7e6c acfeac 448244 34d22c 7d7d7c 6c6d6c 
445644 4c4d4c 1c7a19 1c3e1c 3c3f3c 2c422c 7c9a84 54c254 dceadc 144014 
343231 bccebc bcbabc 447244 6c6664 9c9d9c 7caa7c 349a38 6c7a74 84b69c 
1c4e18 898a89 ccfadc 1c6c2c b8e2c0 1c8a24 a1aaa1 3c4e3c 5f5e5c d8fed8 
24be24 78d670 688668 148a14 14a618 145624 0c480e 2c292b 142916 1c921c 
d4dad9 243828 143017 b4d2bc b4b7b5 1c961c 8c868c 247e24 144e13 04fa04 
246224 fcfefc 0c4e0c ace2b4 3caa3c 244e24 0c180c 949394 545454 ece9ec 
343634 2cb127 6c736c 0ca00c 0cda08 0c5c0b 0ccf06 146a0c b4b2b4 646464 
b4c2b4 0c3f0c ecfdf9 e4dedc ccfdcc 2c2f2b 142214 146b16 c4c2c2 545b54 
2cb62c 74ba74 346634 b4fcb0 244224 444242 246a24 e4feec 0ce204 f4f9fc 
f4eefc 444744 54b654 fcf9fc 0c9114 dcd6d4 ecfeec 0c7b14 0cc614 0c6314 
0c8414 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

10bf8131bf05bf03e98165e902e9046587bf3158ec31bfe9658265e9bf09bf
10bf8131bf04bf81e9bf01bf02e98265bfe982e965e901e981bf318131ec82ecbfe982e9
65bf0abf
12bf82751ebf83bf1ebf318231ec3102318111318131bf81bfe901e981bf318131bf01bf
01e90bbf
0fbf02e901bf023101ec021101a981d6a981a9118111318131bf14bf
0fbf8165e901e988e5bfd4ecd66add07808c80149dc2137f46a911d431bfe981e9bf0fbf

0fbf01e982bfe9318331a49ce28fe2454d37562456dc71567bab87a9d4bf81bfe981e9bf
81bf318131bf0abf
10bf8ac775bf311bde43224d37568656cb535f1a733c893cae8506a91131bfe9bf01bf81
58bf0abf
0fbf911ebf31b761a0442245ed56721a530a3a4e3a813a4e864e73c94246e3bf10bf
07bf81e9bf82bfe9bf92bf1ebf31ec4f0c38e2ef8e4d49561a530a3a6283624b052b8a2b
ce4e60c2dfe331bf4cbf0cbf
0abf81e9bf82bfe9ec8eec83de1f21778e786f01341a0a3a1c851c4b052b20168b162054
aa93df11312fe965bf0abf
0ebf8d3111883d77cdcf78646f0134530a810a1c911c4ece20167c517c16542893a9ec31
e965bf0abf
08bf01e999bfe91ebf316cc07743cd45786f49561a530a3a624b6b2b707c510151877c70
4edcaba9bfe981e9bf0abf
0bbf01e985bf27d34352cf90cf0e4d2656011a530a1c62ee2b20167c5102518816cc1db9
d611bfe9bf0abf
07bf81e9bf01bf90e9bf4c86d3445277d92c786f49721a0a3a853a4b0520167c827c51bd
88bd5116e44b157a11bf0cbf
0dbf8d3f0fc33d4403cfbb0e3756011a0a860a624b2b20167c817c5102510116854b897b
a911bf0bbf
08bf82e9e5bf97bf75dab209bcc021ef254d2649561a533a1c4b052b70167c037c811620
85203a853911bf0bbf
0bbf0131869eb6d3b0bc7748884845646f561acb0a7382734b2b812b1683167c16cc01cc
012b844b2813d4bf0bbf
0abf0231955e236db0c04463cf45646f5634cb533a73624b2b2016821670548854ce2b20
4b28e831bf0bbf
0abf023183b5b6d3b089b044436e45786f49341a871a0a733a626b2b200120896b4e6b05
2b1c5f9decbf0bbf
09bf8131bf97bf31d82e09d3b044cd485a786f1201cb1a530a73621c052b852b054e4b1c
0585053a282d58bf0bbf
0bbf9431bf556709b03844cd482c7864125634cb1a5f0a7382734b0501050162011c854b
0aae2d58bf0bbf
0bbf0131934a236dd3b0bc7743485a786f1201341acb535f3a813a1c011c0173023a8453
3b1458bf0bbf
0bbf8431bf0455098309d338778277ef2c852c266f1201348134cb83cb530a3a013a810a
5f815f0a850a1ab37d58bf0bbf
08bf81e9bf93bf31bf18d83209d338c044cd6e0e2c64126f0172837271cb5382530a5383
53ae531a851a01a57e58bf0bbf
0bbf01e5837600230901098138c082c0482c862c7864126f49568156728272341a811a72
0272864912bb841131bf0abf
03bf94e9bfe9bfe9bf1ebf1ebf275923b632099538c044ef81ef7881786481646f816fad
84adea01ea560156882449ad2da3115831bf0abf
04bf02e992654ce61e75bf0d185523b66d0995bcc043cd2c812c7881786483646f64f001
f08b6f496f49642d6382e3314cbf0abf
01bf85e9e5e9652fc784c7693fc7698a69c7d2b200232eb60929bc84bc6343ef2c862c78
45784d78ed82ed6f6489644d45a3afa2114c31bf0abf
01e58175c783c769d5eb8ceb797679dab87908db67c4b66d876d9538b0447743ef84ef6e
2c78458e455a457864788ecfbe9fd4315831bf0abf
88e5750d3f5779da98d083d0689b3501358d5d0236c45567b6320995b04477cd92cdef6e
2c6e5ad95acf782c4517813e31bf2fbf0bbf
887569575bd0689bc5ba83ba8a2a8a878aca2a74db5955b284b23209d3b081b077017701
cd016e02ef876e2c6e4810a4d4bf01bf814cbf0abf
873f79b835c5ba2a9a829aa8410141868de1d104c690d881d85583552e6d958b9538b0c0
77cd03cd6377afcd84cd4321c1d483d4e9654c814cbf0abf
88575b9b742ad1418de181e15081509603968450c8d759d881d8b283b2326d0981099585
9538bcb0381f871f95c3995ca931bf81bfe981e9bf0bbf
8779b8c58ad1c6e750855096d7b119b104b184d7b119d855845523b2b66d016d83952995
2987296de09211d431bf01bf01e90cbf
8979d0c52aa88de15096b181b119041901b18796c80fd74a59b2b602b6016d86326d328f
ac0b318331bf31bf01bf81e9bf0cbf
88575b9b742ad1c68de186e1c850c850c850865096c850e1e70487045e8ca7912e672e85
2e8cac33473101318158bf02bf82e9bfe981e9bf0abf
8b3f799835c5742a8bd1a8dbc683c68dc68d818dc601c68cdbd1ca40a15da66697274711
31863158bf31bf31bf82bf4ce985e9bfe9bfe9bf0abf
8bc76957dab8359bc5a1748a2a052a018a01748b029ba6665b279447ec311ebf83bf581e
bf82bf4cbf02bf82e9bfe981e9bf0abf
881e75693f57795bb8d082d068350135029b0135013088b8985b7608b40d751e811ebf83
bf1e75bf81bf4c814cbf05bf81e9bf0bbf
83e9e52fc782c7693f823f5779817976027681da760276827957b482b4c7750175822fe5
bf82bf4cbf01bf814cbf81bfe981e9bf01bf01e90dbf

%
% Compression made this file 26.36% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 248 w(Resolution)59 b(Algor)s(ithm)p
0 TeXcolorgray 5190 3862 a @beginspecial 276 @llx 376
@lly 336 @urx 416 @ury 113 @rwi @setspecial
%%BeginDocument: red-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/red-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 735 string def


% load up the colormap
currentfile cmap readhexstring
140a09 748284 8c050b 3c4244 540408 bcc4c4 8c4a44 c40507 542220 242422 
740404 dce2e4 9c2a24 ac0506 340204 bc8e8c ecf3f0 541517 5c6264 9ca3a1 
e40306 741311 341312 9c0508 f4c2c4 640304 f4f4ec ac1314 6c4244 343533 
d40307 4c534f ac0a04 f4fdfb 740b0b fce4e2 ccd2cc 240a0c 949393 641412 
6c7370 9c0b08 d44a54 44020c acb4b4 441211 840b0b 540c0a 4c261c bc0506 
c4aaa4 741c24 640d0b dcc2c4 9c6264 242a24 d40a04 f4eae4 c40e04 f4f5f4 
4c5a54 241011 8c0a0a 544d4c bccacc a4aba8 443e3c 7c0b0b 5c0d0b 6c0c0b 
8c8e84 b40606 746a6c f40204 341a16 a40508 e4d6d4 fcfcf3 641c1c cc0406 
340b0b 541a1c e40a04 343a3c dc0208 949c98 747e7c 444a4c 342321 e4eae7 
ec0404 841516 bc0b05 6c1311 a40a06 440e0f c46664 f4eef4 2c1111 3c0c0b 
140e0c 848584 842e34 e4fef4 3c1313 2c1e1e d4dedc 441a14 fcf6f7 940a09 
f4d6d4 5c1416 aca6ac 9c1418 5c5254 740d14 b4bebc 841b1e 5c5d5b cccdcb 
5c0c14 ecbab4 6c0d14 fcfefc a49e9c cc6a6c b44644 dca2a4 fc7e84 947674 
dcbabc 64363c ac3634 b47878 bcbdbc a47e7c 7c4a4c fcaaac cc5a64 ac1a1c 
6c6c6c dc7674 843e3c 84625c fcdedf fcb6b4 8c1e1c dccecc 9c4a54 ccc2bc 
840509 342c2c bc1e24 442e2c 9c1a24 a43e44 ac6264 fccac4 848a8c 644a44 
8c9690 94060c 7c141c b40c05 d4d4d4 dc0a0c fcece0 7c6868 9c9c9e 4c0d0b 
843634 fcbeb4 1c0808 7c8381 444443 5c0207 2c2624 7c060c e4e4e3 a4a4a4 
fcc6cc fcf5ec 2c1717 3c3534 545453 2c0907 747574 b4b4b2 4c1212 7c1a1f 
2c2b2c 5c4a54 c4cbce acabac 3c3b3b 7c7d7b 4c4c4a ececec 1c110e ecfef9 
4c1e1c fcd5cf a41214 bc424c c4bec4 c4c5c4 54262c ac0214 646464 34161c 
9c0614 6c0204 b41614 fce5ec ccd6dc 64161c 840a14 540e14 640c14 d40c14 
c40a14 7c0b14 ecaeac b40414 a40614 cc0614 340e14 5c1c1c 34222c ec0614 
6c121c 3c0e14 dcdddc 940e14 fcecec 7c6a74 4c0e14 4c0204 545a57 3c1a1c 
fceef5 ac7e84 ac0a14 4c3e3c 8c8a8c 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

0f7b824d7b6c816c4d824d6c7b817b218421c721c721822167c782c7214d844d6c4d6c7b
117b
107b816c4d864df06c4d6c3b2181217b017b814d218821c7217b4d6cf06c4d814d7b027b
814d7b0b7b
0f7b814d7b897bd5f06c4d6c7b4d6c4d814d6c016c85ea4d6c4d6c7b817b4d024d037b81
4d7b0a7b
0f7b81217b017b834d6cd56c016c82f06cf081f0ea01ea84a6d5b54d7b027b014d107b
0f7b8221c77b827bf06c906cd590de858e33e6a2759b7d8990ea6cb581b57b127b
0f7b01218b7bb54d6c18f14e6f34a25be982e971e987e92e92609da6b54d844d217b214d
814d7b0b7b
107b8d216c4d6cf1112f3445435b6d294b834bca291b861b17718d23b54d814d2182214d
6c816c7b0a7b
0f7b9d3b7b6c3588a92f5d15432e6d4b0d475ca32047dc07cfd47ec9a64d217b4d824d6c
7b0a7b
0c7b914d3b7bb56c82ce2b4e4415432e6d294b473181315c835c4f1e548654071b0cabb5
4d824d614d014d0a7b
0a7b814d7b817b6c016c8d8283116faf5b22433e6d4b0d470701078e4f1e145a14544fd4
8491b56c7b4d7b0b7b
0e7b924d6c880ed9277ad3432e6d294b0d31074f1e548354145a14851454db172a908490
4d10217b0a7b
087b014d017b8b3b7b4d875fed6fda73d32e3e833e295e478447074f54140214025a88e5
1edf80d56c10217b0a7b
0b7b816c7b897b935011edd77a195b2e852e6d295e203182314f140314035a871407e0b4
d57bc77b0a7b
077b816c7b817b4d894d7b4deb5051ec047a2282222e3e883e295e0d475c1e5414011401
528a5a495a54e1d28af07b217b0a7b
077b814d7b017b8b4d7be8b0305fe3ed34bdd32e892e6d295e0d31074f5414011481525a
025a861407985bf0d57b0b7b
097b974d7b4db5cc3db95fa9275d19a22e963e6d4b0d4731071e5481541481145a015a87
54a507cf9a89ea7b0b7b
087b024d8b6c4deb62685fbc443445222e822e6d298529204731071e821e541482145a54
8954384f1ee1f28ab54d7b0a7b
087b834d7b4d6c946cbf62632dbc2f44450ab12e026d295e0d5c314f1e821e54148b1454
383a071e4fdfcb6c4d7b0a7b
097b014d016c96e4b9685fecd9dad37343963e6d294b0d473107e14f1e5481544f894f5c
314f07cf0cb54d7b0a7b
097b034d9225d11668a9d944da0a43b12e3ea1294b47a3318431074f1e4f894f5ca35c07
31e05b6c7b0b7b
097b944d7b4d6c25b6e2685f2f78197a22b12e026d174b0d830da34731813107820731a3
01a38647cfd2bd6c4d7b0a7b
0b7b016c94e43d16632dec2f784522b1432e3ea1174b0d5e0d478147318231472087205e
0d4b02666c7b0b7b
0b7b8c6c4d3f2562162dec2f78197a228b222e023ea1174b295e4b0d4782470d5e875e17
4b17d894b57b0b7b
087b814d7b817b4d874d483d6216685f2f852fda7a452243834302a16d816d2985295e4b
cf0d5e885eca1729e9dd9c6c7b0b7b
097b826c7b6c8d6ccc003dd1e2e711d904277a452281222e862e026d3e6d294b8c4b1729
6d028b96b1337f6c4d7b0a7b
077b944d7b6c4d6c4da469c6b6e2505fbc2f7844da457a4381432e012e823ea1178c17a1
6d3ea16d2e5b27ead54d7b0a7b
047b864d6c4d3b6c103b843b4dc58cc687c66216635fd9ec788178348134738173438143
2e832e3ea13e8b3ed82e3e0a5baf366cf04d7b0a7b
017b814d6c826c3bc501c501b281c5b201b28c8669643dd150e7bceca911783482344522
01228143968196d881d84386432e0a456f9d6c826c4d7b0a7b
964d3b61c559b20be8a477cd77cc8677cd7609006216505f875feca92f1134da4586455d
2243962273017388dd152f0f4d7b6c4d7b0a7b
886c10b2e8a477cc86bb83bb70a8b38bb313a846ae00acd168e7635f855fec2f78443402
340122877a452734450406b583b57b4d7b0b7b
8cc5b29305bb70a826659ec3bac381c3288928adee69c6d11650635f015f93a92f784434
4434450a34446f4434aa794d21c77b0c7b
9ae877bbb32665ba8cd076eeb8765703d01feec2693d25b9efe2635f835fa9d92f022f81
af448144118911bc4edeb54d21c7217b0b7b
8ca486a89ebad072c4ae42c2531d031d85c2b797693d628262d168016881635f815fbc01
bc8aa911bc63081cc9ea6c4d7b0e7b
8a77bba8bad0b8aec2531dbe86beb0be37be37be84be1de4b03d853dac25621668016882
2d08638263c868856881eaf06c4d014d0e7b
8977bb26bad0c4aeb71dbe81be0902098137098209be1d841db79758b601b6831662b916
8216b96b866b168f6e4db54d014d827b4d7b0d7b
8fa4867c6548d0eec4ae0353b7531dc21d811d53015301ae913fb8723ff39958694ab69f
a732a64db5f04d824d7b4d814d7b0e7b
88e87786b32665ba8cd082d072b801b891c41f3c1f3c1fee1228c346267cbb954c39b581
b54d824db54d844d7b6c7b4d814d7b0f7b
87c5b2d6cdbbb3a8f483f465c3ba02ba01288e5601ad019ea055b3bbcd4cb210b54d014d
027b826c4d7b017b81217b817b2181217b0b7b
863bc5b2e8a477868286bbc181c1b383b37ca81301130141012c877486c0246a59101a85
1a4d7b213b7b017b81217b057b81217b0b7b
864d3b61c559b2e882e8a4778677cdc0cdc0cd408740054024d66a0b598559c5101a217b
867b217b217b217b067b81217b0c7b

%
% Compression made this file 26.46% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 298 w(Required)f(reading:)p
0 TeXcolorgray 5524 4153 a @beginspecial 276 @llx 376
@lly 336 @urx 416 @ury 85 @rwi @setspecial
%%BeginDocument: green-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/green-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 723 string def


% load up the colormap
currentfile cmap readhexstring
041808 049008 8c948c 045204 4c544c 04c804 84e284 449644 c4cbc4 0c380e 
04ac07 cce6cc 345e2c e4e7e4 046604 2c3a2c 347234 e4fee2 048208 64cc60 
34922c 24b224 04e404 044604 647264 242623 049f07 8cae8c 04bc06 24c61c 
f4f8f3 1c541c 04d804 1c621c 1c7220 0c280d 14910f 045e04 047c04 ccdcd0 
14ac18 1c481c 747473 04d105 0c6c0b 24852a 1c381c f4f1f3 acafac f4fef5 
0c310c acc6ac 049708 a4a4a3 3c4a44 148314 144812 9cea94 04b405 149e14 
1cbc1c 044004 e4fef4 dcdddd 748274 5c5959 4cba54 145b11 145413 147412 
c4fec4 e4f1e7 146411 088a0a 243028 09c207 fcf8f3 147c13 14c80e acceac 
3c3939 04f405 044e07 07a608 14d00f 0c1f10 0c900b d4d3d4 ecfee3 1c291d 
0c6e14 bcbfbd d4f6d4 909a94 4c5a50 0cac08 24ba24 547e54 0cbc0a 0c5c16 
0c7c0b fcf1fb acb8ac 1c311c aca7a9 e2e2e2 a4e2a4 0cc80a 6c9a6c 143715 
0c650a 0c840b 07de06 14970c 0c980a 0cb40a 848583 ecf0f0 c3c6c3 0c540d 
0c740c cccccc 74ce6c 30a02c 04ec05 54aa5c 6cb66c 9cfa9c 2c862c 5c926c 
6ca674 b4deac 9cda9c 34aa2c 6c7e6c acfeac 448244 34d22c 7d7d7c 6c6d6c 
445644 4c4d4c 1c7a19 1c3e1c 3c3f3c 2c422c 7c9a84 54c254 dceadc 144014 
343231 bccebc bcbabc 447244 6c6664 9c9d9c 7caa7c 349a38 6c7a74 84b69c 
1c4e18 898a89 ccfadc 1c6c2c b8e2c0 1c8a24 a1aaa1 3c4e3c 5f5e5c d8fed8 
24be24 78d670 688668 148a14 14a618 145624 0c480e 2c292b 142916 1c921c 
d4dad9 243828 143017 b4d2bc b4b7b5 1c961c 8c868c 247e24 144e13 04fa04 
246224 fcfefc 0c4e0c ace2b4 3caa3c 244e24 0c180c 949394 545454 ece9ec 
343634 2cb127 6c736c 0ca00c 0cda08 0c5c0b 0ccf06 146a0c b4b2b4 646464 
b4c2b4 0c3f0c ecfdf9 e4dedc ccfdcc 2c2f2b 142214 146b16 c4c2c2 545b54 
2cb62c 74ba74 346634 b4fcb0 244224 444242 246a24 e4feec 0ce204 f4f9fc 
f4eefc 444744 54b654 fcf9fc 0c9114 dcd6d4 ecfeec 0c7b14 0cc614 0c6314 
0c8414 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

10bf8131bf05bf03e98165e902e9046587bf3158ec31bfe9658265e9bf09bf
10bf8131bf04bf81e9bf01bf02e98265bfe982e965e901e981bf318131ec82ecbfe982e9
65bf0abf
12bf82751ebf83bf1ebf318231ec3102318111318131bf81bfe901e981bf318131bf01bf
01e90bbf
0fbf02e901bf023101ec021101a981d6a981a9118111318131bf14bf
0fbf8165e901e988e5bfd4ecd66add07808c80149dc2137f46a911d431bfe981e9bf0fbf

0fbf01e982bfe9318331a49ce28fe2454d37562456dc71567bab87a9d4bf81bfe981e9bf
81bf318131bf0abf
10bf8ac775bf311bde43224d37568656cb535f1a733c893cae8506a91131bfe9bf01bf81
58bf0abf
0fbf911ebf31b761a0442245ed56721a530a3a4e3a813a4e864e73c94246e3bf10bf
07bf81e9bf82bfe9bf92bf1ebf31ec4f0c38e2ef8e4d49561a530a3a6283624b052b8a2b
ce4e60c2dfe331bf4cbf0cbf
0abf81e9bf82bfe9ec8eec83de1f21778e786f01341a0a3a1c851c4b052b20168b162054
aa93df11312fe965bf0abf
0ebf8d3111883d77cdcf78646f0134530a810a1c911c4ece20167c517c16542893a9ec31
e965bf0abf
08bf01e999bfe91ebf316cc07743cd45786f49561a530a3a624b6b2b707c510151877c70
4edcaba9bfe981e9bf0abf
0bbf01e985bf27d34352cf90cf0e4d2656011a530a1c62ee2b20167c5102518816cc1db9
d611bfe9bf0abf
07bf81e9bf01bf90e9bf4c86d3445277d92c786f49721a0a3a853a4b0520167c827c51bd
88bd5116e44b157a11bf0cbf
0dbf8d3f0fc33d4403cfbb0e3756011a0a860a624b2b20167c817c5102510116854b897b
a911bf0bbf
08bf82e9e5bf97bf75dab209bcc021ef254d2649561a533a1c4b052b70167c037c811620
85203a853911bf0bbf
0bbf0131869eb6d3b0bc7748884845646f561acb0a7382734b2b812b1683167c16cc01cc
012b844b2813d4bf0bbf
0abf0231955e236db0c04463cf45646f5634cb533a73624b2b2016821670548854ce2b20
4b28e831bf0bbf
0abf023183b5b6d3b089b044436e45786f49341a871a0a733a626b2b200120896b4e6b05
2b1c5f9decbf0bbf
09bf8131bf97bf31d82e09d3b044cd485a786f1201cb1a530a73621c052b852b054e4b1c
0585053a282d58bf0bbf
0bbf9431bf556709b03844cd482c7864125634cb1a5f0a7382734b0501050162011c854b
0aae2d58bf0bbf
0bbf0131934a236dd3b0bc7743485a786f1201341acb535f3a813a1c011c0173023a8453
3b1458bf0bbf
0bbf8431bf0455098309d338778277ef2c852c266f1201348134cb83cb530a3a013a810a
5f815f0a850a1ab37d58bf0bbf
08bf81e9bf93bf31bf18d83209d338c044cd6e0e2c64126f0172837271cb5382530a5383
53ae531a851a01a57e58bf0bbf
0bbf01e5837600230901098138c082c0482c862c7864126f49568156728272341a811a72
0272864912bb841131bf0abf
03bf94e9bfe9bfe9bf1ebf1ebf275923b632099538c044ef81ef7881786481646f816fad
84adea01ea560156882449ad2da3115831bf0abf
04bf02e992654ce61e75bf0d185523b66d0995bcc043cd2c812c7881786483646f64f001
f08b6f496f49642d6382e3314cbf0abf
01bf85e9e5e9652fc784c7693fc7698a69c7d2b200232eb60929bc84bc6343ef2c862c78
45784d78ed82ed6f6489644d45a3afa2114c31bf0abf
01e58175c783c769d5eb8ceb797679dab87908db67c4b66d876d9538b0447743ef84ef6e
2c78458e455a457864788ecfbe9fd4315831bf0abf
88e5750d3f5779da98d083d0689b3501358d5d0236c45567b6320995b04477cd92cdef6e
2c6e5ad95acf782c4517813e31bf2fbf0bbf
887569575bd0689bc5ba83ba8a2a8a878aca2a74db5955b284b23209d3b081b077017701
cd016e02ef876e2c6e4810a4d4bf01bf814cbf0abf
873f79b835c5ba2a9a829aa8410141868de1d104c690d881d85583552e6d958b9538b0c0
77cd03cd6377afcd84cd4321c1d483d4e9654c814cbf0abf
88575b9b742ad1418de181e15081509603968450c8d759d881d8b283b2326d0981099585
9538bcb0381f871f95c3995ca931bf81bfe981e9bf0bbf
8779b8c58ad1c6e750855096d7b119b104b184d7b119d855845523b2b66d016d83952995
2987296de09211d431bf01bf01e90cbf
8979d0c52aa88de15096b181b119041901b18796c80fd74a59b2b602b6016d86326d328f
ac0b318331bf31bf01bf81e9bf0cbf
88575b9b742ad1c68de186e1c850c850c850865096c850e1e70487045e8ca7912e672e85
2e8cac33473101318158bf02bf82e9bfe981e9bf0abf
8b3f799835c5742a8bd1a8dbc683c68dc68d818dc601c68cdbd1ca40a15da66697274711
31863158bf31bf31bf82bf4ce985e9bfe9bfe9bf0abf
8bc76957dab8359bc5a1748a2a052a018a01748b029ba6665b279447ec311ebf83bf581e
bf82bf4cbf02bf82e9bfe981e9bf0abf
881e75693f57795bb8d082d068350135029b0135013088b8985b7608b40d751e811ebf83
bf1e75bf81bf4c814cbf05bf81e9bf0bbf
83e9e52fc782c7693f823f5779817976027681da760276827957b482b4c7750175822fe5
bf82bf4cbf01bf814cbf81bfe981e9bf01bf01e90dbf

%
% Compression made this file 26.36% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 248 w(Stuar)9 b(t)60 b(Russell)f(and)f(P)
-11 b(eter)60 b(Nor)6 b(vig.)74 b Fp(Ar)9 b(ti\002cial)5772
4396 y(Intelligence:)74 b(A)60 b(Moder)5 b(n)58 b(Approach)p
Fs(.)73 b(Prentice)59 b(Hall,)i(3rd)5772 4640 y(Edition,)g(2010)p
0 TeXcolorgray 5727 4884 a @beginspecial 276 @llx 376
@lly 336 @urx 416 @ury 85 @rwi @setspecial
%%BeginDocument: yellow-bullet-on-white.ps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: /home/fred/TeX/STYLES/Prosper/img/yellow-bullet-on-white.ps
%%Creator: XV Version 3.10a+FLmask  Rev: 12/29/94  -  by John Bradley
%%BoundingBox: 276 376 336 416
%%Pages: 1
%%DocumentFonts:
%%EndComments
%%EndProlog

%%Page: 1 1

% remember original state
/origstate save def

% build a temporary dictionary
20 dict begin

% define space for color conversions
/grays 60 string def  % space for gray scale line
/npixls 0 def
/rgbindx 0 def

% lower left corner
276 376 translate

% size of image (on paper, in 1/72inch coords)
59.97600 40.03200 scale

% define 'colorimage' if it isn't defined
%   ('colortogray' and 'mergeprocs' come from xwd2ps
%     via xgrab)
/colorimage where   % do we know about 'colorimage'?
  { pop }           % yes: pop off the 'dict' returned
  {                 % no:  define one
    /colortogray {  % define an RGB->I function
      /rgbdata exch store    % call input 'rgbdata'
      rgbdata length 3 idiv
      /npixls exch store
      /rgbindx 0 store
      0 1 npixls 1 sub {
        grays exch
        rgbdata rgbindx       get 20 mul    % Red
        rgbdata rgbindx 1 add get 32 mul    % Green
        rgbdata rgbindx 2 add get 12 mul    % Blue
        add add 64 idiv      % I = .5G + .31R + .18B
        put
        /rgbindx rgbindx 3 add store
      } for
      grays 0 npixls getinterval
    } bind def

    % Utility procedure for colorimage operator.
    % This procedure takes two procedures off the
    % stack and merges them into a single procedure.

    /mergeprocs { % def
      dup length
      3 -1 roll
      dup
      length
      dup
      5 1 roll
      3 -1 roll
      add
      array cvx
      dup
      3 -1 roll
      0 exch
      putinterval
      dup
      4 2 roll
      putinterval
    } bind def

    /colorimage { % def
      pop pop     % remove 'false 3' operands
      {colortogray} mergeprocs
      image
    } bind def
  } ifelse          % end of 'false' case



% define the colormap
/cmap 741 string def


% load up the colormap
currentfile cmap readhexstring
14180c 8c8e0a c4cb07 44521c 949c78 6c7208 c4caa4 acb006 2c3614 f4f2a8 
74784c e4e604 64620b 444209 acae3c e4e6e2 a4a108 b4be04 7c8204 acae78 
f4f9d7 ccca64 242809 949254 d4db04 505628 747329 3c4311 444234 242725 
9c9c08 bcb906 5c5f0b 646a09 c4ca2c c4cabc 343632 84886c a4a26c f4f7f2 
54540a 444b0f f4edf9 c4c107 acaeb0 7c7a0a 646364 a4a62c acb608 e4e664 
94920b 2c300a d4d106 f4f208 a4a608 848428 c0c2a8 747475 5b5a0a 3c3c10 
f4f69c 5c5c5c 646424 dcdecc fcfefb c4c609 ecf0e0 8c890b 746d10 b4aa0c 
9c9d9f 747a06 afb217 64660d 2c3028 a7aa1f ccd306 343e14 545a44 45460b 
747c28 949e34 a4a4a3 fcf9f2 544e11 949634 7c7c7f 34381e f4ee06 848a0c 
242816 e4da04 bcb917 6c6e24 545415 969608 bcbebd 1c210a 747218 b4af07 
545457 bcbe3c fcfede d4da54 444a3c 9ca21c 6c6d0b 3c3e38 f4f2e8 7c7e09 
2c3016 aca808 fcf9c1 acaaad 848e24 ecee09 bcbf24 949a14 d4d4d5 848686 
4c4c11 c4bf18 b4b6b3 b4b620 fcfa1c ccc6cc d4d694 9c9c40 e4e6cc bcbe74 
8c928c 5c602c ccc65c 6c6d6c dcdc78 747468 acae5c dcdaac 847e24 4c4d4f 
ccd224 e4e2e4 c4c64c d4d6b4 eceff6 dce204 d5d606 e4e294 c4c6c6 848316 
545a3c cccccd a4a644 f4f214 fcf6b4 bcbe54 bcc604 8c8a8c eceec8 b4b654 
5b5a1a 444615 949618 f5f2f7 fcfec7 8c8f18 444116 5c5f15 dcdddd 4c5315 
6c6212 fcfada d4ce5c dcdc06 7c7624 3c393c b4b2b6 8c8634 343231 847e84 
dcda64 bcbabc 949395 746e74 e4e206 e4e67c 747a1c 545a5c ccc60a 6c6608 
847e0e 8c8e34 dcd6a4 1c1a0f cccd05 74740a 34380f 545349 ece708 eceae4 
bcbf07 84840b b4b27c 2c2a2a c4ba04 ccce24 5c5604 acaa34 b4b707 fcf60c 
645e64 a49ea4 7c7a24 9c9a2c 2c2a1c c4ba14 5c5614 c4c2c1 343214 9c9e17 
eceaed ccce38 fcf617 f4eeb4 7c7a4c 646114 948e64 747234 444444 34363c 
84867c a4a67c f4f6fc 7c7814 948e14 d4d214 848234 747684 fcfa9c eceeec 
ccd214 a4a4ac fcfafc 7c7e8c 1c2214 c4c23c d4d664 
pop pop   % lose return values from readhexstring


% rlecmapimage expects to have 'w h bits matrix' on stack
/rlecmapimage {
  /buffer 1 string def
  /rgbval 3 string def
  /block  384 string def

  % proc to read a block from file, and return RGB data
  { currentfile buffer readhexstring pop
    /bcount exch 0 get store
    bcount 128 ge
    {  % it's a non-run block
      0 1 bcount 128 sub
      { currentfile buffer readhexstring pop pop

        % look up value in color map
        /rgbval cmap buffer 0 get 3 mul 3 getinterval store

        % and put it in position i*3 in block
        block exch 3 mul rgbval putinterval
      } for
      block  0  bcount 127 sub 3 mul  getinterval
    }

    { % else it's a run block
      currentfile buffer readhexstring pop pop

      % look up value in colormap
      /rgbval cmap buffer 0 get 3 mul 3 getinterval store

      0 1 bcount { block exch 3 mul rgbval putinterval } for

      block 0 bcount 1 add 3 mul getinterval
    } ifelse
  } % end of proc
  false 3 colorimage
} bind def


60 40 8			% dimensions of data
[60 0 0 -40 0 40]		% mapping matrix
rlecmapimage

1340815340014082f240f202f2014002f203408166401240
10400153014084665340f2408240f2408140f282f22af284f2405327401440
0f40812a4081405381534082406c4081405382534066016682406653815340014081f240
1240
104081f240014082664066056681a4708270a46601661640
104084f2a3f2406601668eab89ca17b1bf7f989f15939aa466401440
0f4081a340024095668926e31ad437eaa2db104b2fcf9b869aa46640f2401040
104001f28b40dfe7e01aae8a95a5321e3684364b7b5c488648f5b9a46640f281f2400e40

0f408ef240668fe283a062aebeea32106f6383635cd7410241842284a466400340816640
0a40
0c4082f227408840663883a05d6abac985c9321e106f1f8e1fbc79f0c24c92f022ac9366
4053400d40
0e4094536606e083a7496ae9beea5f1e6f451f2bbcc2341887189118eb8cb40966816640
0d40
0e408953abe00da74921e9474389435f1045631f2bc234ad81ad0b010b881892cd67eea4
66f2400b40
0b4001f201408c04a94fa74905c96d43321e106387632bbc349291c6738b73c60bad4ccd
31a466a3f2400a40
0c4086e8403fa678a92094206a476d4332106f631f2bc292ad0b5899de357391879102dd
3c6640f2400a40
074081f24003408627e6c47828206a016a91c901321e3607d02bc2ad91c699de7cd1730b
870b4c7486a440f2400a40
074083f240f2400140a1a81ca678283a6a05c359435f1e6f071f41021891c67399de3558
b8adc27484df66400b40
094081f240a34027d9d6a64f783a0c6a2dc959321e3607d041c234adb8c6733558c6b892
4c74659366400b40
0c4099668757a64f5e3a0c6a476d43011e1007d0c82b4c18ad0bc60bb889b8ad34c24107
f66653400a40
0b409a66404eda3ba65428206ac36dc932a2106f631fc8c23492ad91b85b885bebc2029c
308e66400b40
0c4093666b333ba678a02049c32dc943321e3607d01f418241c29201928934eb79bcc811
300e66400b40
084081f2409840664016b23b0d78283a496ac312c9325f103663d01fc82bc201c201bc88
792b1f3048d566f2400a40
084081f240024095166ec4a6a1283a0c6ac36dc9435f1e103607d01fc82b8b2bbc2bccd7
5c63074b5566400b40
0b4095664057d6da3ba1782820216a476dc901321e103607638263d01f841fcc7b630785
0736697f66400b40
0d408ac561dac4a678a93a0c6ac381c3c983c9015f1e851e1036076f6381634582456f10
85101e728866400b40
0d409385d66eda3b29782820496ac32dc943015f1edb1083106f366f816f1081101e851e
757281ab400b40
0b4089536c38005adac43ba928892821496ac32d6dc901328232a21e021e895f1ea232db
12377e14400b40
0940885340534076cbf46ec482c44fa987a93a200c6ac32dc984c943a5013281325f8a5f
32ea435f6d5150a466400b40
044002f28ba3f2a327a340c787c1f4d6c48cc44fa9783a20e16a44c32dbec982c9594303
4385c943c3ba13668166400b40
014002f28227efdc81dc8d828d90a886a80fb51dc15ac48ac43b29785e28a0e1bd44c384
c3ba6d12c981c9be01be87c92dba3e702766400b40
86f2272adc0f8da88da87697d997d9b597943d5ac16ec48bc40d297854d820e1496a44c3
01c3012d87e9c362be6a621340824053400b40
8df2ef0fa87697d9b52cb0524652f181f1b685b6e4006133c48bc43b4f29545ece3a0ce1
bd6a846ac344bd4489446a2817ab40f240e8400a40
8cef8d76607a7146b6e69d5639568856398577bbcbc116338533c43b0d4f548154ce83ce
20a70c830c49bdaa01aa880cecc066f22a4090400a40
89a897b552b6b387852e3d813d6488648be4d28b646b5a618561163bc43b0d830d4f7828
82285e3a823a0ca002a084e1c06640f281f2400c40
8e76b546773985648be41cafe524e5b286b2e5af244a5a61836116dac482c43b1b811b29
8229a929892920a9a1960a9eab66408240f2400c40
8b977ab6562ec5e4afe5b24acb03cb821dcb4a814ad682d6166186611633084d3b1b811b
29892903191ba104ab536640014081f2400c40
87977ab6873d64e42482244a1d051d01cb87b224b2da6e5a163301338c08c44dc44dc41b
2580664066401140
8a76604677392e648be46baf85afe5b2afe5af86af24e51ce48bc501c58a686b576ec457
962538144083406653401240
8ba897b552b6b339852ed2bb6481648b018b04648e2e855682b6527a233f422766532740
1740
8bc78d76d97a5246829d77b339033982b7edf38ef3b377b64671b0237680dc2753e84001
408153408240f240054081f2400a40
8b27dc0fa8769760b5b02c7152015283d346d3f182f171b081b0b58ab5d99776c790a3e8
f240a381a3408140f281f2401340
86f2272aef0f8da882a876978197948294d9940194857d947d9776a881a8dc85dc2a902a
f2408340f240f201f2014081f240024081f2400d40

%
% Compression made this file 24.57% of the uncompressed size.
%


showpage

% stop using temporary dictionary
end

% restore original state
origstate restore

%%Trailer

%%EndDocument
 @endspecial 0 TeXcolorgray 249 w(Sections)e(7.5.1)g(and)f(7.5.2)p
0 TeXcolorgray 0 TeXcolorgray 10124 6387 a Ft(T)-8 b(echniques)21
b(in)f(Ar)s(ti\002cial)e(Intelligence)i(\226)g(p)n(.)f(26)p
0 TeXcolorgray 4544 6651 a
tx@Dict begin -90 Rot  end
 4544 6651 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
